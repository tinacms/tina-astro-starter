{"version":3,"sources":["../src/react-editor/blurEditor.ts","../src/react-editor/deselectEditor.ts","../src/react-editor/findEditorDocumentOrShadowRoot.ts","../src/react-editor/findEventRange.ts","../src/react-editor/findNodeKey.ts","../src/react-editor/findNodePath.ts","../src/react-editor/focusEditor.ts","../src/react-editor/getEditorWindow.ts","../src/react-editor/hasEditorDOMNode.ts","../src/react-editor/hasEditorEditableTarget.ts","../src/react-editor/hasEditorSelectableTarget.ts","../src/react-editor/hasEditorTarget.ts","../src/react-editor/insertData.ts","../src/react-editor/isComposing.ts","../src/react-editor/isEditorFocused.ts","../src/react-editor/isEditorReadOnly.ts","../src/react-editor/isTargetInsideNonReadonlyVoidEditor.ts","../src/react-editor/setFragmentData.ts","../src/react-editor/toDOMNode.ts","../src/react-editor/toDOMPoint.ts","../src/react-editor/toDOMRange.ts","../src/react-editor/toSlateNode.ts","../src/react-editor/toSlatePoint.ts","../src/react-editor/toSlateRange.ts","../src/utils/focusEditorEdge.ts"],"sourcesContent":["import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Blur the editor. */\nexport const blurEditor = <V extends Value>(editor: TReactEditor<V>) =>\n  ReactEditor.blur(editor as any);\n","import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Deselect the editor. */\nexport const deselectEditor = <V extends Value>(editor: TReactEditor<V>) =>\n  ReactEditor.deselect(editor as any);\n","import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Find the DOM node that implements DocumentOrShadowRoot for the editor. */\nexport const findEditorDocumentOrShadowRoot = <V extends Value>(\n  editor: TReactEditor<V>\n) => {\n  try {\n    return ReactEditor.findDocumentOrShadowRoot(editor as any);\n  } catch (error) {}\n};\n","import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** {@link ReactEditor.findEventRange} */\nexport const findEventRange = <V extends Value>(\n  editor: TReactEditor<V>,\n  event: any\n) => {\n  try {\n    return ReactEditor.findEventRange(editor as any, event);\n  } catch (error) {}\n};\n","import type { TNode, Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Find a key for a Slate node. */\nexport const findNodeKey = <V extends Value>(\n  editor: TReactEditor<V>,\n  node: TNode\n) => {\n  try {\n    return ReactEditor.findKey(editor as any, node);\n  } catch (error) {}\n};\n","import type { TNode, Value } from '@udecode/slate';\nimport type { Path } from 'slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Find the path of Slate node. */\nexport const findNodePath = <V extends Value>(\n  editor: TReactEditor<V>,\n  node: TNode\n): Path | undefined => {\n  try {\n    return ReactEditor.findPath(editor as any, node);\n  } catch (error) {}\n};\n","import type { Location } from 'slate';\n\nimport {\n  type Value,\n  deselect,\n  select,\n  withoutNormalizing,\n} from '@udecode/slate';\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/**\n * Focus the editor. Extension:\n *\n * If `target` is defined:\n *\n * - Deselect the editor (otherwise it will focus the start of the editor)\n * - Select the editor\n * - Focus the editor\n */\nexport const focusEditor = <V extends Value>(\n  editor: TReactEditor<V>,\n  target?: Location\n) => {\n  if (target) {\n    withoutNormalizing(editor, () => {\n      deselect(editor);\n      select(editor, target);\n    });\n  }\n\n  // From slate-react 0.99.0, setTimeout is mandatory to focus the editor after a transform.\n  // setTimeout(() => {\n  ReactEditor.focus(editor as any);\n  // }, 0);\n};\n","import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Return the host window of the current editor. */\nexport const getEditorWindow = <V extends Value>(editor: TReactEditor<V>) => {\n  try {\n    return ReactEditor.getWindow(editor as any);\n  } catch (error) {}\n};\n","import type { Value } from '@udecode/slate';\nimport type { DOMNode } from 'slate-react/dist/utils/dom';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Check if a DOM node is within the editor. */\nexport const hasEditorDOMNode = <V extends Value>(\n  editor: TReactEditor<V>,\n  target: DOMNode,\n  options?: Parameters<typeof ReactEditor.hasDOMNode>[2]\n) => {\n  try {\n    return ReactEditor.hasDOMNode(editor as any, target, options);\n  } catch (error) {}\n\n  return false;\n};\n","import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Check if the target is editable and in the editor. */\nexport const hasEditorEditableTarget = <V extends Value>(\n  editor: TReactEditor<V>,\n  target: EventTarget | null\n): target is Node => {\n  try {\n    return ReactEditor.hasEditableTarget(editor as any, target);\n  } catch (error) {}\n\n  return false;\n};\n","import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Check if the target can be selectable. */\nexport const hasEditorSelectableTarget = <V extends Value>(\n  editor: TReactEditor<V>,\n  target: EventTarget | null\n) => {\n  try {\n    return ReactEditor.hasSelectableTarget(editor as any, target);\n  } catch (error) {}\n\n  return false;\n};\n","import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Check if the target is in the editor. */\nexport const hasEditorTarget = <V extends Value>(\n  editor: TReactEditor<V>,\n  target: EventTarget | null\n): target is Node => {\n  try {\n    return ReactEditor.hasTarget(editor as any, target);\n  } catch (error) {}\n\n  return false;\n};\n","import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Insert data from a `DataTransfer` into the editor. */\nexport const insertData = <V extends Value>(\n  editor: TReactEditor<V>,\n  data: DataTransfer\n) => ReactEditor.insertData(editor as any, data);\n","import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Check if the user is currently composing inside the editor. */\nexport const isComposing = <V extends Value>(editor: TReactEditor<V>) =>\n  ReactEditor.isComposing(editor as any);\n","import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Check if the editor is focused. */\nexport const isEditorFocused = <V extends Value>(editor: TReactEditor<V>) =>\n  ReactEditor.isFocused(editor as any);\n","import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Check if the editor is in read-only mode. */\nexport const isEditorReadOnly = <V extends Value>(editor: TReactEditor<V>) =>\n  ReactEditor.isReadOnly(editor as any);\n","import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Check if the target is inside void and in an non-readonly editor. */\nexport const isTargetInsideNonReadonlyVoid = <V extends Value>(\n  editor: TReactEditor<V>,\n  target: EventTarget | null\n) => {\n  try {\n    return ReactEditor.isTargetInsideNonReadonlyVoid(editor as any, target);\n  } catch (error) {}\n\n  return false;\n};\n","import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Sets data from the currently selected fragment on a `DataTransfer`. */\nexport const setFragmentData = <V extends Value>(\n  editor: TReactEditor<V>,\n  data: DataTransfer\n) => ReactEditor.setFragmentData(editor as any, data);\n","import type { TNode, Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Find the native DOM element from a Slate node. */\nexport const toDOMNode = <V extends Value>(\n  editor: TReactEditor<V>,\n  node: TNode\n) => {\n  try {\n    return ReactEditor.toDOMNode(editor as any, node);\n  } catch (error) {}\n};\n","import type { Value } from '@udecode/slate';\nimport type { Point } from 'slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** Find a native DOM selection point from a Slate point. */\nexport const toDOMPoint = <V extends Value>(\n  editor: TReactEditor<V>,\n  point: Point\n) => {\n  try {\n    return ReactEditor.toDOMPoint(editor as any, point);\n  } catch (error) {}\n};\n","import type { Value } from '@udecode/slate';\nimport type { Range } from 'slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** {@link ReactEditor.toDOMRange} */\nexport const toDOMRange = <V extends Value>(\n  editor: TReactEditor<V>,\n  range: Range\n) => {\n  try {\n    return ReactEditor.toDOMRange(editor as any, range);\n  } catch (error) {}\n};\n","import type { TNode, Value } from '@udecode/slate';\nimport type { DOMNode } from 'slate-react/dist/utils/dom';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** {@link ReactEditor.toSlateNode} */\nexport const toSlateNode = <V extends Value>(\n  editor: TReactEditor<V>,\n  domNode: DOMNode\n) => {\n  try {\n    return ReactEditor.toSlateNode(editor as any, domNode) as TNode;\n  } catch (error) {}\n};\n","import type { Value } from '@udecode/slate';\nimport type { DOMPoint } from 'slate-react/dist/utils/dom';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** {@link ReactEditor.toSlatePoint} */\nexport const toSlatePoint = <V extends Value>(\n  editor: TReactEditor<V>,\n  domPoint: DOMPoint,\n  options: Parameters<typeof ReactEditor.toSlatePoint>[2]\n) => {\n  try {\n    return ReactEditor.toSlatePoint(editor as any, domPoint, options);\n  } catch (error) {}\n};\n","import type { Value } from '@udecode/slate';\n\nimport { ReactEditor } from 'slate-react';\n\nimport type { TReactEditor } from '../types/TReactEditor';\n\n/** {@link ReactEditor.toSlateRange} */\nexport const toSlateRange = <V extends Value>(\n  editor: TReactEditor<V>,\n  domRange: Parameters<typeof ReactEditor.toSlateRange>[1],\n  options: Parameters<typeof ReactEditor.toSlateRange>[2]\n) => {\n  try {\n    return ReactEditor.toSlateRange(editor as any, domRange, options);\n  } catch (error) {}\n};\n","import { type Value, getEndPoint, getStartPoint } from '@udecode/slate';\n\nimport type { TReactEditor } from '../types/index';\n\nimport { focusEditor } from '../react-editor/index';\n\n/** Focus an editor edge. */\nexport const focusEditorEdge = <V extends Value>(\n  editor: TReactEditor<V>,\n  {\n    edge = 'start',\n  }: {\n    edge?: 'end' | 'start';\n  } = {}\n) => {\n  const target =\n    edge === 'start' ? getStartPoint(editor, []) : getEndPoint(editor, []);\n\n  focusEditor(editor, target);\n};\n"],"mappings":"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","names":["ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor","ReactEditor"]}