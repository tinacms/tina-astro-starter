"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  blurEditor: () => blurEditor,
  deselectEditor: () => deselectEditor,
  findEditorDocumentOrShadowRoot: () => findEditorDocumentOrShadowRoot,
  findEventRange: () => findEventRange,
  findNodeKey: () => findNodeKey,
  findNodePath: () => findNodePath,
  focusEditor: () => focusEditor,
  focusEditorEdge: () => focusEditorEdge,
  getEditorWindow: () => getEditorWindow,
  hasEditorDOMNode: () => hasEditorDOMNode,
  hasEditorEditableTarget: () => hasEditorEditableTarget,
  hasEditorSelectableTarget: () => hasEditorSelectableTarget,
  hasEditorTarget: () => hasEditorTarget,
  insertData: () => insertData,
  isComposing: () => isComposing,
  isEditorFocused: () => isEditorFocused,
  isEditorReadOnly: () => isEditorReadOnly,
  isTargetInsideNonReadonlyVoid: () => isTargetInsideNonReadonlyVoid,
  setFragmentData: () => setFragmentData,
  toDOMNode: () => toDOMNode,
  toDOMPoint: () => toDOMPoint,
  toDOMRange: () => toDOMRange,
  toSlateNode: () => toSlateNode,
  toSlatePoint: () => toSlatePoint,
  toSlateRange: () => toSlateRange
});
module.exports = __toCommonJS(src_exports);

// src/react-editor/blurEditor.ts
var import_slate_react = require("slate-react");
var blurEditor = (editor) => import_slate_react.ReactEditor.blur(editor);

// src/react-editor/deselectEditor.ts
var import_slate_react2 = require("slate-react");
var deselectEditor = (editor) => import_slate_react2.ReactEditor.deselect(editor);

// src/react-editor/findEditorDocumentOrShadowRoot.ts
var import_slate_react3 = require("slate-react");
var findEditorDocumentOrShadowRoot = (editor) => {
  try {
    return import_slate_react3.ReactEditor.findDocumentOrShadowRoot(editor);
  } catch (error) {
  }
};

// src/react-editor/findEventRange.ts
var import_slate_react4 = require("slate-react");
var findEventRange = (editor, event) => {
  try {
    return import_slate_react4.ReactEditor.findEventRange(editor, event);
  } catch (error) {
  }
};

// src/react-editor/findNodeKey.ts
var import_slate_react5 = require("slate-react");
var findNodeKey = (editor, node) => {
  try {
    return import_slate_react5.ReactEditor.findKey(editor, node);
  } catch (error) {
  }
};

// src/react-editor/findNodePath.ts
var import_slate_react6 = require("slate-react");
var findNodePath = (editor, node) => {
  try {
    return import_slate_react6.ReactEditor.findPath(editor, node);
  } catch (error) {
  }
};

// src/react-editor/focusEditor.ts
var import_slate = require("@udecode/slate");
var import_slate_react7 = require("slate-react");
var focusEditor = (editor, target) => {
  if (target) {
    (0, import_slate.withoutNormalizing)(editor, () => {
      (0, import_slate.deselect)(editor);
      (0, import_slate.select)(editor, target);
    });
  }
  import_slate_react7.ReactEditor.focus(editor);
};

// src/react-editor/getEditorWindow.ts
var import_slate_react8 = require("slate-react");
var getEditorWindow = (editor) => {
  try {
    return import_slate_react8.ReactEditor.getWindow(editor);
  } catch (error) {
  }
};

// src/react-editor/hasEditorDOMNode.ts
var import_slate_react9 = require("slate-react");
var hasEditorDOMNode = (editor, target, options) => {
  try {
    return import_slate_react9.ReactEditor.hasDOMNode(editor, target, options);
  } catch (error) {
  }
  return false;
};

// src/react-editor/hasEditorEditableTarget.ts
var import_slate_react10 = require("slate-react");
var hasEditorEditableTarget = (editor, target) => {
  try {
    return import_slate_react10.ReactEditor.hasEditableTarget(editor, target);
  } catch (error) {
  }
  return false;
};

// src/react-editor/hasEditorSelectableTarget.ts
var import_slate_react11 = require("slate-react");
var hasEditorSelectableTarget = (editor, target) => {
  try {
    return import_slate_react11.ReactEditor.hasSelectableTarget(editor, target);
  } catch (error) {
  }
  return false;
};

// src/react-editor/hasEditorTarget.ts
var import_slate_react12 = require("slate-react");
var hasEditorTarget = (editor, target) => {
  try {
    return import_slate_react12.ReactEditor.hasTarget(editor, target);
  } catch (error) {
  }
  return false;
};

// src/react-editor/insertData.ts
var import_slate_react13 = require("slate-react");
var insertData = (editor, data) => import_slate_react13.ReactEditor.insertData(editor, data);

// src/react-editor/isComposing.ts
var import_slate_react14 = require("slate-react");
var isComposing = (editor) => import_slate_react14.ReactEditor.isComposing(editor);

// src/react-editor/isEditorFocused.ts
var import_slate_react15 = require("slate-react");
var isEditorFocused = (editor) => import_slate_react15.ReactEditor.isFocused(editor);

// src/react-editor/isEditorReadOnly.ts
var import_slate_react16 = require("slate-react");
var isEditorReadOnly = (editor) => import_slate_react16.ReactEditor.isReadOnly(editor);

// src/react-editor/isTargetInsideNonReadonlyVoidEditor.ts
var import_slate_react17 = require("slate-react");
var isTargetInsideNonReadonlyVoid = (editor, target) => {
  try {
    return import_slate_react17.ReactEditor.isTargetInsideNonReadonlyVoid(editor, target);
  } catch (error) {
  }
  return false;
};

// src/react-editor/setFragmentData.ts
var import_slate_react18 = require("slate-react");
var setFragmentData = (editor, data) => import_slate_react18.ReactEditor.setFragmentData(editor, data);

// src/react-editor/toDOMNode.ts
var import_slate_react19 = require("slate-react");
var toDOMNode = (editor, node) => {
  try {
    return import_slate_react19.ReactEditor.toDOMNode(editor, node);
  } catch (error) {
  }
};

// src/react-editor/toDOMPoint.ts
var import_slate_react20 = require("slate-react");
var toDOMPoint = (editor, point) => {
  try {
    return import_slate_react20.ReactEditor.toDOMPoint(editor, point);
  } catch (error) {
  }
};

// src/react-editor/toDOMRange.ts
var import_slate_react21 = require("slate-react");
var toDOMRange = (editor, range) => {
  try {
    return import_slate_react21.ReactEditor.toDOMRange(editor, range);
  } catch (error) {
  }
};

// src/react-editor/toSlateNode.ts
var import_slate_react22 = require("slate-react");
var toSlateNode = (editor, domNode) => {
  try {
    return import_slate_react22.ReactEditor.toSlateNode(editor, domNode);
  } catch (error) {
  }
};

// src/react-editor/toSlatePoint.ts
var import_slate_react23 = require("slate-react");
var toSlatePoint = (editor, domPoint, options) => {
  try {
    return import_slate_react23.ReactEditor.toSlatePoint(editor, domPoint, options);
  } catch (error) {
  }
};

// src/react-editor/toSlateRange.ts
var import_slate_react24 = require("slate-react");
var toSlateRange = (editor, domRange, options) => {
  try {
    return import_slate_react24.ReactEditor.toSlateRange(editor, domRange, options);
  } catch (error) {
  }
};

// src/utils/focusEditorEdge.ts
var import_slate2 = require("@udecode/slate");
var focusEditorEdge = (editor, {
  edge = "start"
} = {}) => {
  const target = edge === "start" ? (0, import_slate2.getStartPoint)(editor, []) : (0, import_slate2.getEndPoint)(editor, []);
  focusEditor(editor, target);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  blurEditor,
  deselectEditor,
  findEditorDocumentOrShadowRoot,
  findEventRange,
  findNodeKey,
  findNodePath,
  focusEditor,
  focusEditorEdge,
  getEditorWindow,
  hasEditorDOMNode,
  hasEditorEditableTarget,
  hasEditorSelectableTarget,
  hasEditorTarget,
  insertData,
  isComposing,
  isEditorFocused,
  isEditorReadOnly,
  isTargetInsideNonReadonlyVoid,
  setFragmentData,
  toDOMNode,
  toDOMPoint,
  toDOMRange,
  toSlateNode,
  toSlatePoint,
  toSlateRange
});
//# sourceMappingURL=index.js.map