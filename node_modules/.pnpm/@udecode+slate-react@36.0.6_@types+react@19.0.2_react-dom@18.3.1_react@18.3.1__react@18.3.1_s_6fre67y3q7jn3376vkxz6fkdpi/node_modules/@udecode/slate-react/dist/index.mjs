// src/react-editor/blurEditor.ts
import { ReactEditor } from "slate-react";
var blurEditor = (editor) => ReactEditor.blur(editor);

// src/react-editor/deselectEditor.ts
import { ReactEditor as ReactEditor2 } from "slate-react";
var deselectEditor = (editor) => ReactEditor2.deselect(editor);

// src/react-editor/findEditorDocumentOrShadowRoot.ts
import { ReactEditor as ReactEditor3 } from "slate-react";
var findEditorDocumentOrShadowRoot = (editor) => {
  try {
    return ReactEditor3.findDocumentOrShadowRoot(editor);
  } catch (error) {
  }
};

// src/react-editor/findEventRange.ts
import { ReactEditor as ReactEditor4 } from "slate-react";
var findEventRange = (editor, event) => {
  try {
    return ReactEditor4.findEventRange(editor, event);
  } catch (error) {
  }
};

// src/react-editor/findNodeKey.ts
import { ReactEditor as ReactEditor5 } from "slate-react";
var findNodeKey = (editor, node) => {
  try {
    return ReactEditor5.findKey(editor, node);
  } catch (error) {
  }
};

// src/react-editor/findNodePath.ts
import { ReactEditor as ReactEditor6 } from "slate-react";
var findNodePath = (editor, node) => {
  try {
    return ReactEditor6.findPath(editor, node);
  } catch (error) {
  }
};

// src/react-editor/focusEditor.ts
import {
  deselect,
  select,
  withoutNormalizing
} from "@udecode/slate";
import { ReactEditor as ReactEditor7 } from "slate-react";
var focusEditor = (editor, target) => {
  if (target) {
    withoutNormalizing(editor, () => {
      deselect(editor);
      select(editor, target);
    });
  }
  ReactEditor7.focus(editor);
};

// src/react-editor/getEditorWindow.ts
import { ReactEditor as ReactEditor8 } from "slate-react";
var getEditorWindow = (editor) => {
  try {
    return ReactEditor8.getWindow(editor);
  } catch (error) {
  }
};

// src/react-editor/hasEditorDOMNode.ts
import { ReactEditor as ReactEditor9 } from "slate-react";
var hasEditorDOMNode = (editor, target, options) => {
  try {
    return ReactEditor9.hasDOMNode(editor, target, options);
  } catch (error) {
  }
  return false;
};

// src/react-editor/hasEditorEditableTarget.ts
import { ReactEditor as ReactEditor10 } from "slate-react";
var hasEditorEditableTarget = (editor, target) => {
  try {
    return ReactEditor10.hasEditableTarget(editor, target);
  } catch (error) {
  }
  return false;
};

// src/react-editor/hasEditorSelectableTarget.ts
import { ReactEditor as ReactEditor11 } from "slate-react";
var hasEditorSelectableTarget = (editor, target) => {
  try {
    return ReactEditor11.hasSelectableTarget(editor, target);
  } catch (error) {
  }
  return false;
};

// src/react-editor/hasEditorTarget.ts
import { ReactEditor as ReactEditor12 } from "slate-react";
var hasEditorTarget = (editor, target) => {
  try {
    return ReactEditor12.hasTarget(editor, target);
  } catch (error) {
  }
  return false;
};

// src/react-editor/insertData.ts
import { ReactEditor as ReactEditor13 } from "slate-react";
var insertData = (editor, data) => ReactEditor13.insertData(editor, data);

// src/react-editor/isComposing.ts
import { ReactEditor as ReactEditor14 } from "slate-react";
var isComposing = (editor) => ReactEditor14.isComposing(editor);

// src/react-editor/isEditorFocused.ts
import { ReactEditor as ReactEditor15 } from "slate-react";
var isEditorFocused = (editor) => ReactEditor15.isFocused(editor);

// src/react-editor/isEditorReadOnly.ts
import { ReactEditor as ReactEditor16 } from "slate-react";
var isEditorReadOnly = (editor) => ReactEditor16.isReadOnly(editor);

// src/react-editor/isTargetInsideNonReadonlyVoidEditor.ts
import { ReactEditor as ReactEditor17 } from "slate-react";
var isTargetInsideNonReadonlyVoid = (editor, target) => {
  try {
    return ReactEditor17.isTargetInsideNonReadonlyVoid(editor, target);
  } catch (error) {
  }
  return false;
};

// src/react-editor/setFragmentData.ts
import { ReactEditor as ReactEditor18 } from "slate-react";
var setFragmentData = (editor, data) => ReactEditor18.setFragmentData(editor, data);

// src/react-editor/toDOMNode.ts
import { ReactEditor as ReactEditor19 } from "slate-react";
var toDOMNode = (editor, node) => {
  try {
    return ReactEditor19.toDOMNode(editor, node);
  } catch (error) {
  }
};

// src/react-editor/toDOMPoint.ts
import { ReactEditor as ReactEditor20 } from "slate-react";
var toDOMPoint = (editor, point) => {
  try {
    return ReactEditor20.toDOMPoint(editor, point);
  } catch (error) {
  }
};

// src/react-editor/toDOMRange.ts
import { ReactEditor as ReactEditor21 } from "slate-react";
var toDOMRange = (editor, range) => {
  try {
    return ReactEditor21.toDOMRange(editor, range);
  } catch (error) {
  }
};

// src/react-editor/toSlateNode.ts
import { ReactEditor as ReactEditor22 } from "slate-react";
var toSlateNode = (editor, domNode) => {
  try {
    return ReactEditor22.toSlateNode(editor, domNode);
  } catch (error) {
  }
};

// src/react-editor/toSlatePoint.ts
import { ReactEditor as ReactEditor23 } from "slate-react";
var toSlatePoint = (editor, domPoint, options) => {
  try {
    return ReactEditor23.toSlatePoint(editor, domPoint, options);
  } catch (error) {
  }
};

// src/react-editor/toSlateRange.ts
import { ReactEditor as ReactEditor24 } from "slate-react";
var toSlateRange = (editor, domRange, options) => {
  try {
    return ReactEditor24.toSlateRange(editor, domRange, options);
  } catch (error) {
  }
};

// src/utils/focusEditorEdge.ts
import { getEndPoint, getStartPoint } from "@udecode/slate";
var focusEditorEdge = (editor, {
  edge = "start"
} = {}) => {
  const target = edge === "start" ? getStartPoint(editor, []) : getEndPoint(editor, []);
  focusEditor(editor, target);
};
export {
  blurEditor,
  deselectEditor,
  findEditorDocumentOrShadowRoot,
  findEventRange,
  findNodeKey,
  findNodePath,
  focusEditor,
  focusEditorEdge,
  getEditorWindow,
  hasEditorDOMNode,
  hasEditorEditableTarget,
  hasEditorSelectableTarget,
  hasEditorTarget,
  insertData,
  isComposing,
  isEditorFocused,
  isEditorReadOnly,
  isTargetInsideNonReadonlyVoid,
  setFragmentData,
  toDOMNode,
  toDOMPoint,
  toDOMRange,
  toSlateNode,
  toSlatePoint,
  toSlateRange
};
//# sourceMappingURL=index.mjs.map