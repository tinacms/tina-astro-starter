"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  KEY_NODE_ID: () => KEY_NODE_ID,
  createNodeIdPlugin: () => createNodeIdPlugin,
  withNodeId: () => withNodeId
});
module.exports = __toCommonJS(src_exports);

// src/createNodeIdPlugin.ts
var import_server2 = require("@udecode/plate-common/server");

// src/withNodeId.ts
var import_server = require("@udecode/plate-common/server");
var import_castArray = __toESM(require("lodash/castArray.js"));
var import_cloneDeep = __toESM(require("lodash/cloneDeep.js"));
var withNodeId = (editor, {
  options: {
    allow,
    disableInsertOverrides,
    exclude,
    filter,
    filterText,
    idCreator,
    idKey = "",
    reuseId
  }
}) => {
  const { apply, insertNode, insertNodes } = editor;
  const idPropsCreator = () => ({ [idKey]: idCreator() });
  const filterNode = (nodeEntry) => {
    var _a;
    return filter(nodeEntry) && (!filterText || ((_a = nodeEntry[0]) == null ? void 0 : _a.type) !== void 0);
  };
  const removeIdFromNodeIfDuplicate = (node) => {
    if (!reuseId || (0, import_server.someNode)(editor, { at: [], match: { [idKey]: node[idKey] } })) {
      delete node[idKey];
    }
  };
  const overrideIdIfSet = (node) => {
    if ((0, import_server.isDefined)(node._id)) {
      const id = node._id;
      delete node._id;
      if (!(0, import_server.someNode)(editor, { at: [], match: { [idKey]: id } })) {
        node[idKey] = id;
      }
    }
  };
  const query = {
    allow,
    exclude,
    filter: filterNode
  };
  editor.insertNodes = (_nodes, options) => {
    const nodes = (0, import_castArray.default)(_nodes).filter((node) => !!node);
    if (nodes.length === 0)
      return;
    insertNodes(
      nodes.map((node) => {
        if (!disableInsertOverrides && node[idKey]) {
          node._id = node[idKey];
        }
        return node;
      }),
      options
    );
  };
  editor.insertNode = (node) => {
    if (!disableInsertOverrides && node[idKey]) {
      node._id = node[idKey];
    }
    insertNode(node);
  };
  editor.apply = (operation) => {
    if (operation.type === "insert_node") {
      const node = (0, import_cloneDeep.default)(operation.node);
      (0, import_server.applyDeepToNodes)({
        apply: removeIdFromNodeIfDuplicate,
        node,
        query,
        source: {}
      });
      (0, import_server.defaultsDeepToNodes)({
        node,
        path: operation.path,
        query,
        source: idPropsCreator
      });
      if (!disableInsertOverrides) {
        (0, import_server.applyDeepToNodes)({
          apply: overrideIdIfSet,
          node,
          query,
          source: {}
        });
      }
      return apply(__spreadProps(__spreadValues({}, operation), {
        node
      }));
    }
    if (operation.type === "split_node") {
      const node = operation.properties;
      let id = operation.properties[idKey];
      if ((0, import_server.queryNode)([node, operation.path], query)) {
        if (!reuseId || id === void 0 || (0, import_server.someNode)(editor, {
          at: [],
          match: { [idKey]: id }
        })) {
          id = idCreator();
        }
        return apply(__spreadProps(__spreadValues({}, operation), {
          properties: __spreadProps(__spreadValues({}, operation.properties), {
            [idKey]: id
          })
        }));
      }
      if (id) {
        delete operation.properties[idKey];
      }
    }
    return apply(operation);
  };
  return editor;
};

// src/createNodeIdPlugin.ts
var KEY_NODE_ID = "nodeId";
var createNodeIdPlugin = (0, import_server2.createPluginFactory)({
  key: KEY_NODE_ID,
  options: {
    filter: () => true,
    filterText: true,
    idCreator: () => Math.random().toString(36).slice(2, 7),
    idKey: "id"
  },
  withOverrides: withNodeId
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  KEY_NODE_ID,
  createNodeIdPlugin,
  withNodeId
});
//# sourceMappingURL=index.js.map