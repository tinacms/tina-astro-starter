import * as _udecode_plate_common_server from '@udecode/plate-common/server';
import { QueryNodeOptions, Value, PlateEditor, WithPlatePlugin } from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';

interface NodeIdPlugin extends QueryNodeOptions {
    /**
     * By default, when a node inserted using editor.insertNode(s) has an id, it
     * will be used instead of the id generator, except if it already exists in
     * the document. Set this option to true to disable this behavior.
     */
    disableInsertOverrides?: boolean;
    /**
     * Filter `Text` nodes.
     *
     * @default true
     */
    filterText?: boolean;
    /**
     * ID factory, e.g. `uuid`
     *
     * @default () => Date.now()
     */
    idCreator?: Function;
    /**
     * Node key to store the id.
     *
     * @default 'id'
     */
    idKey?: string;
    /**
     * Reuse ids on undo/redo and copy/pasting if not existing in the document.
     * This is disabled by default to avoid duplicate ids across documents.
     *
     * @default false
     */
    reuseId?: boolean;
}
declare const KEY_NODE_ID = "nodeId";
/** @see {@link withNodeId} */
declare const createNodeIdPlugin: <OP = NodeIdPlugin, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

/** Enables support for inserting nodes with an id key. */
declare const withNodeId: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, { options: { allow, disableInsertOverrides, exclude, filter, filterText, idCreator, idKey, reuseId, }, }: WithPlatePlugin<NodeIdPlugin, V, E>) => E;

export { KEY_NODE_ID, type NodeIdPlugin, createNodeIdPlugin, withNodeId };
