{"version":3,"sources":["../src/createNodeIdPlugin.ts","../src/withNodeId.ts"],"sourcesContent":["import {\n  type QueryNodeOptions,\n  createPluginFactory,\n} from '@udecode/plate-common/server';\n\nimport { withNodeId } from './withNodeId';\n\nexport interface NodeIdPlugin extends QueryNodeOptions {\n  /**\n   * By default, when a node inserted using editor.insertNode(s) has an id, it\n   * will be used instead of the id generator, except if it already exists in\n   * the document. Set this option to true to disable this behavior.\n   */\n  disableInsertOverrides?: boolean;\n\n  /**\n   * Filter `Text` nodes.\n   *\n   * @default true\n   */\n  filterText?: boolean;\n\n  /**\n   * ID factory, e.g. `uuid`\n   *\n   * @default () => Date.now()\n   */\n  idCreator?: Function;\n\n  /**\n   * Node key to store the id.\n   *\n   * @default 'id'\n   */\n  idKey?: string;\n\n  /**\n   * Reuse ids on undo/redo and copy/pasting if not existing in the document.\n   * This is disabled by default to avoid duplicate ids across documents.\n   *\n   * @default false\n   */\n  reuseId?: boolean;\n}\n\nexport const KEY_NODE_ID = 'nodeId';\n\n/** @see {@link withNodeId} */\nexport const createNodeIdPlugin = createPluginFactory<NodeIdPlugin>({\n  key: KEY_NODE_ID,\n  options: {\n    filter: () => true,\n    filterText: true,\n    idCreator: () => Math.random().toString(36).slice(2, 7),\n    idKey: 'id',\n  },\n  withOverrides: withNodeId,\n});\n","import {\n  type PlateEditor,\n  type TDescendant,\n  type TNode,\n  type TNodeEntry,\n  type Value,\n  type WithPlatePlugin,\n  applyDeepToNodes,\n  defaultsDeepToNodes,\n  isDefined,\n  queryNode,\n  someNode,\n} from '@udecode/plate-common/server';\nimport castArray from 'lodash/castArray.js';\nimport cloneDeep from 'lodash/cloneDeep.js';\n\nimport type { NodeIdPlugin } from './createNodeIdPlugin';\n\n/** Enables support for inserting nodes with an id key. */\nexport const withNodeId = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  {\n    options: {\n      allow,\n      disableInsertOverrides,\n      exclude,\n      filter,\n      filterText,\n      idCreator,\n      idKey = '',\n      reuseId,\n    },\n  }: WithPlatePlugin<NodeIdPlugin, V, E>\n) => {\n  const { apply, insertNode, insertNodes } = editor;\n\n  const idPropsCreator = () => ({ [idKey]: idCreator!() });\n\n  const filterNode = (nodeEntry: TNodeEntry) => {\n    return (\n      filter!(nodeEntry) && (!filterText || nodeEntry[0]?.type !== undefined)\n    );\n  };\n\n  const removeIdFromNodeIfDuplicate = <N extends TDescendant>(node: N) => {\n    if (\n      !reuseId ||\n      someNode(editor, { at: [], match: { [idKey]: node[idKey] } })\n    ) {\n      delete node[idKey];\n    }\n  };\n\n  const overrideIdIfSet = (node: TNode) => {\n    if (isDefined(node._id)) {\n      const id = node._id;\n      delete node._id;\n\n      if (!someNode(editor, { at: [], match: { [idKey]: id } })) {\n        node[idKey] = id;\n      }\n    }\n  };\n\n  const query = {\n    allow,\n    exclude,\n    filter: filterNode,\n  };\n\n  editor.insertNodes = (_nodes, options) => {\n    const nodes = castArray<TNode>(_nodes as any).filter((node) => !!node);\n\n    if (nodes.length === 0) return;\n\n    insertNodes(\n      nodes.map((node) => {\n        if (!disableInsertOverrides && node[idKey]) {\n          node._id = node[idKey];\n        }\n\n        return node;\n      }),\n      options\n    );\n  };\n\n  editor.insertNode = (node) => {\n    if (!disableInsertOverrides && node[idKey]) {\n      node._id = node[idKey];\n    }\n\n    insertNode(node);\n  };\n\n  editor.apply = (operation) => {\n    if (operation.type === 'insert_node') {\n      // clone to be able to write (read-only)\n      const node = cloneDeep(operation.node);\n\n      // Delete ids from node that are already being used\n      applyDeepToNodes({\n        apply: removeIdFromNodeIfDuplicate,\n        node,\n        query,\n        source: {},\n      });\n\n      defaultsDeepToNodes({\n        node,\n        path: operation.path,\n        query,\n        source: idPropsCreator,\n      });\n\n      if (!disableInsertOverrides) {\n        applyDeepToNodes({\n          apply: overrideIdIfSet,\n          node,\n          query,\n          source: {},\n        });\n      }\n\n      return apply({\n        ...operation,\n        node,\n      });\n    }\n    if (operation.type === 'split_node') {\n      const node = operation.properties as TNode;\n\n      let id = (operation.properties as any)[idKey];\n\n      // only for elements (node with a type) or all nodes if `filterText=false`\n      if (queryNode([node, operation.path], query)) {\n        /**\n         * Create a new id if:\n         *\n         * - The id in the new node is already being used in the editor or,\n         * - The node has no id\n         */\n        if (\n          !reuseId ||\n          id === undefined ||\n          someNode(editor, {\n            at: [],\n            match: { [idKey]: id },\n          })\n        ) {\n          id = idCreator!();\n        }\n\n        return apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            [idKey]: id,\n          },\n        });\n      }\n      // if the node is allowed, we don't want to use the same id\n      if (id) {\n        delete (operation.properties as any)[idKey];\n      }\n    }\n\n    return apply(operation);\n  };\n\n  return editor;\n};\n"],"mappings":"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","names":[]}