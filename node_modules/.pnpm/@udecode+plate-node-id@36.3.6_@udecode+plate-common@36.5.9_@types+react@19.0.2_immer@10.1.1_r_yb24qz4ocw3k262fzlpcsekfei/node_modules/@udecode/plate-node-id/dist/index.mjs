var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/createNodeIdPlugin.ts
import {
  createPluginFactory
} from "@udecode/plate-common/server";

// src/withNodeId.ts
import {
  applyDeepToNodes,
  defaultsDeepToNodes,
  isDefined,
  queryNode,
  someNode
} from "@udecode/plate-common/server";
import castArray from "lodash/castArray.js";
import cloneDeep from "lodash/cloneDeep.js";
var withNodeId = (editor, {
  options: {
    allow,
    disableInsertOverrides,
    exclude,
    filter,
    filterText,
    idCreator,
    idKey = "",
    reuseId
  }
}) => {
  const { apply, insertNode, insertNodes } = editor;
  const idPropsCreator = () => ({ [idKey]: idCreator() });
  const filterNode = (nodeEntry) => {
    var _a;
    return filter(nodeEntry) && (!filterText || ((_a = nodeEntry[0]) == null ? void 0 : _a.type) !== void 0);
  };
  const removeIdFromNodeIfDuplicate = (node) => {
    if (!reuseId || someNode(editor, { at: [], match: { [idKey]: node[idKey] } })) {
      delete node[idKey];
    }
  };
  const overrideIdIfSet = (node) => {
    if (isDefined(node._id)) {
      const id = node._id;
      delete node._id;
      if (!someNode(editor, { at: [], match: { [idKey]: id } })) {
        node[idKey] = id;
      }
    }
  };
  const query = {
    allow,
    exclude,
    filter: filterNode
  };
  editor.insertNodes = (_nodes, options) => {
    const nodes = castArray(_nodes).filter((node) => !!node);
    if (nodes.length === 0)
      return;
    insertNodes(
      nodes.map((node) => {
        if (!disableInsertOverrides && node[idKey]) {
          node._id = node[idKey];
        }
        return node;
      }),
      options
    );
  };
  editor.insertNode = (node) => {
    if (!disableInsertOverrides && node[idKey]) {
      node._id = node[idKey];
    }
    insertNode(node);
  };
  editor.apply = (operation) => {
    if (operation.type === "insert_node") {
      const node = cloneDeep(operation.node);
      applyDeepToNodes({
        apply: removeIdFromNodeIfDuplicate,
        node,
        query,
        source: {}
      });
      defaultsDeepToNodes({
        node,
        path: operation.path,
        query,
        source: idPropsCreator
      });
      if (!disableInsertOverrides) {
        applyDeepToNodes({
          apply: overrideIdIfSet,
          node,
          query,
          source: {}
        });
      }
      return apply(__spreadProps(__spreadValues({}, operation), {
        node
      }));
    }
    if (operation.type === "split_node") {
      const node = operation.properties;
      let id = operation.properties[idKey];
      if (queryNode([node, operation.path], query)) {
        if (!reuseId || id === void 0 || someNode(editor, {
          at: [],
          match: { [idKey]: id }
        })) {
          id = idCreator();
        }
        return apply(__spreadProps(__spreadValues({}, operation), {
          properties: __spreadProps(__spreadValues({}, operation.properties), {
            [idKey]: id
          })
        }));
      }
      if (id) {
        delete operation.properties[idKey];
      }
    }
    return apply(operation);
  };
  return editor;
};

// src/createNodeIdPlugin.ts
var KEY_NODE_ID = "nodeId";
var createNodeIdPlugin = createPluginFactory({
  key: KEY_NODE_ID,
  options: {
    filter: () => true,
    filterText: true,
    idCreator: () => Math.random().toString(36).slice(2, 7),
    idKey: "id"
  },
  withOverrides: withNodeId
});
export {
  KEY_NODE_ID,
  createNodeIdPlugin,
  withNodeId
};
//# sourceMappingURL=index.mjs.map