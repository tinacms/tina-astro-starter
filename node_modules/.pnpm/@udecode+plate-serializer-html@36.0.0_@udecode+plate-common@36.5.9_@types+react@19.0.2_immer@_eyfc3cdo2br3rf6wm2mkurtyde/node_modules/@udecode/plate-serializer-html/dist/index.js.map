{"version":3,"sources":["../src/index.ts","../src/elementToHtml.ts","../src/utils/createElementWithSlate.ts","../src/utils/renderToStaticMarkupClient.ts","../src/utils/stripClassNames.ts","../src/leafToHtml.ts","../src/serializeHtml.ts","../src/utils/newLinesToHtmlBr.ts","../src/utils/stripSlateDataAttributes.ts","../src/utils/trimWhitespace.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './elementToHtml';\nexport * from './leafToHtml';\nexport * from './serializeHtml';\nexport * from './utils/index';\n","import type React from 'react';\n\nimport { type PlateProps, pluginRenderElement } from '@udecode/plate-common';\nimport {\n  type PlateEditor,\n  type PlateRenderElementProps,\n  type Value,\n  pipeInjectProps,\n} from '@udecode/plate-common/server';\nimport { decode } from 'html-entities';\n\nimport { createElementWithSlate } from './utils/createElementWithSlate';\nimport { renderToStaticMarkup } from './utils/renderToStaticMarkupClient';\nimport { stripClassNames } from './utils/stripClassNames';\n\nexport const elementToHtml = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    dndWrapper,\n    plateProps,\n    preserveClassNames,\n    props,\n  }: {\n    dndWrapper?: React.ComponentClass | React.FC | string;\n    plateProps?: Partial<PlateProps>;\n    preserveClassNames?: string[];\n    props: PlateRenderElementProps<V>;\n  }\n) => {\n  let html = `<div>${props.children}</div>`;\n\n  // If no type provided we wrap children with div tag\n  if (!props.element.type) {\n    return html;\n  }\n\n  props = pipeInjectProps<V>(editor, props);\n\n  // Search for matching plugin based on element type\n  editor.plugins.some((plugin) => {\n    if (\n      !plugin.isElement ||\n      plugin.serializeHtml === null ||\n      props.element.type !== plugin.type\n    )\n      return false;\n\n    // Render element using picked plugins renderElement function and ReactDOM\n    html = decode(\n      renderToStaticMarkup(\n        createElementWithSlate(\n          {\n            ...plateProps,\n            children:\n              plugin.serializeHtml?.(props as any) ??\n              pluginRenderElement(editor, plugin)(props),\n          },\n          dndWrapper\n        )\n      )\n    );\n\n    html = stripClassNames(html, { preserveClassNames });\n\n    return true;\n  });\n\n  return html;\n};\n","import React from 'react';\n\nimport { Plate, PlateContent, type PlateProps } from '@udecode/plate-common';\nimport { createPlateEditor } from '@udecode/plate-common/server';\n\n/** Create a React element wrapped in a Plate provider. */\nexport const createElementWithSlate = (\n  plateProps?: Partial<PlateProps>,\n  dndWrapper?: React.ComponentClass | React.FC | string\n) => {\n  const {\n    children,\n    editor = createPlateEditor(),\n    onChange = () => {},\n    value = [],\n    ...props\n  } = plateProps || {};\n\n  const plateContent = React.createElement(PlateContent, {\n    renderEditable: () => children,\n  });\n\n  const plate = React.createElement(\n    Plate,\n    {\n      editor,\n      initialValue: value,\n      onChange,\n      ...props,\n    } as PlateProps,\n    plateContent\n  );\n\n  if (dndWrapper) {\n    return React.createElement(dndWrapper, null, plate);\n  }\n\n  return plate;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport ReactDOMClient from 'react-dom/client';\nimport ReactDOMServer from 'react-dom/server';\n\nimport type { createElementWithSlate } from './createElementWithSlate';\n\nconst REACT_API_UPDATE_VERSION = 18;\n\n/**\n * See\n * https://react.dev/reference/react-dom/server/renderToString#removing-rendertostring-from-the-client-code\n */\nconst renderToStaticNew = (elem: ReturnType<typeof createElementWithSlate>) => {\n  const div = document.createElement('div');\n  const root = ReactDOMClient.createRoot(div);\n  ReactDOM.flushSync(() => {\n    root.render(elem);\n  });\n\n  return div.innerHTML;\n};\n\nconst renderToStaticOld = (elem: ReturnType<typeof createElementWithSlate>) => {\n  const div = document.createElement('div');\n  // eslint-disable-next-line react/no-deprecated\n  ReactDOM.render(elem, div);\n\n  return div.innerHTML;\n};\n\nconst createRenderToStaticMarkupClient = () => {\n  const reactMajorVersion = +React.version.slice(0, 2);\n\n  return reactMajorVersion >= REACT_API_UPDATE_VERSION\n    ? renderToStaticNew\n    : renderToStaticOld;\n};\n\nexport const renderToStaticMarkup =\n  typeof window === 'undefined'\n    ? ReactDOMServer.renderToStaticMarkup\n    : createRenderToStaticMarkupClient();\n","const classAttrRegExp = / class=\"([^\"]*)\"/g;\n\n/**\n * Remove all class names that do not start with one of preserveClassNames\n * (`slate-` by default)\n */\nexport const stripClassNames = (\n  html: string,\n  { preserveClassNames = ['slate-'] }: { preserveClassNames?: string[] }\n) => {\n  if (preserveClassNames.length === 0) {\n    return html.replaceAll(classAttrRegExp, '');\n  }\n\n  const preserveRegExp = new RegExp(\n    preserveClassNames.map((cn) => `^${cn}`).join('|')\n  );\n\n  return html.replaceAll(\n    classAttrRegExp,\n    (match: string, className: string) => {\n      const classesToKeep = className\n        .split(/\\s+/)\n        .filter((cn) => preserveRegExp.test(cn));\n\n      return classesToKeep.length === 0\n        ? ''\n        : ` class=\"${classesToKeep.join(' ')}\"`;\n    }\n  );\n};\n","import { type PlateProps, pluginRenderLeaf } from '@udecode/plate-common';\nimport {\n  type PlateEditor,\n  type PlateRenderLeafProps,\n  type Value,\n  pipeInjectProps,\n} from '@udecode/plate-common/server';\nimport { decode } from 'html-entities';\n\nimport { createElementWithSlate } from './utils/createElementWithSlate';\nimport { renderToStaticMarkup } from './utils/renderToStaticMarkupClient';\nimport { stripClassNames } from './utils/stripClassNames';\n\nexport const leafToHtml = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    plateProps,\n    preserveClassNames,\n    props,\n  }: {\n    plateProps?: Partial<PlateProps>;\n    preserveClassNames?: string[];\n    props: PlateRenderLeafProps<V>;\n  }\n) => {\n  const { children } = props;\n\n  return editor.plugins.reduce((result, plugin) => {\n    if (!plugin.isLeaf) return result;\n\n    props = {\n      ...pipeInjectProps<V>(editor, props),\n      children: result,\n    };\n\n    const serialized =\n      plugin.serializeHtml?.(props as any) ??\n      pluginRenderLeaf(editor, plugin)(props);\n\n    if (serialized === children) return result;\n\n    let html = decode(\n      renderToStaticMarkup(\n        createElementWithSlate({\n          ...plateProps,\n          children: serialized,\n        })\n      )\n    );\n\n    html = stripClassNames(html, { preserveClassNames });\n\n    return html;\n  }, children);\n};\n","import type React from 'react';\n\nimport type { PlateProps } from '@udecode/plate-common';\n\nimport {\n  type EDescendant,\n  type EElement,\n  type PlateEditor,\n  type Value,\n  isText,\n} from '@udecode/plate-common/server';\nimport { encode } from 'html-entities';\n\nimport { elementToHtml } from './elementToHtml';\nimport { leafToHtml } from './leafToHtml';\nimport { newLinesToHtmlBr } from './utils/newLinesToHtmlBr';\nimport { stripSlateDataAttributes } from './utils/stripSlateDataAttributes';\nimport { trimWhitespace } from './utils/trimWhitespace';\n\n/** Convert Slate Nodes into HTML string. */\nexport const serializeHtml = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    convertNewLinesToHtmlBr = false,\n    dndWrapper,\n    nodes,\n    plateProps,\n    preserveClassNames,\n    stripDataAttributes = true,\n    stripWhitespace = true,\n  }: {\n    /**\n     * Optionally convert new line chars (\\n) to HTML <br /> tags\n     *\n     * @default false\n     */\n    convertNewLinesToHtmlBr?: boolean;\n\n    /** Drag and drop component */\n    dndWrapper?: React.ComponentClass | React.FC | string;\n\n    /** Slate nodes to convert to HTML. */\n    nodes: EDescendant<V>[];\n\n    /** Slate props to provide if the rendering depends on plate/slate hooks */\n    plateProps?: Partial<PlateProps>;\n\n    /** List of className prefixes to preserve from being stripped out */\n    preserveClassNames?: string[];\n\n    /** Enable stripping data attributes */\n    stripDataAttributes?: boolean;\n\n    /**\n     * Whether stripping whitespaces from serialized HTML\n     *\n     * @default true\n     */\n    stripWhitespace?: boolean;\n  }\n): string => {\n  let result = nodes\n    .map((node) => {\n      if (isText(node)) {\n        const children = encode(node.text);\n\n        return leafToHtml(editor, {\n          plateProps,\n          preserveClassNames,\n          props: {\n            attributes: { 'data-slate-leaf': true },\n            children: convertNewLinesToHtmlBr\n              ? newLinesToHtmlBr(children)\n              : children,\n            editor,\n            leaf: node as any,\n            text: node as any,\n          },\n        });\n      }\n\n      return elementToHtml<V>(editor, {\n        dndWrapper,\n        plateProps,\n        preserveClassNames,\n        props: {\n          attributes: { 'data-slate-node': 'element', ref: null },\n          children: serializeHtml(editor, {\n            convertNewLinesToHtmlBr,\n            nodes: node.children as EDescendant<V>[],\n            preserveClassNames,\n            stripWhitespace,\n          }),\n          editor,\n          element: node as EElement<V>,\n        },\n      });\n    })\n    .join('');\n\n  if (stripWhitespace) {\n    result = trimWhitespace(result);\n  }\n  if (stripDataAttributes) {\n    result = stripSlateDataAttributes(result);\n  }\n\n  return result;\n};\n","// Convert new line characters to HTML <br /> tags\nexport const newLinesToHtmlBr = (html: string): string =>\n  html.replaceAll('\\n', '<br />');\n","// Remove redundant data attributes\nexport const stripSlateDataAttributes = (rawHtml: string): string =>\n  rawHtml\n    .replaceAll(/ data-slate(?:-node|-type|-leaf)=\"[^\"]+\"/g, '')\n    .replaceAll(/ data-testid=\"[^\"]+\"/g, '');\n","// Remove extra whitespace generated by ReactDOMServer\nexport const trimWhitespace = (rawHtml: string): string =>\n  rawHtml.replaceAll(/\\r\\n|[\\t\\n\\r]/g, '');\n"],"mappings":"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","names":["import_plate_common","import_server","React","import_react","import_server","ReactDOMClient","ReactDOM","React","ReactDOMServer","import_plate_common","import_server","import_html_entities","import_server","import_html_entities"]}