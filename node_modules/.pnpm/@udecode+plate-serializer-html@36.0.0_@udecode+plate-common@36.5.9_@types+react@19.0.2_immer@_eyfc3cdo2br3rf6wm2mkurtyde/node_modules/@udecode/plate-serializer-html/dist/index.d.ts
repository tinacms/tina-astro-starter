import React from 'react';
import * as _udecode_plate_common from '@udecode/plate-common';
import { PlateProps } from '@udecode/plate-common';
import { Value, PlateEditor, PlateRenderElementProps, PlateRenderLeafProps, EDescendant } from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';
import ReactDOMServer from 'react-dom/server';

declare const elementToHtml: <V extends Value>(editor: PlateEditor<V>, { dndWrapper, plateProps, preserveClassNames, props, }: {
    dndWrapper?: string | React.ComponentClass<{}, any> | React.FC<{}> | undefined;
    plateProps?: Partial<PlateProps<Value, PlateEditor<Value>>> | undefined;
    preserveClassNames?: string[] | undefined;
    props: PlateRenderElementProps<V>;
}) => string;

declare const leafToHtml: <V extends Value>(editor: PlateEditor<V>, { plateProps, preserveClassNames, props, }: {
    plateProps?: Partial<PlateProps<Value, PlateEditor<Value>>> | undefined;
    preserveClassNames?: string[] | undefined;
    props: PlateRenderLeafProps<V>;
}) => any;

/** Convert Slate Nodes into HTML string. */
declare const serializeHtml: <V extends Value>(editor: PlateEditor<V>, { convertNewLinesToHtmlBr, dndWrapper, nodes, plateProps, preserveClassNames, stripDataAttributes, stripWhitespace, }: {
    /**
     * Optionally convert new line chars (\n) to HTML <br /> tags
     *
     * @default false
     */
    convertNewLinesToHtmlBr?: boolean | undefined;
    /** Drag and drop component */
    dndWrapper?: string | React.ComponentClass<{}, any> | React.FC<{}> | undefined;
    /** Slate nodes to convert to HTML. */
    nodes: EDescendant<V>[];
    /** Slate props to provide if the rendering depends on plate/slate hooks */
    plateProps?: Partial<PlateProps<Value, PlateEditor<Value>>> | undefined;
    /** List of className prefixes to preserve from being stripped out */
    preserveClassNames?: string[] | undefined;
    /** Enable stripping data attributes */
    stripDataAttributes?: boolean | undefined;
    /**
     * Whether stripping whitespaces from serialized HTML
     *
     * @default true
     */
    stripWhitespace?: boolean | undefined;
}) => string;

/** Create a React element wrapped in a Plate provider. */
declare const createElementWithSlate: (plateProps?: Partial<PlateProps>, dndWrapper?: React.ComponentClass | React.FC | string) => React.FunctionComponentElement<PlateProps<_udecode_slate.Value, _udecode_plate_common.PlateEditor<_udecode_slate.Value>>> | React.ReactElement<{}, string | React.JSXElementConstructor<any>>;

declare const newLinesToHtmlBr: (html: string) => string;

declare const renderToStaticMarkup: ((elem: ReturnType<typeof createElementWithSlate>) => string) | typeof ReactDOMServer.renderToStaticMarkup;

/**
 * Remove all class names that do not start with one of preserveClassNames
 * (`slate-` by default)
 */
declare const stripClassNames: (html: string, { preserveClassNames }: {
    preserveClassNames?: string[] | undefined;
}) => string;

declare const stripSlateDataAttributes: (rawHtml: string) => string;

declare const trimWhitespace: (rawHtml: string) => string;

export { createElementWithSlate, elementToHtml, leafToHtml, newLinesToHtmlBr, renderToStaticMarkup, serializeHtml, stripClassNames, stripSlateDataAttributes, trimWhitespace };
