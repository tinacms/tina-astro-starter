var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/elementToHtml.ts
import { pluginRenderElement } from "@udecode/plate-common";
import {
  pipeInjectProps
} from "@udecode/plate-common/server";
import { decode } from "html-entities";

// src/utils/createElementWithSlate.ts
import React from "react";
import { Plate, PlateContent } from "@udecode/plate-common";
import { createPlateEditor } from "@udecode/plate-common/server";
var createElementWithSlate = (plateProps, dndWrapper) => {
  const _a = plateProps || {}, {
    children,
    editor = createPlateEditor(),
    onChange = () => {
    },
    value = []
  } = _a, props = __objRest(_a, [
    "children",
    "editor",
    "onChange",
    "value"
  ]);
  const plateContent = React.createElement(PlateContent, {
    renderEditable: () => children
  });
  const plate = React.createElement(
    Plate,
    __spreadValues({
      editor,
      initialValue: value,
      onChange
    }, props),
    plateContent
  );
  if (dndWrapper) {
    return React.createElement(dndWrapper, null, plate);
  }
  return plate;
};

// src/utils/renderToStaticMarkupClient.ts
import React2 from "react";
import ReactDOM from "react-dom";
import ReactDOMClient from "react-dom/client";
import ReactDOMServer from "react-dom/server";
var REACT_API_UPDATE_VERSION = 18;
var renderToStaticNew = (elem) => {
  const div = document.createElement("div");
  const root = ReactDOMClient.createRoot(div);
  ReactDOM.flushSync(() => {
    root.render(elem);
  });
  return div.innerHTML;
};
var renderToStaticOld = (elem) => {
  const div = document.createElement("div");
  ReactDOM.render(elem, div);
  return div.innerHTML;
};
var createRenderToStaticMarkupClient = () => {
  const reactMajorVersion = +React2.version.slice(0, 2);
  return reactMajorVersion >= REACT_API_UPDATE_VERSION ? renderToStaticNew : renderToStaticOld;
};
var renderToStaticMarkup = typeof window === "undefined" ? ReactDOMServer.renderToStaticMarkup : createRenderToStaticMarkupClient();

// src/utils/stripClassNames.ts
var classAttrRegExp = / class="([^"]*)"/g;
var stripClassNames = (html, { preserveClassNames = ["slate-"] }) => {
  if (preserveClassNames.length === 0) {
    return html.replaceAll(classAttrRegExp, "");
  }
  const preserveRegExp = new RegExp(
    preserveClassNames.map((cn) => `^${cn}`).join("|")
  );
  return html.replaceAll(
    classAttrRegExp,
    (match, className) => {
      const classesToKeep = className.split(/\s+/).filter((cn) => preserveRegExp.test(cn));
      return classesToKeep.length === 0 ? "" : ` class="${classesToKeep.join(" ")}"`;
    }
  );
};

// src/elementToHtml.ts
var elementToHtml = (editor, {
  dndWrapper,
  plateProps,
  preserveClassNames,
  props
}) => {
  let html = `<div>${props.children}</div>`;
  if (!props.element.type) {
    return html;
  }
  props = pipeInjectProps(editor, props);
  editor.plugins.some((plugin) => {
    var _a, _b;
    if (!plugin.isElement || plugin.serializeHtml === null || props.element.type !== plugin.type)
      return false;
    html = decode(
      renderToStaticMarkup(
        createElementWithSlate(
          __spreadProps(__spreadValues({}, plateProps), {
            children: (_b = (_a = plugin.serializeHtml) == null ? void 0 : _a.call(plugin, props)) != null ? _b : pluginRenderElement(editor, plugin)(props)
          }),
          dndWrapper
        )
      )
    );
    html = stripClassNames(html, { preserveClassNames });
    return true;
  });
  return html;
};

// src/leafToHtml.ts
import { pluginRenderLeaf } from "@udecode/plate-common";
import {
  pipeInjectProps as pipeInjectProps2
} from "@udecode/plate-common/server";
import { decode as decode2 } from "html-entities";
var leafToHtml = (editor, {
  plateProps,
  preserveClassNames,
  props
}) => {
  const { children } = props;
  return editor.plugins.reduce((result, plugin) => {
    var _a, _b;
    if (!plugin.isLeaf)
      return result;
    props = __spreadProps(__spreadValues({}, pipeInjectProps2(editor, props)), {
      children: result
    });
    const serialized = (_b = (_a = plugin.serializeHtml) == null ? void 0 : _a.call(plugin, props)) != null ? _b : pluginRenderLeaf(editor, plugin)(props);
    if (serialized === children)
      return result;
    let html = decode2(
      renderToStaticMarkup(
        createElementWithSlate(__spreadProps(__spreadValues({}, plateProps), {
          children: serialized
        }))
      )
    );
    html = stripClassNames(html, { preserveClassNames });
    return html;
  }, children);
};

// src/serializeHtml.ts
import {
  isText
} from "@udecode/plate-common/server";
import { encode } from "html-entities";

// src/utils/newLinesToHtmlBr.ts
var newLinesToHtmlBr = (html) => html.replaceAll("\n", "<br />");

// src/utils/stripSlateDataAttributes.ts
var stripSlateDataAttributes = (rawHtml) => rawHtml.replaceAll(/ data-slate(?:-node|-type|-leaf)="[^"]+"/g, "").replaceAll(/ data-testid="[^"]+"/g, "");

// src/utils/trimWhitespace.ts
var trimWhitespace = (rawHtml) => rawHtml.replaceAll(/\r\n|[\t\n\r]/g, "");

// src/serializeHtml.ts
var serializeHtml = (editor, {
  convertNewLinesToHtmlBr = false,
  dndWrapper,
  nodes,
  plateProps,
  preserveClassNames,
  stripDataAttributes = true,
  stripWhitespace = true
}) => {
  let result = nodes.map((node) => {
    if (isText(node)) {
      const children = encode(node.text);
      return leafToHtml(editor, {
        plateProps,
        preserveClassNames,
        props: {
          attributes: { "data-slate-leaf": true },
          children: convertNewLinesToHtmlBr ? newLinesToHtmlBr(children) : children,
          editor,
          leaf: node,
          text: node
        }
      });
    }
    return elementToHtml(editor, {
      dndWrapper,
      plateProps,
      preserveClassNames,
      props: {
        attributes: { "data-slate-node": "element", ref: null },
        children: serializeHtml(editor, {
          convertNewLinesToHtmlBr,
          nodes: node.children,
          preserveClassNames,
          stripWhitespace
        }),
        editor,
        element: node
      }
    });
  }).join("");
  if (stripWhitespace) {
    result = trimWhitespace(result);
  }
  if (stripDataAttributes) {
    result = stripSlateDataAttributes(result);
  }
  return result;
};
export {
  createElementWithSlate,
  elementToHtml,
  leafToHtml,
  newLinesToHtmlBr,
  renderToStaticMarkup,
  serializeHtml,
  stripClassNames,
  stripSlateDataAttributes,
  trimWhitespace
};
//# sourceMappingURL=index.mjs.map