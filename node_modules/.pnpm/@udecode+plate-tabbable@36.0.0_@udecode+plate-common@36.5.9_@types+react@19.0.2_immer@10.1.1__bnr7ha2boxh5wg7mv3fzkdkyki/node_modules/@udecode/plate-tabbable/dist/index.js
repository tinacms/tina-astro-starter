"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  KEY_TABBABLE: () => KEY_TABBABLE,
  TabbableEffects: () => TabbableEffects,
  createTabbablePlugin: () => createTabbablePlugin,
  findTabDestination: () => findTabDestination
});
module.exports = __toCommonJS(src_exports);

// src/TabbableEffects.tsx
var import_react = __toESM(require("react"));
var import_plate_common = require("@udecode/plate-common");
var import_server2 = require("@udecode/plate-common/server");
var import_slate2 = require("slate");
var import_tabbable = require("tabbable");

// src/constants.ts
var KEY_TABBABLE = "tabbable";

// src/findTabDestination.ts
var import_server = require("@udecode/plate-common/server");
var import_slate = require("slate");
var findTabDestination = (editor, { activeTabbableEntry, direction, tabbableEntries }) => {
  var _a, _b;
  if (activeTabbableEntry) {
    const activeTabbableEntryIndex = tabbableEntries.indexOf(activeTabbableEntry);
    const nextTabbableEntryIndex = activeTabbableEntryIndex + (direction === "forward" ? 1 : -1);
    const nextTabbableEntry2 = tabbableEntries[nextTabbableEntryIndex];
    if (nextTabbableEntry2 && import_slate.Path.equals(activeTabbableEntry.path, nextTabbableEntry2.path)) {
      return {
        domNode: nextTabbableEntry2.domNode,
        type: "dom-node"
      };
    }
    if (direction === "forward") {
      const pointAfter = (0, import_server.getPointAfter)(editor, activeTabbableEntry.path);
      if (!pointAfter)
        return null;
      return {
        path: pointAfter.path,
        type: "path"
      };
    }
    return {
      path: (0, import_server.getPoint)(editor, activeTabbableEntry.path).path,
      type: "path"
    };
  }
  const selectionPath = ((_b = (_a = editor.selection) == null ? void 0 : _a.anchor) == null ? void 0 : _b.path) || [];
  const nextTabbableEntry = direction === "forward" ? tabbableEntries.find(
    (entry) => !import_slate.Path.isBefore(entry.path, selectionPath)
  ) : [...tabbableEntries].reverse().find((entry) => import_slate.Path.isBefore(entry.path, selectionPath));
  if (nextTabbableEntry) {
    return {
      domNode: nextTabbableEntry.domNode,
      type: "dom-node"
    };
  }
  return null;
};

// src/TabbableEffects.tsx
function TabbableEffects() {
  const editor = (0, import_plate_common.useEditorRef)();
  const readOnly = (0, import_plate_common.useEditorReadOnly)();
  import_react.default.useEffect(() => {
    if (readOnly)
      return;
    const { globalEventListener, insertTabbableEntries, isTabbable, query } = (0, import_server2.getPluginOptions)(editor, KEY_TABBABLE);
    const editorDOMNode = (0, import_plate_common.toDOMNode)(editor, editor);
    if (!editorDOMNode)
      return;
    const handler = (event) => {
      var _a;
      if (event.key !== "Tab" || event.defaultPrevented || !(query == null ? void 0 : query(editor, event))) {
        return;
      }
      const insertedTabbableEntries = insertTabbableEntries == null ? void 0 : insertTabbableEntries(
        editor,
        event
      );
      if (globalEventListener && event.target && ![
        editorDOMNode,
        ...insertedTabbableEntries.map(({ domNode }) => domNode)
      ].some((container) => container.contains(event.target))) {
        return;
      }
      const tabbableDOMNodes = (0, import_tabbable.tabbable)(editorDOMNode);
      const defaultTabbableEntries = tabbableDOMNodes.map((domNode) => {
        const slateNode = (0, import_plate_common.toSlateNode)(editor, domNode);
        if (!slateNode)
          return;
        return {
          domNode,
          path: (0, import_plate_common.findNodePath)(editor, slateNode),
          slateNode
        };
      }).filter(
        (entry) => entry && (isTabbable == null ? void 0 : isTabbable(editor, entry))
      );
      const tabbableEntries = [
        ...insertedTabbableEntries,
        ...defaultTabbableEntries
      ].sort((a, b) => import_slate2.Path.compare(a.path, b.path));
      const { activeElement } = document;
      const activeTabbableEntry = (_a = activeElement && tabbableEntries.find((entry) => entry.domNode === activeElement)) != null ? _a : null;
      const tabDestination = findTabDestination(editor, {
        activeTabbableEntry,
        direction: event.shiftKey ? "backward" : "forward",
        tabbableEntries
      });
      if (tabDestination) {
        event.preventDefault();
        switch (tabDestination.type) {
          case "path": {
            (0, import_plate_common.focusEditor)(editor, {
              anchor: { offset: 0, path: tabDestination.path },
              focus: { offset: 0, path: tabDestination.path }
            });
            break;
          }
          case "dom-node": {
            tabDestination.domNode.focus();
            break;
          }
        }
        return;
      }
      tabbableDOMNodes.forEach((domNode) => {
        const oldTabIndex = domNode.getAttribute("tabindex");
        domNode.setAttribute("tabindex", "-1");
        setTimeout(() => {
          if (oldTabIndex) {
            domNode.setAttribute("tabindex", oldTabIndex);
          } else {
            domNode.removeAttribute("tabindex");
          }
        }, 0);
      });
    };
    const eventListenerNode = globalEventListener ? document.body : editorDOMNode;
    eventListenerNode.addEventListener("keydown", handler, true);
    return () => eventListenerNode.removeEventListener("keydown", handler, true);
  }, [readOnly, editor]);
  return null;
}

// src/createTabbablePlugin.ts
var import_server3 = require("@udecode/plate-common/server");
var createTabbablePlugin = (0, import_server3.createPluginFactory)({
  key: KEY_TABBABLE,
  options: {
    globalEventListener: false,
    insertTabbableEntries: () => [],
    isTabbable: (editor, tabbableEntry) => (0, import_server3.isVoid)(editor, tabbableEntry.slateNode),
    query: () => true
  },
  renderAfterEditable: TabbableEffects
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  KEY_TABBABLE,
  TabbableEffects,
  createTabbablePlugin,
  findTabDestination
});
//# sourceMappingURL=index.js.map