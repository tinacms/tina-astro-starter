import * as _udecode_plate_common_server from '@udecode/plate-common/server';
import { TPath, TNode, Value, PlateEditor } from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';

declare function TabbableEffects(): null;

declare const KEY_TABBABLE = "tabbable";

type TabDestinationPath = {
    path: TPath;
    type: 'path';
};
type TabDestinationDOMNode = {
    domNode: HTMLElement;
    type: 'dom-node';
};
type TabDestination = TabDestinationDOMNode | TabDestinationPath;
type TabbableEntry = {
    domNode: HTMLElement;
    path: TPath;
    slateNode: TNode;
};
interface TabbablePlugin<V extends Value = Value> {
    /**
     * When true, the plugin will add its event listener to the document instead
     * of the editor, allowing it to capture events from outside the editor.
     *
     * @default: false
     */
    globalEventListener?: boolean;
    /**
     * Add additional tabbables to the list of tabbables. Useful for adding
     * tabbables that are not contained within the editor. Ignores `isTabbable`.
     *
     * @default: () => []
     */
    insertTabbableEntries?: (editor: PlateEditor<V>, event: KeyboardEvent) => TabbableEntry[];
    /**
     * Determine whether an element should be included in the tabbable list.
     *
     * @default: (editor, tabbableEntry) => isVoid(editor, tabbableEntry.slateNode)
     */
    isTabbable?: (editor: PlateEditor<V>, tabbableEntry: TabbableEntry) => boolean;
    /**
     * Dynamically enable or disable the plugin.
     *
     * @default: () => true
     */
    query?: (editor: PlateEditor<V>, event: KeyboardEvent) => boolean;
}

declare const createTabbablePlugin: <OP = TabbablePlugin<_udecode_slate.Value>, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

interface FindTabDestinationOptions {
    activeTabbableEntry: TabbableEntry | null;
    direction: 'backward' | 'forward';
    tabbableEntries: TabbableEntry[];
}
declare const findTabDestination: <V extends Value = Value>(editor: PlateEditor<V>, { activeTabbableEntry, direction, tabbableEntries }: FindTabDestinationOptions) => TabDestination | null;

export { type FindTabDestinationOptions, KEY_TABBABLE, type TabDestination, type TabDestinationDOMNode, type TabDestinationPath, TabbableEffects, type TabbableEntry, type TabbablePlugin, createTabbablePlugin, findTabDestination };
