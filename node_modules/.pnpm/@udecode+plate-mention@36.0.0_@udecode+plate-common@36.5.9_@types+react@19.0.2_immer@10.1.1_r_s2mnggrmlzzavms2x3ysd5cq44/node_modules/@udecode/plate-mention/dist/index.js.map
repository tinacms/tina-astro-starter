{"version":3,"sources":["../src/index.ts","../src/createMentionPlugin.ts","../src/getMentionOnSelectItem.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './createMentionPlugin';\nexport * from './getMentionOnSelectItem';\nexport * from './types';\n","import { withTriggerCombobox } from '@udecode/plate-combobox';\nimport { createPluginFactory } from '@udecode/plate-common/server';\n\nimport type { MentionPlugin } from './types';\n\nexport const ELEMENT_MENTION = 'mention';\n\nexport const ELEMENT_MENTION_INPUT = 'mention_input';\n\n/** Enables support for autocompleting @mentions. */\nexport const createMentionPlugin = createPluginFactory<MentionPlugin>({\n  isElement: true,\n  isInline: true,\n  isMarkableVoid: true,\n  isVoid: true,\n  key: ELEMENT_MENTION,\n  options: {\n    createComboboxInput: (trigger) => ({\n      children: [{ text: '' }],\n      trigger,\n      type: ELEMENT_MENTION_INPUT,\n    }),\n    createMentionNode: (item) => ({ value: item.text }),\n    trigger: '@',\n    triggerPreviousCharPattern: /^\\s?$/,\n  },\n  plugins: [\n    {\n      isElement: true,\n      isInline: true,\n      isVoid: true,\n      key: ELEMENT_MENTION_INPUT,\n    },\n  ],\n  withOverrides: withTriggerCombobox,\n});\n","import {\n  type PlateEditor,\n  type PlatePluginKey,\n  type Value,\n  getBlockAbove,\n  getPlugin,\n  insertNodes,\n  insertText,\n  isEndPoint,\n  moveSelection,\n} from '@udecode/plate-common/server';\n\nimport type { MentionPlugin, TMentionElement, TMentionItemBase } from './types';\n\nimport { ELEMENT_MENTION } from './createMentionPlugin';\n\nexport type MentionOnSelectItem<\n  TItem extends TMentionItemBase = TMentionItemBase,\n> = <V extends Value>(\n  editor: PlateEditor<V>,\n  item: TItem,\n  search?: string\n) => void;\n\nexport const getMentionOnSelectItem =\n  <TItem extends TMentionItemBase = TMentionItemBase>({\n    key = ELEMENT_MENTION,\n  }: PlatePluginKey = {}): MentionOnSelectItem<TItem> =>\n  (editor, item, search = '') => {\n    const {\n      options: { createMentionNode, insertSpaceAfterMention },\n      type,\n    } = getPlugin<MentionPlugin>(editor as any, key);\n\n    const props = createMentionNode!(item, search);\n\n    insertNodes<TMentionElement>(editor, {\n      children: [{ text: '' }],\n      type,\n      ...props,\n    } as TMentionElement);\n\n    // move the selection after the element\n    moveSelection(editor, { unit: 'offset' });\n\n    const pathAbove = getBlockAbove(editor)?.[1];\n\n    const isBlockEnd =\n      editor.selection &&\n      pathAbove &&\n      isEndPoint(editor, editor.selection.anchor, pathAbove);\n\n    if (isBlockEnd && insertSpaceAfterMention) {\n      insertText(editor, ' ');\n    }\n  };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,4BAAoC;AACpC,oBAAoC;AAI7B,IAAM,kBAAkB;AAExB,IAAM,wBAAwB;AAG9B,IAAM,0BAAsB,mCAAmC;AAAA,EACpE,WAAW;AAAA,EACX,UAAU;AAAA,EACV,gBAAgB;AAAA,EAChB,QAAQ;AAAA,EACR,KAAK;AAAA,EACL,SAAS;AAAA,IACP,qBAAqB,CAAC,aAAa;AAAA,MACjC,UAAU,CAAC,EAAE,MAAM,GAAG,CAAC;AAAA,MACvB;AAAA,MACA,MAAM;AAAA,IACR;AAAA,IACA,mBAAmB,CAAC,UAAU,EAAE,OAAO,KAAK,KAAK;AAAA,IACjD,SAAS;AAAA,IACT,4BAA4B;AAAA,EAC9B;AAAA,EACA,SAAS;AAAA,IACP;AAAA,MACE,WAAW;AAAA,MACX,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,KAAK;AAAA,IACP;AAAA,EACF;AAAA,EACA,eAAe;AACjB,CAAC;;;ACnCD,IAAAA,iBAUO;AAcA,IAAM,yBACX,CAAoD;AAAA,EAClD,MAAM;AACR,IAAoB,CAAC,MACrB,CAAC,QAAQ,MAAM,SAAS,OAAO;AA5BjC;AA6BI,QAAM;AAAA,IACJ,SAAS,EAAE,mBAAmB,wBAAwB;AAAA,IACtD;AAAA,EACF,QAAI,0BAAyB,QAAe,GAAG;AAE/C,QAAM,QAAQ,kBAAmB,MAAM,MAAM;AAE7C,kCAA6B,QAAQ;AAAA,IACnC,UAAU,CAAC,EAAE,MAAM,GAAG,CAAC;AAAA,IACvB;AAAA,KACG,MACe;AAGpB,oCAAc,QAAQ,EAAE,MAAM,SAAS,CAAC;AAExC,QAAM,aAAY,uCAAc,MAAM,MAApB,mBAAwB;AAE1C,QAAM,aACJ,OAAO,aACP,iBACA,2BAAW,QAAQ,OAAO,UAAU,QAAQ,SAAS;AAEvD,MAAI,cAAc,yBAAyB;AACzC,mCAAW,QAAQ,GAAG;AAAA,EACxB;AACF;","names":["import_server"]}