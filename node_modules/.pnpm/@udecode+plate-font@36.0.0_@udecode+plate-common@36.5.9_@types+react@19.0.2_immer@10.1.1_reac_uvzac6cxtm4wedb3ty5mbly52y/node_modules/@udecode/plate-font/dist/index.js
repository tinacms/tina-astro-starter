"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  MARK_BG_COLOR: () => MARK_BG_COLOR,
  MARK_COLOR: () => MARK_COLOR,
  MARK_FONT_FAMILY: () => MARK_FONT_FAMILY,
  MARK_FONT_SIZE: () => MARK_FONT_SIZE,
  MARK_FONT_WEIGHT: () => MARK_FONT_WEIGHT,
  createFontBackgroundColorPlugin: () => createFontBackgroundColorPlugin,
  createFontColorPlugin: () => createFontColorPlugin,
  createFontFamilyPlugin: () => createFontFamilyPlugin,
  createFontSizePlugin: () => createFontSizePlugin,
  createFontWeightPlugin: () => createFontWeightPlugin,
  setBlockBackgroundColor: () => setBlockBackgroundColor,
  useColorDropdownMenu: () => useColorDropdownMenu,
  useColorDropdownMenuState: () => useColorDropdownMenuState,
  useColorInput: () => useColorInput,
  useColorsCustom: () => useColorsCustom,
  useColorsCustomState: () => useColorsCustomState
});
module.exports = __toCommonJS(src_exports);

// src/createFontBackgroundColorPlugin.ts
var import_server = require("@udecode/plate-common/server");
var MARK_BG_COLOR = "backgroundColor";
var createFontBackgroundColorPlugin = (0, import_server.createPluginFactory)({
  inject: {
    props: {
      nodeKey: MARK_BG_COLOR
    }
  },
  key: MARK_BG_COLOR,
  then: (editor, { type }) => ({
    deserializeHtml: {
      getNode: (element) => ({ [type]: element.style.backgroundColor }),
      isLeaf: true,
      rules: [
        {
          validStyle: {
            backgroundColor: "*"
          }
        }
      ]
    }
  })
});

// src/createFontColorPlugin.ts
var import_server2 = require("@udecode/plate-common/server");
var MARK_COLOR = "color";
var createFontColorPlugin = (0, import_server2.createPluginFactory)({
  inject: {
    props: {
      defaultNodeValue: "black",
      nodeKey: MARK_COLOR
    }
  },
  key: MARK_COLOR,
  then: (editor, { type }) => ({
    deserializeHtml: {
      getNode(element) {
        if (element.style.color) {
          return { [type]: element.style.color };
        }
      },
      isLeaf: true,
      rules: [
        {
          validStyle: {
            color: "*"
          }
        }
      ]
    }
  })
});

// src/createFontFamilyPlugin.ts
var import_server3 = require("@udecode/plate-common/server");
var MARK_FONT_FAMILY = "fontFamily";
var createFontFamilyPlugin = (0, import_server3.createPluginFactory)({
  inject: {
    props: {
      nodeKey: MARK_FONT_FAMILY
    }
  },
  key: MARK_FONT_FAMILY,
  then: (editor, { type }) => ({
    deserializeHtml: {
      getNode: (element) => ({ [type]: element.style.fontFamily }),
      isLeaf: true,
      rules: [
        {
          validStyle: {
            fontFamily: "*"
          }
        }
      ]
    }
  })
});

// src/createFontSizePlugin.ts
var import_server4 = require("@udecode/plate-common/server");
var MARK_FONT_SIZE = "fontSize";
var createFontSizePlugin = (0, import_server4.createPluginFactory)({
  inject: {
    props: {
      nodeKey: MARK_FONT_SIZE
    }
  },
  key: MARK_FONT_SIZE,
  then: (editor, { type }) => ({
    deserializeHtml: {
      getNode: (element) => ({ [type]: element.style.fontSize }),
      isLeaf: true,
      rules: [
        {
          validStyle: {
            fontSize: "*"
          }
        }
      ]
    }
  })
});

// src/createFontWeightPlugin.ts
var import_server5 = require("@udecode/plate-common/server");
var MARK_FONT_WEIGHT = "fontWeight";
var createFontWeightPlugin = (0, import_server5.createPluginFactory)({
  inject: {
    props: {
      nodeKey: MARK_FONT_WEIGHT
    }
  },
  key: MARK_FONT_WEIGHT,
  then: (editor, { type }) => ({
    deserializeHtml: {
      getNode: (element) => ({ [type]: element.style.fontWeight }),
      isLeaf: true,
      rules: [
        {
          validStyle: {
            fontWeight: "*"
          }
        }
      ]
    }
  })
});

// src/hooks/useColorDropdownMenu.ts
var import_react = __toESM(require("react"));
var import_plate_common = require("@udecode/plate-common");
var import_server6 = require("@udecode/plate-common/server");
var useColorDropdownMenuState = ({
  closeOnSelect = true,
  colors,
  customColors,
  nodeType
}) => {
  const editor = (0, import_plate_common.useEditorRef)();
  const selectionDefined = (0, import_plate_common.useEditorSelector)(
    // eslint-disable-next-line @typescript-eslint/no-shadow
    (editor2) => !!editor2.selection,
    []
  );
  const color = (0, import_plate_common.useEditorSelector)(
    // eslint-disable-next-line @typescript-eslint/no-shadow
    (editor2) => (0, import_server6.getMark)(editor2, nodeType),
    [nodeType]
  );
  const [selectedColor, setSelectedColor] = import_react.default.useState();
  const [open, setOpen] = import_react.default.useState(false);
  const onToggle = import_react.default.useCallback(
    (value = !open) => {
      setOpen(value);
    },
    [open, setOpen]
  );
  const updateColor = import_react.default.useCallback(
    (value) => {
      if (editor.selection) {
        setSelectedColor(value);
        (0, import_server6.select)(editor, editor.selection);
        (0, import_plate_common.focusEditor)(editor);
        (0, import_server6.setMarks)(editor, { [nodeType]: value });
      }
    },
    [editor, nodeType]
  );
  const updateColorAndClose = import_react.default.useCallback(
    (value) => {
      updateColor(value);
      closeOnSelect && onToggle();
    },
    [closeOnSelect, onToggle, updateColor]
  );
  const clearColor = import_react.default.useCallback(() => {
    if (editor.selection) {
      (0, import_server6.select)(editor, editor.selection);
      (0, import_plate_common.focusEditor)(editor);
      if (selectedColor) {
        (0, import_server6.removeMark)(editor, { key: nodeType });
      }
      closeOnSelect && onToggle();
    }
  }, [editor, selectedColor, closeOnSelect, onToggle, nodeType]);
  import_react.default.useEffect(() => {
    if (selectionDefined) {
      setSelectedColor(color);
    }
  }, [color, selectionDefined]);
  return {
    clearColor,
    color,
    colors,
    customColors,
    onToggle,
    open,
    selectedColor,
    updateColor,
    updateColorAndClose
  };
};
var useColorDropdownMenu = ({
  onToggle,
  open
}) => {
  return {
    buttonProps: {
      pressed: open
    },
    menuProps: {
      onOpenChange: onToggle,
      open
    }
  };
};

// src/hooks/useColorInput.ts
var import_react2 = __toESM(require("react"));
var useColorInput = () => {
  const ref = import_react2.default.useRef(null);
  const onClick = () => {
    var _a;
    (_a = ref.current) == null ? void 0 : _a.click();
  };
  return {
    childProps: {
      onClick
    },
    inputRef: ref
  };
};

// src/hooks/useColorsCustom.ts
var import_react3 = __toESM(require("react"));
var import_debounce = __toESM(require("lodash/debounce.js"));
var useColorsCustomState = ({
  color,
  colors,
  customColors,
  updateCustomColor
}) => {
  const [customColor, setCustomColor] = import_react3.default.useState();
  const [value, setValue] = import_react3.default.useState(color || "#000000");
  import_react3.default.useEffect(() => {
    if (!color || customColors.some((c) => c.value === color) || colors.some((c) => c.value === color)) {
      return;
    }
    setCustomColor(color);
  }, [color, colors, customColors]);
  const computedColors = import_react3.default.useMemo(
    () => customColor ? [
      ...customColors,
      {
        isBrightColor: false,
        name: "",
        value: customColor
      }
    ] : customColors,
    [customColor, customColors]
  );
  return {
    computedColors,
    setValue,
    updateCustomColor,
    value
  };
};
var useColorsCustom = ({
  setValue,
  updateCustomColor,
  value
}) => {
  const updateCustomColorDebounced = import_react3.default.useCallback(
    (0, import_debounce.default)(updateCustomColor, 100),
    [updateCustomColor]
  );
  return {
    inputProps: {
      onChange: (e) => {
        setValue(e.target.value);
        updateCustomColorDebounced(e.target.value);
      },
      value
    },
    menuItemProps: {
      onSelect: (e) => {
        e.preventDefault();
      }
    }
  };
};

// src/transforms/setBlockBackgroundColor.ts
var import_plate_common2 = require("@udecode/plate-common");
var setBlockBackgroundColor = (editor, block, backgroundColor) => {
  (0, import_plate_common2.setNodes)(editor, { [MARK_BG_COLOR]: backgroundColor }, { at: block[1] });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MARK_BG_COLOR,
  MARK_COLOR,
  MARK_FONT_FAMILY,
  MARK_FONT_SIZE,
  MARK_FONT_WEIGHT,
  createFontBackgroundColorPlugin,
  createFontColorPlugin,
  createFontFamilyPlugin,
  createFontSizePlugin,
  createFontWeightPlugin,
  setBlockBackgroundColor,
  useColorDropdownMenu,
  useColorDropdownMenuState,
  useColorInput,
  useColorsCustom,
  useColorsCustomState
});
//# sourceMappingURL=index.js.map