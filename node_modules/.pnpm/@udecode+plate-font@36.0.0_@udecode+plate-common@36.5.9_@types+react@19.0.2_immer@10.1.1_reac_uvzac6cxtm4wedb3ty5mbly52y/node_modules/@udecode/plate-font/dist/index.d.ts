import * as _udecode_plate_common_server from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';
import * as _udecode_utils from '@udecode/utils';
import React from 'react';
import { PlateEditor, Value, TNodeEntry } from '@udecode/plate-common';

declare const MARK_BG_COLOR = "backgroundColor";
declare const createFontBackgroundColorPlugin: <OP = _udecode_utils.AnyObject, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

declare const MARK_COLOR = "color";
declare const createFontColorPlugin: <OP = _udecode_utils.AnyObject, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

declare const MARK_FONT_FAMILY = "fontFamily";
declare const createFontFamilyPlugin: <OP = _udecode_utils.AnyObject, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

declare const MARK_FONT_SIZE = "fontSize";
declare const createFontSizePlugin: <OP = _udecode_utils.AnyObject, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

declare const MARK_FONT_WEIGHT = "fontWeight";
declare const createFontWeightPlugin: <OP = _udecode_utils.AnyObject, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

declare const useColorDropdownMenuState: ({ closeOnSelect, colors, customColors, nodeType, }: {
    closeOnSelect?: boolean | undefined;
    colors: {
        isBrightColor: boolean;
        name: string;
        value: string;
    }[];
    customColors: {
        isBrightColor: boolean;
        name: string;
        value: string;
    }[];
    nodeType: string;
}) => {
    clearColor: () => void;
    color: string;
    colors: {
        isBrightColor: boolean;
        name: string;
        value: string;
    }[];
    customColors: {
        isBrightColor: boolean;
        name: string;
        value: string;
    }[];
    onToggle: (value?: boolean) => void;
    open: boolean;
    selectedColor: string | undefined;
    updateColor: (value: string) => void;
    updateColorAndClose: (value: string) => void;
};
declare const useColorDropdownMenu: ({ onToggle, open, }: ReturnType<typeof useColorDropdownMenuState>) => {
    buttonProps: {
        pressed: boolean;
    };
    menuProps: {
        onOpenChange: (value?: boolean) => void;
        open: boolean;
    };
};

declare const useColorInput: () => {
    childProps: {
        onClick: () => void;
    };
    inputRef: React.MutableRefObject<HTMLInputElement | null>;
};

declare const useColorsCustomState: ({ color, colors, customColors, updateCustomColor, }: {
    color?: string | undefined;
    colors: any[];
    customColors: any[];
    updateCustomColor: (color: string) => void;
}) => {
    computedColors: any[];
    setValue: React.Dispatch<React.SetStateAction<string>>;
    updateCustomColor: (color: string) => void;
    value: string;
};
declare const useColorsCustom: ({ setValue, updateCustomColor, value, }: ReturnType<typeof useColorsCustomState>) => {
    inputProps: {
        onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
        value: string;
    };
    menuItemProps: {
        onSelect: (e: Event) => void;
    };
};

declare const setBlockBackgroundColor: (editor: PlateEditor<Value>, block: TNodeEntry, backgroundColor: string) => void;

export { MARK_BG_COLOR, MARK_COLOR, MARK_FONT_FAMILY, MARK_FONT_SIZE, MARK_FONT_WEIGHT, createFontBackgroundColorPlugin, createFontColorPlugin, createFontFamilyPlugin, createFontSizePlugin, createFontWeightPlugin, setBlockBackgroundColor, useColorDropdownMenu, useColorDropdownMenuState, useColorInput, useColorsCustom, useColorsCustomState };
