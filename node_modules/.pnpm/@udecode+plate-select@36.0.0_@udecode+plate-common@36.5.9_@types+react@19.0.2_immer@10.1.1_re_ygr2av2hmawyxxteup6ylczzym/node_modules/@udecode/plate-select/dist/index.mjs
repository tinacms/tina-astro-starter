// src/createDeletePlugin.ts
import {
  ELEMENT_DEFAULT,
  createPluginFactory
} from "@udecode/plate-common/server";

// src/withDelete.ts
import {
  getAboveNode,
  isBlockAboveEmpty,
  isSelectionExpanded,
  queryNode,
  removeNodes
} from "@udecode/plate-common/server";
var withDelete = (editor, { options: { query } }) => {
  const { deleteForward } = editor;
  editor.deleteForward = (unit) => {
    if (!editor.selection)
      return;
    const isValidNode = !query || queryNode(getAboveNode(editor), query);
    if (!isSelectionExpanded(editor) && isBlockAboveEmpty(editor) && isValidNode) {
      removeNodes(editor);
    } else {
      deleteForward(unit);
    }
  };
  return editor;
};

// src/createDeletePlugin.ts
var KEY_DELETE = "delete";
var createDeletePlugin = createPluginFactory({
  key: KEY_DELETE,
  options: {
    query: {
      allow: [ELEMENT_DEFAULT]
    }
  },
  withOverrides: withDelete
});

// src/createSelectOnBackspacePlugin.ts
import {
  createPluginFactory as createPluginFactory2
} from "@udecode/plate-common/server";

// src/withSelectOnBackspace.ts
import {
  getNode,
  getNodeEntries,
  getNodeString,
  getPoint,
  getPointBefore,
  isCollapsed,
  queryNode as queryNode2,
  removeNodes as removeNodes2,
  select
} from "@udecode/plate-common/server";
var withSelectOnBackspace = (editor, {
  options: { query, removeNodeIfEmpty }
}) => {
  const { deleteBackward } = editor;
  editor.deleteBackward = (unit) => {
    const { selection } = editor;
    if (unit === "character" && isCollapsed(selection)) {
      const pointBefore = getPointBefore(editor, selection, {
        unit
      });
      if (pointBefore) {
        const [prevCell] = getNodeEntries(editor, {
          at: pointBefore,
          match: (node) => queryNode2([node, pointBefore.path], query)
        });
        if (!!prevCell && pointBefore) {
          const point = getPoint(editor, selection);
          const selectedNode = getNode(editor, point.path);
          if (removeNodeIfEmpty && selectedNode && !getNodeString(selectedNode)) {
            removeNodes2(editor);
          }
          select(editor, pointBefore);
        } else {
          deleteBackward(unit);
        }
      } else {
        deleteBackward(unit);
      }
    } else {
      deleteBackward(unit);
    }
  };
  return editor;
};

// src/createSelectOnBackspacePlugin.ts
var KEY_SELECT_ON_BACKSPACE = "selectOnBackspace";
var createSelectOnBackspacePlugin = createPluginFactory2({
  key: KEY_SELECT_ON_BACKSPACE,
  options: {
    removeNodeIfEmpty: false
  },
  withOverrides: withSelectOnBackspace
});
export {
  KEY_DELETE,
  KEY_SELECT_ON_BACKSPACE,
  createDeletePlugin,
  createSelectOnBackspacePlugin,
  withDelete,
  withSelectOnBackspace
};
//# sourceMappingURL=index.mjs.map