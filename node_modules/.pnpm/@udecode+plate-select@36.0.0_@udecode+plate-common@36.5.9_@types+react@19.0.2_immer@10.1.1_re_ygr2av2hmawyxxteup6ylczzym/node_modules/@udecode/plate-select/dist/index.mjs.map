{"version":3,"sources":["../src/createDeletePlugin.ts","../src/withDelete.ts","../src/createSelectOnBackspacePlugin.ts","../src/withSelectOnBackspace.ts"],"sourcesContent":["import {\n  ELEMENT_DEFAULT,\n  type QueryNodeOptions,\n  createPluginFactory,\n} from '@udecode/plate-common/server';\n\nimport { withDelete } from './withDelete';\n\nexport type DeletePlugin = {\n  query?: QueryNodeOptions;\n};\n\nexport const KEY_DELETE = 'delete';\n\n/** @see {@link withDelete} */\nexport const createDeletePlugin = createPluginFactory<DeletePlugin>({\n  key: KEY_DELETE,\n  options: {\n    query: {\n      allow: [ELEMENT_DEFAULT],\n    },\n  },\n  withOverrides: withDelete,\n});\n","import {\n  type PlateEditor,\n  type Value,\n  type WithPlatePlugin,\n  getAboveNode,\n  isBlockAboveEmpty,\n  isSelectionExpanded,\n  queryNode,\n  removeNodes,\n} from '@udecode/plate-common/server';\n\nimport type { DeletePlugin } from './createDeletePlugin';\n\n/** Set a list of element types to select on backspace */\nexport const withDelete = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  { options: { query } }: WithPlatePlugin<DeletePlugin, V, E>\n) => {\n  const { deleteForward } = editor;\n  editor.deleteForward = (unit) => {\n    if (!editor.selection) return;\n\n    const isValidNode = !query || queryNode(getAboveNode(editor), query);\n\n    if (\n      !isSelectionExpanded(editor) &&\n      isBlockAboveEmpty(editor) &&\n      isValidNode\n    ) {\n      // Cursor is in query blocks and line is empty\n      removeNodes(editor as any);\n    } else {\n      // When the line is not empty or other conditions are not met, fall back to default behavior\n      deleteForward(unit);\n    }\n  };\n\n  return editor;\n};\n","import {\n  type QueryNodeOptions,\n  createPluginFactory,\n} from '@udecode/plate-common/server';\n\nimport { withSelectOnBackspace } from './withSelectOnBackspace';\n\nexport type SelectOnBackspacePlugin = {\n  query?: QueryNodeOptions;\n  removeNodeIfEmpty?: boolean;\n};\n\nexport const KEY_SELECT_ON_BACKSPACE = 'selectOnBackspace';\n\n/** @see {@link withSelectOnBackspace} */\nexport const createSelectOnBackspacePlugin =\n  createPluginFactory<SelectOnBackspacePlugin>({\n    key: KEY_SELECT_ON_BACKSPACE,\n    options: {\n      removeNodeIfEmpty: false,\n    },\n    withOverrides: withSelectOnBackspace,\n  });\n","import type Slate from 'slate';\n\nimport {\n  type PlateEditor,\n  type Value,\n  type WithPlatePlugin,\n  getNode,\n  getNodeEntries,\n  getNodeString,\n  getPoint,\n  getPointBefore,\n  isCollapsed,\n  queryNode,\n  removeNodes,\n  select,\n} from '@udecode/plate-common/server';\n\nimport type { SelectOnBackspacePlugin } from './createSelectOnBackspacePlugin';\n\n/** Set a list of element types to select on backspace */\nexport const withSelectOnBackspace = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  {\n    options: { query, removeNodeIfEmpty },\n  }: WithPlatePlugin<SelectOnBackspacePlugin, V, E>\n) => {\n  const { deleteBackward } = editor;\n\n  editor.deleteBackward = (unit: 'block' | 'character' | 'line' | 'word') => {\n    const { selection } = editor;\n\n    if (unit === 'character' && isCollapsed(selection)) {\n      const pointBefore = getPointBefore(editor, selection as Slate.Location, {\n        unit,\n      });\n\n      if (pointBefore) {\n        const [prevCell] = getNodeEntries(editor, {\n          at: pointBefore,\n          match: (node) => queryNode([node, pointBefore.path], query),\n        });\n\n        if (!!prevCell && pointBefore) {\n          const point = getPoint(editor, selection as Slate.Location);\n          const selectedNode = getNode(editor, point.path);\n\n          if (\n            removeNodeIfEmpty &&\n            selectedNode &&\n            !getNodeString(selectedNode as any)\n          ) {\n            // remove node if empty\n            removeNodes(editor);\n          }\n\n          // don't delete image, set selection there\n          select(editor, pointBefore);\n        } else {\n          deleteBackward(unit);\n        }\n      } else {\n        deleteBackward(unit);\n      }\n    } else {\n      deleteBackward(unit);\n    }\n  };\n\n  return editor;\n};\n"],"mappings":";AAAA;AAAA,EACE;AAAA,EAEA;AAAA,OACK;;;ACJP;AAAA,EAIE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAKA,IAAM,aAAa,CAIxB,QACA,EAAE,SAAS,EAAE,MAAM,EAAE,MAClB;AACH,QAAM,EAAE,cAAc,IAAI;AAC1B,SAAO,gBAAgB,CAAC,SAAS;AAC/B,QAAI,CAAC,OAAO;AAAW;AAEvB,UAAM,cAAc,CAAC,SAAS,UAAU,aAAa,MAAM,GAAG,KAAK;AAEnE,QACE,CAAC,oBAAoB,MAAM,KAC3B,kBAAkB,MAAM,KACxB,aACA;AAEA,kBAAY,MAAa;AAAA,IAC3B,OAAO;AAEL,oBAAc,IAAI;AAAA,IACpB;AAAA,EACF;AAEA,SAAO;AACT;;;AD7BO,IAAM,aAAa;AAGnB,IAAM,qBAAqB,oBAAkC;AAAA,EAClE,KAAK;AAAA,EACL,SAAS;AAAA,IACP,OAAO;AAAA,MACL,OAAO,CAAC,eAAe;AAAA,IACzB;AAAA,EACF;AAAA,EACA,eAAe;AACjB,CAAC;;;AEvBD;AAAA,EAEE,uBAAAA;AAAA,OACK;;;ACDP;AAAA,EAIE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,aAAAC;AAAA,EACA,eAAAC;AAAA,EACA;AAAA,OACK;AAKA,IAAM,wBAAwB,CAInC,QACA;AAAA,EACE,SAAS,EAAE,OAAO,kBAAkB;AACtC,MACG;AACH,QAAM,EAAE,eAAe,IAAI;AAE3B,SAAO,iBAAiB,CAAC,SAAkD;AACzE,UAAM,EAAE,UAAU,IAAI;AAEtB,QAAI,SAAS,eAAe,YAAY,SAAS,GAAG;AAClD,YAAM,cAAc,eAAe,QAAQ,WAA6B;AAAA,QACtE;AAAA,MACF,CAAC;AAED,UAAI,aAAa;AACf,cAAM,CAAC,QAAQ,IAAI,eAAe,QAAQ;AAAA,UACxC,IAAI;AAAA,UACJ,OAAO,CAAC,SAASD,WAAU,CAAC,MAAM,YAAY,IAAI,GAAG,KAAK;AAAA,QAC5D,CAAC;AAED,YAAI,CAAC,CAAC,YAAY,aAAa;AAC7B,gBAAM,QAAQ,SAAS,QAAQ,SAA2B;AAC1D,gBAAM,eAAe,QAAQ,QAAQ,MAAM,IAAI;AAE/C,cACE,qBACA,gBACA,CAAC,cAAc,YAAmB,GAClC;AAEA,YAAAC,aAAY,MAAM;AAAA,UACpB;AAGA,iBAAO,QAAQ,WAAW;AAAA,QAC5B,OAAO;AACL,yBAAe,IAAI;AAAA,QACrB;AAAA,MACF,OAAO;AACL,uBAAe,IAAI;AAAA,MACrB;AAAA,IACF,OAAO;AACL,qBAAe,IAAI;AAAA,IACrB;AAAA,EACF;AAEA,SAAO;AACT;;;AD5DO,IAAM,0BAA0B;AAGhC,IAAM,gCACXC,qBAA6C;AAAA,EAC3C,KAAK;AAAA,EACL,SAAS;AAAA,IACP,mBAAmB;AAAA,EACrB;AAAA,EACA,eAAe;AACjB,CAAC;","names":["createPluginFactory","queryNode","removeNodes","createPluginFactory"]}