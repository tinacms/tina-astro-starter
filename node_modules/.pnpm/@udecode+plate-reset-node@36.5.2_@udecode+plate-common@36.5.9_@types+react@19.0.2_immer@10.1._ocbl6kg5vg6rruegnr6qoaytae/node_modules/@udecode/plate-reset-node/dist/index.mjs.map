{"version":3,"sources":["../src/createResetNodePlugin.ts","../src/onKeyDownResetNode.ts"],"sourcesContent":["import {\n  type TElement,\n  createPluginFactory,\n  getEndPoint,\n  getNode,\n  getNodeProps,\n  getStartPoint,\n  isCollapsed,\n  resetEditorChildren,\n  setNodes,\n  unsetNodes,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\nimport { Point } from 'slate';\n\nimport type { ResetNodePlugin } from './types';\n\nimport { onKeyDownResetNode } from './onKeyDownResetNode';\n\nexport const KEY_RESET_NODE = 'resetNode';\n\n/** Enables support for resetting block type from rules. */\nexport const createResetNodePlugin = createPluginFactory<ResetNodePlugin>({\n  handlers: {\n    onKeyDown: onKeyDownResetNode,\n  },\n  key: KEY_RESET_NODE,\n  options: {\n    rules: [],\n  },\n  withOverrides: (editor, { options }) => {\n    const { deleteBackward, deleteFragment } = editor;\n\n    if (!options.disableEditorReset) {\n      const deleteFragmentPlugin = () => {\n        const { selection } = editor;\n\n        if (!selection) return;\n\n        const start = getStartPoint(editor, []);\n        const end = getEndPoint(editor, []);\n\n        if (\n          (Point.equals(selection.anchor, start) &&\n            Point.equals(selection.focus, end)) ||\n          (Point.equals(selection.focus, start) &&\n            Point.equals(selection.anchor, end))\n        ) {\n          resetEditorChildren(editor, {\n            insertOptions: { select: true },\n          });\n\n          return true;\n        }\n      };\n\n      editor.deleteFragment = (direction) => {\n        if (deleteFragmentPlugin()) return;\n\n        deleteFragment(direction);\n      };\n    }\n    if (!options.disableFirstBlockReset) {\n      editor.deleteBackward = (unit) => {\n        const { selection } = editor;\n\n        if (selection && isCollapsed(selection)) {\n          const start = getStartPoint(editor, []);\n\n          if (Point.equals(selection.anchor, start)) {\n            const node = getNode<TElement>(editor, [0])!;\n\n            const { children, ...props } = editor.blockFactory({}, [0]);\n\n            // replace props\n            withoutNormalizing(editor, () => {\n              // missing id will cause block selection not working and other issues\n              const { id, ...nodeProps } = getNodeProps(node);\n\n              unsetNodes(editor, Object.keys(nodeProps), { at: [0] });\n              setNodes(editor, props, { at: [0] });\n            });\n\n            return;\n          }\n        }\n\n        deleteBackward(unit);\n      };\n    }\n\n    return editor;\n  },\n});\n","import {\n  type KeyboardHandlerReturnType,\n  type PlateEditor,\n  type Value,\n  type WithPlatePlugin,\n  isCollapsed,\n  isHotkey,\n  setElements,\n  someNode,\n} from '@udecode/plate-common/server';\n\nimport type { ResetNodePlugin } from './types';\n\nexport const SIMULATE_BACKSPACE: any = {\n  key: '',\n  which: 8,\n};\n\nexport const onKeyDownResetNode =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E,\n    { options: { rules } }: WithPlatePlugin<ResetNodePlugin, V, E>\n  ): KeyboardHandlerReturnType =>\n  (event) => {\n    if (event.defaultPrevented) return;\n\n    let reset;\n\n    if (!editor.selection) return;\n    if (isCollapsed(editor.selection)) {\n      rules!.forEach(({ defaultType, hotkey, onReset, predicate, types }) => {\n        if (\n          hotkey &&\n          isHotkey(hotkey, event as any) &&\n          predicate(editor as any) &&\n          someNode(editor, { match: { type: types } })\n        ) {\n          event.preventDefault?.();\n\n          setElements(editor, { type: defaultType });\n\n          if (onReset) {\n            onReset(editor as any);\n          }\n\n          reset = true;\n        }\n      });\n    }\n\n    return reset;\n  };\n"],"mappings":"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","names":["isCollapsed","isCollapsed","_a"]}