"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  KEY_RESET_NODE: () => KEY_RESET_NODE,
  SIMULATE_BACKSPACE: () => SIMULATE_BACKSPACE,
  createResetNodePlugin: () => createResetNodePlugin,
  onKeyDownResetNode: () => onKeyDownResetNode
});
module.exports = __toCommonJS(src_exports);

// src/createResetNodePlugin.ts
var import_server2 = require("@udecode/plate-common/server");
var import_slate = require("slate");

// src/onKeyDownResetNode.ts
var import_server = require("@udecode/plate-common/server");
var SIMULATE_BACKSPACE = {
  key: "",
  which: 8
};
var onKeyDownResetNode = (editor, { options: { rules } }) => (event) => {
  if (event.defaultPrevented)
    return;
  let reset;
  if (!editor.selection)
    return;
  if ((0, import_server.isCollapsed)(editor.selection)) {
    rules.forEach(({ defaultType, hotkey, onReset, predicate, types }) => {
      var _a;
      if (hotkey && (0, import_server.isHotkey)(hotkey, event) && predicate(editor) && (0, import_server.someNode)(editor, { match: { type: types } })) {
        (_a = event.preventDefault) == null ? void 0 : _a.call(event);
        (0, import_server.setElements)(editor, { type: defaultType });
        if (onReset) {
          onReset(editor);
        }
        reset = true;
      }
    });
  }
  return reset;
};

// src/createResetNodePlugin.ts
var KEY_RESET_NODE = "resetNode";
var createResetNodePlugin = (0, import_server2.createPluginFactory)({
  handlers: {
    onKeyDown: onKeyDownResetNode
  },
  key: KEY_RESET_NODE,
  options: {
    rules: []
  },
  withOverrides: (editor, { options }) => {
    const { deleteBackward, deleteFragment } = editor;
    if (!options.disableEditorReset) {
      const deleteFragmentPlugin = () => {
        const { selection } = editor;
        if (!selection)
          return;
        const start = (0, import_server2.getStartPoint)(editor, []);
        const end = (0, import_server2.getEndPoint)(editor, []);
        if (import_slate.Point.equals(selection.anchor, start) && import_slate.Point.equals(selection.focus, end) || import_slate.Point.equals(selection.focus, start) && import_slate.Point.equals(selection.anchor, end)) {
          (0, import_server2.resetEditorChildren)(editor, {
            insertOptions: { select: true }
          });
          return true;
        }
      };
      editor.deleteFragment = (direction) => {
        if (deleteFragmentPlugin())
          return;
        deleteFragment(direction);
      };
    }
    if (!options.disableFirstBlockReset) {
      editor.deleteBackward = (unit) => {
        const { selection } = editor;
        if (selection && (0, import_server2.isCollapsed)(selection)) {
          const start = (0, import_server2.getStartPoint)(editor, []);
          if (import_slate.Point.equals(selection.anchor, start)) {
            const node = (0, import_server2.getNode)(editor, [0]);
            const _a = editor.blockFactory({}, [0]), { children } = _a, props = __objRest(_a, ["children"]);
            (0, import_server2.withoutNormalizing)(editor, () => {
              const _a2 = (0, import_server2.getNodeProps)(node), { id } = _a2, nodeProps = __objRest(_a2, ["id"]);
              (0, import_server2.unsetNodes)(editor, Object.keys(nodeProps), { at: [0] });
              (0, import_server2.setNodes)(editor, props, { at: [0] });
            });
            return;
          }
        }
        deleteBackward(unit);
      };
    }
    return editor;
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  KEY_RESET_NODE,
  SIMULATE_BACKSPACE,
  createResetNodePlugin,
  onKeyDownResetNode
});
//# sourceMappingURL=index.js.map