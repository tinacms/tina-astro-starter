import { Location } from 'slate';
import { Value, QueryNodeOptions, TElement } from '@udecode/slate';
import { TReactEditor } from '@udecode/slate-react';
import { PlateElementProps } from './server.mjs';
export { ClassNames, CreateHOCOptions, ErrorHandler, MoveSelectionByOffsetOptions, OnError, PlateElement, PlateLeaf, PlateLeafProps, addSelectedRow, blockSelectedIds, createNodeHOC, createNodesHOC, createNodesWithHOC, defaultsDeepToNodes, hasBlockSelected, isBlockSelected, isType, moveSelectionByOffset, onKeyDownToggleElement, onKeyDownToggleMark, usePlateElement, usePlateLeaf } from './server.mjs';
import 'react';
import '@udecode/plate-core';
import '@udecode/react-utils';
import '@udecode/utils';
import '@udecode/plate-core/server';

interface InputProps {
    /**
     * Should we activate the onKeyDownCapture handler to preventDefault when the
     * user presses enter?
     */
    preventDefaultOnEnterKeydown?: boolean;
}
/**
 * Hook to allow the user to spread a set of predefined props to the Div wrapper
 * of an Input element
 *
 * @param param0 An options object which can be expanded to add further
 *   functionality
 * @returns A props object which can be spread onto the element
 */
declare const useFormInputProps: (options?: InputProps) => {
    props: {
        onKeyDownCapture?: undefined;
    };
} | {
    props: {
        onKeyDownCapture: ((e: React.KeyboardEvent<HTMLDivElement>) => void) | undefined;
    };
};

interface SelectEditorOptions {
    /** Specific location if edge is not defined. */
    at?: Location;
    /** Start or end of the editor. */
    edge?: 'end' | 'start';
    /** If true, focus the React editor before selecting. */
    focus?: boolean;
}
/** Select an editor at a target or an edge (start, end). */
declare const selectEditor: <V extends Value>(editor: TReactEditor<V>, { at, edge, focus }: SelectEditorOptions) => void;

declare const useMarkToolbarButtonState: ({ clear, nodeType, }: {
    clear?: string | string[] | undefined;
    nodeType: string;
}) => {
    clear: string | string[] | undefined;
    nodeType: string;
    pressed: boolean;
};
declare const useMarkToolbarButton: (state: ReturnType<typeof useMarkToolbarButtonState>) => {
    props: {
        onClick: () => void;
        onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => void;
        pressed: boolean;
    };
};

interface PlaceholderProps extends PlateElementProps {
    placeholder: string;
    hideOnBlur?: boolean;
    query?: QueryNodeOptions;
}
declare const usePlaceholderState: ({ element, hideOnBlur, query, }: PlaceholderProps) => {
    enabled: boolean;
};

declare const useRemoveNodeButton: ({ element }: {
    element: TElement;
}) => {
    props: {
        onClick: () => void;
        onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => void;
    };
};

export { type PlaceholderProps, PlateElementProps, type SelectEditorOptions, selectEditor, useFormInputProps, useMarkToolbarButton, useMarkToolbarButtonState, usePlaceholderState, useRemoveNodeButton };
