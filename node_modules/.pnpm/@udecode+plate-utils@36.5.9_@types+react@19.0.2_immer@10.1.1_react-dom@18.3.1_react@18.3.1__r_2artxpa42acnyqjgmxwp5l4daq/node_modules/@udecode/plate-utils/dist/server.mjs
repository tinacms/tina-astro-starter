var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/shared/PlateElement.tsx
import React from "react";
import { Box, useComposedRef } from "@udecode/react-utils";
import { clsx } from "clsx";
var usePlateElement = (props) => {
  const _a = props, {
    attributes,
    editor,
    element,
    elementToAttributes,
    nodeProps
  } = _a, rootProps = __objRest(_a, [
    "attributes",
    "editor",
    "element",
    "elementToAttributes",
    "nodeProps"
  ]);
  return {
    props: __spreadProps(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, attributes), rootProps), nodeProps), elementToAttributes == null ? void 0 : elementToAttributes(element)), {
      className: clsx(props.className, nodeProps == null ? void 0 : nodeProps.className)
    }),
    ref: useComposedRef(props.ref, attributes.ref)
  };
};
var PlateElement = React.forwardRef(
  (props, ref) => {
    const { props: rootProps, ref: rootRef } = usePlateElement(__spreadProps(__spreadValues({}, props), {
      ref
    }));
    return /* @__PURE__ */ React.createElement(Box, __spreadProps(__spreadValues({}, rootProps), { ref: rootRef }));
  }
);
PlateElement.displayName = "PlateElement";

// src/shared/PlateLeaf.tsx
import React2 from "react";
import { Text, useComposedRef as useComposedRef2 } from "@udecode/react-utils";
import { clsx as clsx2 } from "clsx";
var usePlateLeaf = (props) => {
  const _a = props, {
    attributes,
    editor,
    leaf,
    leafToAttributes,
    nodeProps,
    text
  } = _a, rootProps = __objRest(_a, [
    "attributes",
    "editor",
    "leaf",
    "leafToAttributes",
    "nodeProps",
    "text"
  ]);
  return {
    props: __spreadProps(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, attributes), rootProps), nodeProps), leafToAttributes == null ? void 0 : leafToAttributes(leaf)), {
      className: clsx2(props.className, nodeProps == null ? void 0 : nodeProps.className)
    }),
    ref: useComposedRef2(props.ref, attributes.ref)
  };
};
var PlateLeaf = React2.forwardRef(
  (props, ref) => {
    const { props: rootProps, ref: rootRef } = usePlateLeaf(__spreadProps(__spreadValues({}, props), { ref }));
    return /* @__PURE__ */ React2.createElement(Text, __spreadProps(__spreadValues({}, rootProps), { ref: rootRef }));
  }
);
PlateLeaf.displayName = "PlateLeaf";

// src/shared/addSelectedRow.ts
var addSelectedRow = (editor, id, options = {}) => {
  const { blockSelectionStore } = editor;
  if (blockSelectionStore) {
    blockSelectionStore.set.addSelectedRow(id, options);
  }
};

// src/shared/blockSelectedIds.ts
var blockSelectedIds = (editor) => {
  const { blockSelectionStore } = editor;
  if (blockSelectionStore) {
    return blockSelectionStore.get.selectedIds();
  }
};

// src/shared/createNodeHOC.tsx
import React3 from "react";
var createNodeHOC = (HOC) => (Component, props) => function hoc(childrenProps) {
  return /* @__PURE__ */ React3.createElement(HOC, __spreadValues({}, __spreadValues(__spreadValues({}, childrenProps), props)), /* @__PURE__ */ React3.createElement(Component, __spreadValues({}, childrenProps)));
};

// src/shared/createNodesHOC.tsx
import castArray from "lodash/castArray.js";
import merge from "lodash/merge.js";
var createHOC = (withHOC) => {
  return (components, options) => {
    const _components = __spreadValues({}, components);
    const optionsByKey = {};
    const optionsList = castArray(options);
    optionsList.forEach((_a) => {
      var _b = _a, { key, keys } = _b, opt = __objRest(_b, ["key", "keys"]);
      const _keys = key ? [key] : keys != null ? keys : Object.keys(_components);
      _keys.forEach((_key) => {
        optionsByKey[_key] = merge(optionsByKey[_key], opt);
      });
    });
    Object.keys(optionsByKey).forEach((key) => {
      if (!_components[key])
        return;
      _components[key] = withHOC(_components[key], optionsByKey[key]);
    });
    return _components;
  };
};
var createNodesHOC = (HOC) => {
  return createHOC(createNodeHOC(HOC));
};
var createNodesWithHOC = (withHOC) => {
  return createHOC(withHOC);
};

// src/shared/defaultsDeepToNodes.ts
import { applyDeepToNodes } from "@udecode/plate-core/server";
import defaults from "lodash/defaults.js";
var defaultsDeepToNodes = (options) => {
  applyDeepToNodes(__spreadProps(__spreadValues({}, options), { apply: defaults }));
};

// src/shared/hasBlockSelected.ts
var hasBlockSelected = (editor) => {
  const ids = blockSelectedIds(editor);
  return ids && ids.size > 0;
};

// src/shared/isBlockSelected.ts
var isBlockSelected = (editor, id) => {
  const ids = blockSelectedIds(editor);
  return ids == null ? void 0 : ids.has(id);
};

// src/shared/isType.ts
import { getPluginType } from "@udecode/plate-core/server";
import castArray2 from "lodash/castArray.js";
var isType = (editor, node, key) => {
  const keys = castArray2(key);
  const types = [];
  keys.forEach((_key) => types.push(getPluginType(editor, _key)));
  return types.includes(node == null ? void 0 : node.type);
};

// src/shared/moveSelectionByOffset.ts
import {
  isHotkey
} from "@udecode/plate-core/server";
import { moveSelection } from "@udecode/slate";
import { Range } from "slate";
var moveSelectionByOffset = (editor, { query = () => true } = {}) => (event) => {
  const { selection } = editor;
  if (!selection || Range.isExpanded(selection) || !query(editor)) {
    return false;
  }
  if (isHotkey("left", event)) {
    event.preventDefault();
    moveSelection(editor, { reverse: true, unit: "offset" });
    return true;
  }
  if (isHotkey("right", event)) {
    event.preventDefault();
    moveSelection(editor, { unit: "offset" });
    return true;
  }
};

// src/shared/onKeyDownToggleElement.ts
import {
  ELEMENT_DEFAULT,
  getPluginType as getPluginType2,
  isHotkey as isHotkey2,
  toggleNodeType
} from "@udecode/plate-core/server";
import castArray3 from "lodash/castArray.js";
var onKeyDownToggleElement = (editor, { options: { hotkey }, type }) => (e) => {
  if (e.defaultPrevented)
    return;
  const defaultType = getPluginType2(editor, ELEMENT_DEFAULT);
  if (!hotkey)
    return;
  const hotkeys = castArray3(hotkey);
  for (const _hotkey of hotkeys) {
    if (isHotkey2(_hotkey, e)) {
      e.preventDefault();
      toggleNodeType(editor, {
        activeType: type,
        inactiveType: defaultType
      });
      return;
    }
  }
};

// src/shared/onKeyDownToggleMark.ts
import {
  isHotkey as isHotkey3
} from "@udecode/plate-core/server";
import { toggleMark } from "@udecode/slate-utils";
var onKeyDownToggleMark = (editor, {
  options: { clear, hotkey },
  type
}) => (e) => {
  if (e.defaultPrevented)
    return;
  if (!hotkey)
    return;
  if (isHotkey3(hotkey, e)) {
    e.preventDefault();
    toggleMark(editor, { clear, key: type });
  }
};
export {
  PlateElement,
  PlateLeaf,
  addSelectedRow,
  blockSelectedIds,
  createNodeHOC,
  createNodesHOC,
  createNodesWithHOC,
  defaultsDeepToNodes,
  hasBlockSelected,
  isBlockSelected,
  isType,
  moveSelectionByOffset,
  onKeyDownToggleElement,
  onKeyDownToggleMark,
  usePlateElement,
  usePlateLeaf
};
//# sourceMappingURL=server.mjs.map