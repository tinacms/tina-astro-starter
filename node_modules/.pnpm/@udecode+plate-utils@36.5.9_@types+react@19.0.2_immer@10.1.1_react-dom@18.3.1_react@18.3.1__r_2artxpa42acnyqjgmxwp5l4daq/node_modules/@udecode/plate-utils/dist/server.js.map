{"version":3,"sources":["../src/server.ts","../src/shared/PlateElement.tsx","../src/shared/PlateLeaf.tsx","../src/shared/addSelectedRow.ts","../src/shared/blockSelectedIds.ts","../src/shared/createNodeHOC.tsx","../src/shared/createNodesHOC.tsx","../src/shared/defaultsDeepToNodes.ts","../src/shared/hasBlockSelected.ts","../src/shared/isBlockSelected.ts","../src/shared/isType.ts","../src/shared/moveSelectionByOffset.ts","../src/shared/onKeyDownToggleElement.ts","../src/shared/onKeyDownToggleMark.ts"],"sourcesContent":["export * from './shared';\n","import React from 'react';\n\nimport type { PlateRenderElementProps } from '@udecode/plate-core';\nimport type { EElement, TElement, Value } from '@udecode/slate';\n\nimport { Box, type BoxProps, useComposedRef } from '@udecode/react-utils';\nimport { clsx } from 'clsx';\n\nexport type PlateElementProps<\n  V extends Value = Value,\n  N extends TElement = EElement<V>,\n> = {\n  /** Get HTML attributes from Slate element. Alternative to `PlatePlugin.props`. */\n  elementToAttributes?: (element: N) => any;\n} & BoxProps &\n  PlateRenderElementProps<V, N>;\n\nexport const usePlateElement = <T extends TElement = TElement>(\n  props: PlateElementProps<Value, T>\n) => {\n  const {\n    attributes,\n    editor,\n    element,\n    elementToAttributes,\n    nodeProps,\n    ...rootProps\n  } = props;\n\n  return {\n    props: {\n      ...attributes,\n      ...rootProps,\n      ...nodeProps,\n      ...elementToAttributes?.(element as T),\n      className: clsx(props.className, nodeProps?.className),\n    },\n    ref: useComposedRef(props.ref, attributes.ref),\n  };\n};\n\n/** Headless element component. */\nconst PlateElement = React.forwardRef<HTMLDivElement, PlateElementProps>(\n  (props: PlateElementProps, ref) => {\n    const { props: rootProps, ref: rootRef } = usePlateElement({\n      ...props,\n      ref,\n    });\n\n    return <Box {...rootProps} ref={rootRef} />;\n  }\n) as (<V extends Value = Value, N extends TElement = EElement<V>>(\n  props: PlateElementProps<V, N> & React.RefAttributes<HTMLDivElement>\n) => React.ReactElement) & { displayName?: string };\nPlateElement.displayName = 'PlateElement';\n\nexport { PlateElement };\n","import React from 'react';\n\nimport type { PlateRenderLeafProps } from '@udecode/plate-core';\nimport type { EText, TText, Value } from '@udecode/slate';\n\nimport { Text, type TextProps, useComposedRef } from '@udecode/react-utils';\nimport { clsx } from 'clsx';\n\nexport type PlateLeafProps<\n  V extends Value = Value,\n  N extends TText = EText<V>,\n> = {\n  /** Get HTML attributes from Slate leaf. Alternative to `PlatePlugin.props`. */\n  leafToAttributes?: (leaf: N) => any;\n} & PlateRenderLeafProps<V, N> &\n  TextProps;\n\nexport const usePlateLeaf = <T extends TText = TText>(\n  props: PlateLeafProps<Value, T>\n) => {\n  const {\n    attributes,\n    editor,\n    leaf,\n    leafToAttributes,\n    nodeProps,\n    text,\n    ...rootProps\n  } = props;\n\n  return {\n    props: {\n      ...attributes,\n      ...rootProps,\n      ...nodeProps,\n      ...leafToAttributes?.(leaf as T),\n      className: clsx(props.className, nodeProps?.className),\n    },\n    ref: useComposedRef(props.ref, (attributes as any).ref),\n  };\n};\n\n/** Headless leaf component. */\nconst PlateLeaf = React.forwardRef<HTMLSpanElement, PlateLeafProps>(\n  (props: PlateLeafProps, ref) => {\n    const { props: rootProps, ref: rootRef } = usePlateLeaf({ ...props, ref });\n\n    return <Text {...rootProps} ref={rootRef} />;\n  }\n) as (<V extends Value = Value, N extends TText = EText<V>>({\n  className,\n  ...props\n}: PlateLeafProps<V, N> &\n  React.RefAttributes<HTMLSpanElement>) => React.ReactElement) & {\n  displayName?: string;\n};\nPlateLeaf.displayName = 'PlateLeaf';\n\nexport { PlateLeaf };\n","import type { PlateEditor } from '@udecode/plate-core';\nimport type { Value } from '@udecode/slate';\n\nexport const addSelectedRow = <V extends Value>(\n  editor: PlateEditor<V>,\n  id: string,\n  options: { aboveHtmlNode?: HTMLDivElement; clear?: boolean } = {}\n) => {\n  const { blockSelectionStore } = editor as any;\n\n  if (blockSelectionStore) {\n    blockSelectionStore.set.addSelectedRow(id, options);\n  }\n};\n","import type { PlateEditor } from '@udecode/plate-core';\nimport type { Value } from '@udecode/slate';\n\n// Return undefined if not import the `BlockSelectionPlugin` plugin\nexport const blockSelectedIds = <V extends Value>(\n  editor: PlateEditor<V>\n): Set<string> | undefined => {\n  const { blockSelectionStore } = editor as any;\n\n  if (blockSelectionStore) {\n    return blockSelectionStore.get.selectedIds();\n  }\n};\n","import React from 'react';\n\nimport type { PlateRenderElementProps } from '@udecode/plate-core';\nimport type { Value } from '@udecode/slate';\n\nexport const createNodeHOC =\n  <V extends Value, T>(HOC: React.FC<T>) =>\n  (Component: any, props: Omit<T, keyof PlateRenderElementProps<V>>) =>\n    function hoc(childrenProps: PlateRenderElementProps<V>) {\n      return (\n        <HOC {...({ ...childrenProps, ...props } as T)}>\n          <Component {...childrenProps} />\n        </HOC>\n      );\n    };\n","import type { AnyObject } from '@udecode/utils';\n\nimport castArray from 'lodash/castArray.js';\nimport merge from 'lodash/merge.js';\n\nimport { createNodeHOC } from './createNodeHOC';\n\nexport type CreateHOCOptions<T> = {\n  /** Set HOC by key. */\n  key?: string;\n\n  /** Set HOC by key. */\n  keys?: string[];\n} & AnyObject &\n  Partial<T>;\n\nconst createHOC = <T,>(withHOC: any) => {\n  return (\n    components: any,\n    options: CreateHOCOptions<T> | CreateHOCOptions<T>[]\n  ) => {\n    const _components = { ...components };\n    const optionsByKey: any = {};\n\n    const optionsList = castArray<CreateHOCOptions<T>>(options);\n\n    optionsList.forEach(({ key, keys, ...opt }) => {\n      const _keys: string[] = key ? [key] : keys ?? Object.keys(_components);\n\n      _keys.forEach((_key) => {\n        optionsByKey[_key] = merge(optionsByKey[_key], opt);\n      });\n    });\n\n    Object.keys(optionsByKey).forEach((key) => {\n      if (!_components[key]) return;\n\n      _components[key] = withHOC(_components[key], optionsByKey[key]);\n    });\n\n    return _components;\n  };\n};\n\n/** Create components HOC by plugin key. */\nexport const createNodesHOC = <T,>(HOC: React.FC<T>) => {\n  return createHOC<T>(createNodeHOC(HOC));\n};\n\n/** Create components HOC by plugin key with a custom HOC. */\nexport const createNodesWithHOC = <T,>(\n  withHOC: (component: any, props: T) => any\n) => {\n  return createHOC<T>(withHOC);\n};\n","import type { ApplyDeepToNodesOptions } from '@udecode/plate-core';\nimport type { TNode } from '@udecode/slate';\n\nimport { applyDeepToNodes } from '@udecode/plate-core/server';\nimport defaults from 'lodash/defaults.js';\n\n/** Recursively merge a source object to children nodes with a query. */\nexport const defaultsDeepToNodes = <N extends TNode>(\n  options: Omit<ApplyDeepToNodesOptions<N>, 'apply'>\n) => {\n  applyDeepToNodes({ ...options, apply: defaults });\n};\n","import type { PlateEditor } from '@udecode/plate-core';\nimport type { Value } from '@udecode/slate';\n\nimport { blockSelectedIds } from './blockSelectedIds';\n\n// Return undefined if not import the `BlockSelectionPlugin` plugin\nexport const hasBlockSelected = <V extends Value>(\n  editor: PlateEditor<V>\n): boolean | undefined => {\n  const ids = blockSelectedIds(editor);\n\n  return ids && ids.size > 0;\n};\n","import type { PlateEditor } from '@udecode/plate-core';\nimport type { Value } from '@udecode/slate';\n\nimport { blockSelectedIds } from './blockSelectedIds';\n\n// Return undefined if not import the `BlockSelectionPlugin` plugin\nexport const isBlockSelected = <V extends Value>(\n  editor: PlateEditor<V>,\n  id: string\n) => {\n  const ids = blockSelectedIds(editor);\n\n  return ids?.has(id);\n};\n","import type { PlateEditor } from '@udecode/plate-core';\nimport type { Value } from '@udecode/slate';\n\nimport { getPluginType } from '@udecode/plate-core/server';\nimport castArray from 'lodash/castArray.js';\n\n/** Does the node match the type provided. */\nexport const isType = <V extends Value>(\n  editor: PlateEditor<V>,\n  node: any,\n  key?: string | string[]\n) => {\n  const keys = castArray(key);\n  const types: string[] = [];\n\n  keys.forEach((_key) => types.push(getPluginType(editor, _key)));\n\n  return types.includes(node?.type);\n};\n","import {\n  type KeyboardEventHandler,\n  type PlateEditor,\n  isHotkey,\n} from '@udecode/plate-core/server';\nimport { type Value, moveSelection } from '@udecode/slate';\nimport { Range } from 'slate';\n\nexport interface MoveSelectionByOffsetOptions<V extends Value = Value> {\n  query?: (editor: PlateEditor<V>) => boolean;\n}\n\nexport const moveSelectionByOffset: <V extends Value>(\n  editor: PlateEditor<V>,\n  options?: MoveSelectionByOffsetOptions<V>\n) => KeyboardEventHandler =\n  (editor, { query = () => true } = {}) =>\n  (event) => {\n    const { selection } = editor;\n\n    if (!selection || Range.isExpanded(selection) || !query(editor)) {\n      return false;\n    }\n    if (isHotkey('left', event)) {\n      event.preventDefault();\n      moveSelection(editor, { reverse: true, unit: 'offset' });\n\n      return true;\n    }\n    if (isHotkey('right', event)) {\n      event.preventDefault();\n      moveSelection(editor, { unit: 'offset' });\n\n      return true;\n    }\n  };\n","import type { Value } from '@udecode/slate';\n\nimport {\n  ELEMENT_DEFAULT,\n  type HotkeyPlugin,\n  type KeyboardHandlerReturnType,\n  type PlateEditor,\n  type WithPlatePlugin,\n  getPluginType,\n  isHotkey,\n  toggleNodeType,\n} from '@udecode/plate-core/server';\nimport castArray from 'lodash/castArray.js';\n\nexport const onKeyDownToggleElement =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E,\n    { options: { hotkey }, type }: WithPlatePlugin<HotkeyPlugin, V, E>\n  ): KeyboardHandlerReturnType =>\n  (e) => {\n    if (e.defaultPrevented) return;\n\n    const defaultType = getPluginType(editor, ELEMENT_DEFAULT);\n\n    if (!hotkey) return;\n\n    const hotkeys = castArray(hotkey);\n\n    for (const _hotkey of hotkeys) {\n      if (isHotkey(_hotkey, e as any)) {\n        e.preventDefault();\n        toggleNodeType(editor, {\n          activeType: type,\n          inactiveType: defaultType,\n        });\n\n        return;\n      }\n    }\n  };\n","import type { Value } from '@udecode/slate';\n\nimport {\n  type KeyboardHandlerReturnType,\n  type PlateEditor,\n  type ToggleMarkPlugin,\n  type WithPlatePlugin,\n  isHotkey,\n} from '@udecode/plate-core/server';\nimport { toggleMark } from '@udecode/slate-utils';\n\nexport const onKeyDownToggleMark =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E,\n    {\n      options: { clear, hotkey },\n      type,\n    }: WithPlatePlugin<ToggleMarkPlugin, V, E>\n  ): KeyboardHandlerReturnType =>\n  (e) => {\n    if (e.defaultPrevented) return;\n    if (!hotkey) return;\n    if (isHotkey(hotkey, e as any)) {\n      e.preventDefault();\n\n      toggleMark(editor, { clear, key: type as any });\n    }\n  };\n"],"mappings":"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","names":["React","import_react","import_react_utils","import_clsx","React","import_react","React","castArray","merge","defaults","import_server","import_castArray","castArray","import_server","import_slate","import_server","import_castArray","castArray","import_server"]}