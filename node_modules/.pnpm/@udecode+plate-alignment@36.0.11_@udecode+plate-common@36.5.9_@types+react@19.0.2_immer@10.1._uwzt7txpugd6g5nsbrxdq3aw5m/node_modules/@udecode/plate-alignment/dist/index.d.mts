import * as _udecode_plate_common_server from '@udecode/plate-common/server';
import { Value, PlateEditor, SetNodesOptions, PlatePluginKey } from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';
import * as _udecode_utils from '@udecode/utils';

declare const useAlignDropdownMenuState: () => {
    value: Alignment;
};
declare const useAlignDropdownMenu: ({ value, }: ReturnType<typeof useAlignDropdownMenuState>) => {
    radioGroupProps: {
        onValueChange: (newValue: string) => void;
        value: Alignment;
    };
};

declare const KEY_ALIGN = "align";
/** Creates a plugin that adds alignment functionality to the editor. */
declare const createAlignPlugin: <OP = _udecode_utils.AnyObject, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

type Alignment = 'center' | 'end' | 'justify' | 'left' | 'right' | 'start';

declare const setAlign: <V extends Value>(editor: PlateEditor<V>, { key, setNodesOptions, value, }: {
    setNodesOptions?: SetNodesOptions<V> | undefined;
    value: Alignment;
} & PlatePluginKey) => void;

export { type Alignment, KEY_ALIGN, createAlignPlugin, setAlign, useAlignDropdownMenu, useAlignDropdownMenuState };
