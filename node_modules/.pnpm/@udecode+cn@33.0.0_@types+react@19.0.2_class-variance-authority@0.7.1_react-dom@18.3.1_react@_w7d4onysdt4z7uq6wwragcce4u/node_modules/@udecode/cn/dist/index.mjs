var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/cn.ts
import { cx } from "class-variance-authority";
import { twMerge } from "tailwind-merge";
function cn(...inputs) {
  return twMerge(cx(inputs));
}

// src/withProps.tsx
import React from "react";
function withProps(Component, defaultProps) {
  const ComponentWithClassName = Component;
  return React.forwardRef(function ExtendComponent(props, ref) {
    return /* @__PURE__ */ React.createElement(
      ComponentWithClassName,
      __spreadProps(__spreadValues(__spreadValues({
        ref
      }, defaultProps), props), {
        className: cn(
          defaultProps.className,
          props.className
        )
      })
    );
  });
}

// src/withCn.tsx
function withCn(Component, ...inputs) {
  return withProps(Component, { className: cn(inputs) });
}

// src/withVariants.tsx
import React2 from "react";
function withVariants(Component, variants, onlyVariantsProps) {
  const ComponentWithClassName = Component;
  return React2.forwardRef(function ExtendComponent(allProps, ref) {
    const _a = allProps, { className } = _a, props = __objRest(_a, ["className"]);
    const rest = __spreadValues({}, props);
    if (onlyVariantsProps) {
      onlyVariantsProps.forEach((key) => {
        if (props[key] !== void 0) {
          delete rest[key];
        }
      });
    }
    return /* @__PURE__ */ React2.createElement(
      ComponentWithClassName,
      __spreadValues({
        className: cn(variants(props), className),
        ref
      }, rest)
    );
  });
}

// src/index.tsx
export * from "@udecode/react-utils";
export {
  cn,
  withCn,
  withProps,
  withVariants
};
//# sourceMappingURL=index.mjs.map