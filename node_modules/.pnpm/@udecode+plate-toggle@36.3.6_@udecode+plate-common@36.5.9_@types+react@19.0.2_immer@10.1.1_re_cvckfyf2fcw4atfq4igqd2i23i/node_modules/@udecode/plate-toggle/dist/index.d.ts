import * as _udecode_plate_common_server from '@udecode/plate-common/server';
import { Value, PlateEditor, InjectComponentReturnType, TNodeEntry } from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';
import * as react from 'react';
import { SetStateAction } from 'react';
import * as jotai from 'jotai';
import * as jotai_x from 'jotai-x';
import { TIndentElement } from '@udecode/plate-indent';

declare const ToggleControllerProvider: react.FC<jotai_x.ProviderProps<{
    openIds: Set<string>;
}>>;
declare const toggleControllerStore: jotai_x.StoreApi<{
    openIds: jotai.PrimitiveAtom<Set<string>> & {
        init: Set<string>;
    };
}, object, "toggleController">;
declare const useToggleControllerStore: jotai_x.UseStoreApi<{
    openIds: jotai.PrimitiveAtom<Set<string>> & {
        init: Set<string>;
    };
}, object>;
declare const useIsVisible: (elementId: string) => boolean;
declare const toggleIndexAtom: jotai.Atom<Map<string, string[]>>;
declare const useToggleIndex: () => Map<string, string[]>;
declare const someToggleClosed: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, toggleIds: string[]) => boolean;
declare const isToggleOpen: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, toggleId: string) => boolean;
declare const toggleIds: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, ids: string[], force?: boolean | null) => void;
declare const buildToggleIndex: (elements: Value) => Map<string, string[]>;

interface TogglePlugin {
    openIds?: Set<string>;
    setOpenIds?: (args_0: SetStateAction<Set<string>>) => void;
    toggleIndex?: ReturnType<typeof buildToggleIndex>;
}
declare const ELEMENT_TOGGLE = "toggle";
type TToggleElement = {
    type: typeof ELEMENT_TOGGLE;
};

declare const createTogglePlugin: <OP = TogglePlugin, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

declare const injectToggle: () => InjectComponentReturnType;

declare const withToggle: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E) => E;

declare const useHooksToggle: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E) => void;

declare const useToggleButtonState: (toggleId: string) => {
    open: boolean;
    toggleId: string;
};
declare const useToggleButton: (state: ReturnType<typeof useToggleButtonState>) => {
    buttonProps: {
        onClick: (e: React.MouseEvent) => void;
        onMouseDown: (e: React.MouseEvent) => void;
    };
    open: boolean;
    toggleId: string;
};

declare const useToggleToolbarButtonState: () => {
    pressed: boolean;
};
declare const useToggleToolbarButton: ({ pressed, }: ReturnType<typeof useToggleToolbarButtonState>) => {
    props: {
        onClick: () => void;
        onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => void;
        pressed: boolean;
    };
};

declare const findElementIdsHiddenInToggle: (openToggleIds: Set<string>, elements: TIndentElement[]) => string[];

declare function getEnclosingToggleIds<V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, elementId: string): string[];

declare const getLastEntryEnclosedInToggle: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, toggleId: string) => TNodeEntry | undefined;

declare const isInClosedToggle: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, elementId: string) => boolean;

declare const someToggle: <V extends Value>(editor: PlateEditor<V>) => boolean;

declare const moveCurrentBlockAfterPreviousSelectable: (editor: PlateEditor) => boolean | undefined;

declare const moveNextSelectableAfterCurrentBlock: (editor: PlateEditor) => false | undefined;

declare const openNextToggles: (editor: PlateEditor) => void;

export { ELEMENT_TOGGLE, type TToggleElement, ToggleControllerProvider, type TogglePlugin, buildToggleIndex, createTogglePlugin, findElementIdsHiddenInToggle, getEnclosingToggleIds, getLastEntryEnclosedInToggle, injectToggle, isInClosedToggle, isToggleOpen, moveCurrentBlockAfterPreviousSelectable, moveNextSelectableAfterCurrentBlock, openNextToggles, someToggle, someToggleClosed, toggleControllerStore, toggleIds, toggleIndexAtom, useHooksToggle, useIsVisible, useToggleButton, useToggleButtonState, useToggleControllerStore, useToggleIndex, useToggleToolbarButton, useToggleToolbarButtonState, withToggle };
