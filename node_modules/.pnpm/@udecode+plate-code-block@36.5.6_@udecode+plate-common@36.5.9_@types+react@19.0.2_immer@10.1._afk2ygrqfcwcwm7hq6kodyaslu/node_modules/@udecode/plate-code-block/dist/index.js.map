{"version":3,"sources":["../src/index.ts","../src/client/createCodeBlockPlugin.ts","../src/shared/constants.ts","../src/shared/deserializeHtmlCodeBlockPre.ts","../src/shared/insertFragmentCodeBlock.ts","../src/shared/normalizers/normalizeCodeBlock.tsx","../src/shared/options/getCodeLineType.ts","../src/shared/queries/getCodeLineEntry.ts","../src/shared/queries/getIndentDepth.ts","../src/shared/queries/isCodeBlockEmpty.ts","../src/shared/queries/isSelectionAtCodeBlockStart.ts","../src/shared/transforms/deleteStartSpace.ts","../src/shared/transforms/indentCodeLine.ts","../src/shared/transforms/insertCodeBlock.ts","../src/shared/transforms/insertCodeLine.ts","../src/shared/transforms/insertEmptyCodeBlock.ts","../src/shared/transforms/outdentCodeLine.ts","../src/shared/transforms/toggleCodeBlock.ts","../src/shared/transforms/unwrapCodeBlock.ts","../src/shared/withCodeBlock.ts","../src/client/decorateCodeLine.ts","../src/client/onKeyDownCodeBlock.ts","../src/client/hooks/useCodeBlockCombobox.ts","../src/client/hooks/useCodeBlockElement.ts","../src/client/hooks/useCodeSyntaxLeaf.tsx","../src/client/hooks/useToggleCodeBlockButton.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './client/index';\nexport * from './shared/index';\n","import {\n  KEY_DESERIALIZE_HTML,\n  type PlateEditor,\n  type Value,\n  createPluginFactory,\n  getPlugin,\n  someNode,\n} from '@udecode/plate-common/server';\n\nimport type { CodeBlockPlugin } from '../shared/types';\n\nimport {\n  ELEMENT_CODE_BLOCK,\n  ELEMENT_CODE_LINE,\n  ELEMENT_CODE_SYNTAX,\n} from '../shared/constants';\nimport { deserializeHtmlCodeBlock } from '../shared/deserializeHtmlCodeBlockPre';\nimport { withCodeBlock } from '../shared/withCodeBlock';\nimport { decorateCodeLine } from './decorateCodeLine';\nimport { onKeyDownCodeBlock } from './onKeyDownCodeBlock';\n\n/** Enables support for pre-formatted code blocks. */\nexport const createCodeBlockPlugin = createPluginFactory<\n  CodeBlockPlugin,\n  Value,\n  PlateEditor\n>({\n  deserializeHtml: deserializeHtmlCodeBlock,\n  handlers: {\n    onKeyDown: onKeyDownCodeBlock,\n  },\n  isElement: true,\n  key: ELEMENT_CODE_BLOCK,\n  options: {\n    hotkey: ['mod+opt+8', 'mod+shift+8'],\n    syntax: true,\n    syntaxPopularFirst: false,\n  },\n  plugins: [\n    {\n      isElement: true,\n      key: ELEMENT_CODE_LINE,\n    },\n    {\n      decorate: decorateCodeLine,\n      isLeaf: true,\n      key: ELEMENT_CODE_SYNTAX,\n    },\n  ],\n  then: (editor) => ({\n    inject: {\n      pluginsByKey: {\n        [KEY_DESERIALIZE_HTML]: {\n          editor: {\n            insertData: {\n              query: () => {\n                const code_line = getPlugin(editor, ELEMENT_CODE_LINE);\n\n                return !someNode(editor, {\n                  match: { type: code_line.type },\n                });\n              },\n            },\n          },\n        },\n      },\n    },\n  }),\n  withOverrides: withCodeBlock,\n});\n","export const ELEMENT_CODE_BLOCK = 'code_block';\n\nexport const ELEMENT_CODE_LINE = 'code_line';\n\nexport const ELEMENT_CODE_SYNTAX = 'code_syntax';\n","import type { DeserializeHtml } from '@udecode/plate-common/server';\n\nimport { ELEMENT_CODE_BLOCK, ELEMENT_CODE_LINE } from './constants';\n\nexport const deserializeHtmlCodeBlock: DeserializeHtml = {\n  getNode: (el) => {\n    const languageSelectorText =\n      [...el.childNodes].find((node: ChildNode) => node.nodeName === 'SELECT')\n        ?.textContent || '';\n\n    const textContent = el.textContent?.replace(languageSelectorText, '') || '';\n\n    let lines = textContent.split('\\n');\n\n    if (!lines?.length) {\n      lines = [textContent];\n    }\n\n    const codeLines = lines.map((line) => ({\n      children: [{ text: line }],\n      type: ELEMENT_CODE_LINE,\n    }));\n\n    return {\n      children: codeLines,\n      type: ELEMENT_CODE_BLOCK,\n    };\n  },\n  rules: [\n    {\n      validNodeName: 'PRE',\n    },\n    {\n      validNodeName: 'P',\n      validStyle: {\n        fontFamily: 'Consolas',\n      },\n    },\n  ],\n};\n","import {\n  type EElement,\n  type PlateEditor,\n  type TDescendant,\n  type TElement,\n  type Value,\n  getBlockAbove,\n  getNodeString,\n  getPluginType,\n} from '@udecode/plate-common/server';\n\nimport { ELEMENT_CODE_BLOCK, ELEMENT_CODE_LINE } from './constants';\n\nfunction extractCodeLinesFromCodeBlock(node: TElement) {\n  return node.children as TElement[];\n}\n\nexport const insertFragmentCodeBlock = <V extends Value>(\n  editor: PlateEditor<V>\n) => {\n  const { insertFragment } = editor;\n  const codeBlockType = getPluginType(editor, ELEMENT_CODE_BLOCK);\n  const codeLineType = getPluginType(editor, ELEMENT_CODE_LINE);\n\n  function convertNodeToCodeLine(node: TElement): TElement {\n    return {\n      children: [{ text: getNodeString(node) }],\n      type: codeLineType,\n    };\n  }\n\n  return (fragment: TDescendant[]) => {\n    const [blockAbove] = getBlockAbove<TElement>(editor) ?? [];\n\n    if (\n      blockAbove &&\n      [codeBlockType, codeLineType].includes(blockAbove?.type)\n    ) {\n      return insertFragment(\n        fragment.flatMap((node) => {\n          const element = node as TElement;\n\n          return (\n            element.type === codeBlockType\n              ? extractCodeLinesFromCodeBlock(element)\n              : convertNodeToCodeLine(element)\n          ) as EElement<V>;\n        })\n      );\n    }\n\n    return insertFragment(fragment);\n  };\n};\n","import {\n  type PlateEditor,\n  type TElement,\n  type TNodeEntry,\n  type Value,\n  getChildren,\n  getPluginType,\n  isElement,\n  setNodes,\n} from '@udecode/plate-common/server';\n\nimport { ELEMENT_CODE_BLOCK } from '../constants';\nimport { getCodeLineType } from '../options';\n\n/** Normalize code block node to force the pre>code>div.codeline structure. */\nexport const normalizeCodeBlock = <V extends Value>(editor: PlateEditor<V>) => {\n  const codeBlockType = getPluginType(editor, ELEMENT_CODE_BLOCK);\n  const codeLineType = getCodeLineType(editor);\n\n  const { normalizeNode } = editor;\n\n  return ([node, path]: TNodeEntry) => {\n    normalizeNode([node, path]);\n\n    if (!isElement(node)) {\n      return;\n    }\n\n    const isCodeBlockRoot = node.type === codeBlockType;\n\n    if (isCodeBlockRoot) {\n      // Children should all be code lines\n      const nonCodeLine = getChildren([node, path]).find(\n        ([child]) => child.type !== codeLineType\n      );\n\n      if (nonCodeLine) {\n        setNodes<TElement>(\n          editor,\n          { type: codeLineType },\n          { at: nonCodeLine[1] }\n        );\n      }\n    }\n  };\n};\n","import {\n  type PlateEditor,\n  type Value,\n  getPluginType,\n} from '@udecode/plate-common/server';\n\nimport { ELEMENT_CODE_LINE } from '../constants';\n\nexport const getCodeLineType = <V extends Value>(\n  editor: PlateEditor<V>\n): string => getPluginType(editor, ELEMENT_CODE_LINE);\n","import type { Location } from 'slate';\n\nimport {\n  type EElement,\n  type PlateEditor,\n  type TElement,\n  type TNodeEntry,\n  type Value,\n  getAboveNode,\n  getParentNode,\n  isElement,\n  someNode,\n} from '@udecode/plate-common/server';\n\nimport { getCodeLineType } from '../options';\n\n/** If at (default = selection) is in ul>li>p, return li and ul node entries. */\nexport const getCodeLineEntry = <\n  N extends EElement<V>,\n  V extends Value = Value,\n>(\n  editor: PlateEditor<V>,\n  { at = editor.selection }: { at?: Location | null } = {}\n) => {\n  if (\n    at &&\n    someNode(editor, {\n      at,\n      match: { type: getCodeLineType(editor) },\n    })\n  ) {\n    const selectionParent = getParentNode(editor, at);\n\n    if (!selectionParent) return;\n\n    const [, parentPath] = selectionParent;\n\n    const codeLine =\n      getAboveNode<TElement>(editor, {\n        at,\n        match: { type: getCodeLineType(editor) },\n      }) || getParentNode<N>(editor, parentPath);\n\n    if (!codeLine) return;\n\n    const [codeLineNode, codeLinePath] = codeLine;\n\n    if (\n      isElement(codeLineNode) &&\n      codeLineNode.type !== getCodeLineType(editor)\n    )\n      return;\n\n    const codeBlock = getParentNode<N>(editor, codeLinePath);\n\n    if (!codeBlock) return;\n\n    return {\n      codeBlock,\n      codeLine: codeLine as TNodeEntry<N>,\n    };\n  }\n};\n","import {\n  type TEditor,\n  type Value,\n  getEditorString,\n} from '@udecode/plate-common/server';\n\nimport type { IndentCodeLineOptions } from '../transforms/indentCodeLine';\n\nexport const getIndentDepth = <V extends Value>(\n  editor: TEditor<V>,\n  { codeLine }: IndentCodeLineOptions\n) => {\n  const [, codeLinePath] = codeLine;\n  const text = getEditorString(editor, codeLinePath);\n\n  return text.search(/\\S|$/);\n};\n","import {\n  type PlateEditor,\n  type Value,\n  getChildren,\n  getNodeString,\n} from '@udecode/plate-common/server';\n\nimport { getCodeLineEntry } from './getCodeLineEntry';\n\n/** Is the selection inside an empty code block */\nexport const isCodeBlockEmpty = <V extends Value>(editor: PlateEditor<V>) => {\n  const { codeBlock } = getCodeLineEntry(editor) ?? {};\n\n  if (!codeBlock) return false;\n\n  const codeLines = Array.from(getChildren(codeBlock));\n\n  if (codeLines.length === 0) return true;\n  if (codeLines.length > 1) return false;\n\n  const firstCodeLineNode = codeLines[0][0];\n\n  return !getNodeString(firstCodeLineNode);\n};\n","import {\n  type PlateEditor,\n  type Value,\n  isExpanded,\n  isStartPoint,\n} from '@udecode/plate-common/server';\n\nimport { getCodeLineEntry } from './getCodeLineEntry';\n\n/** Is the selection at the start of the first code line in a code block */\nexport const isSelectionAtCodeBlockStart = <V extends Value>(\n  editor: PlateEditor<V>\n) => {\n  const { selection } = editor;\n\n  if (!selection || isExpanded(selection)) return false;\n\n  const { codeBlock } = getCodeLineEntry(editor) ?? {};\n\n  if (!codeBlock) return false;\n\n  return isStartPoint(editor, selection.anchor, codeBlock[1]);\n};\n","import {\n  type TEditor,\n  type Value,\n  deleteText,\n  getEditorString,\n  getPointAfter,\n  getRange,\n  getStartPoint,\n} from '@udecode/plate-common/server';\n\nimport type { OutdentCodeLineOptions } from './outdentCodeLine';\n\n/** If there is a whitespace character at the start of the code line, delete it. */\nexport const deleteStartSpace = <V extends Value>(\n  editor: TEditor<V>,\n  { codeLine }: OutdentCodeLineOptions\n) => {\n  const [, codeLinePath] = codeLine;\n  const codeLineStart = getStartPoint(editor, codeLinePath);\n  const codeLineEnd = codeLineStart && getPointAfter(editor, codeLineStart);\n  const spaceRange =\n    codeLineEnd && getRange(editor, codeLineStart, codeLineEnd);\n  const spaceText = getEditorString(editor, spaceRange);\n\n  if (/\\s/.test(spaceText)) {\n    deleteText(editor, { at: spaceRange });\n\n    return true;\n  }\n\n  return false;\n};\n","import {\n  type TEditor,\n  type TElementEntry,\n  type Value,\n  getEditorString,\n  getRange,\n  getStartPoint,\n  insertText,\n  isExpanded,\n} from '@udecode/plate-common/server';\n\nexport interface IndentCodeLineOptions {\n  codeBlock: TElementEntry;\n  codeLine: TElementEntry;\n  indentDepth?: number;\n}\n\n/**\n * Indent if:\n *\n * - The selection is expanded OR\n * - There are no non-whitespace characters left of the cursor Indentation = 2\n *   spaces.\n */\nexport const indentCodeLine = <V extends Value>(\n  editor: TEditor<V>,\n  { codeLine, indentDepth = 2 }: IndentCodeLineOptions\n) => {\n  const [, codeLinePath] = codeLine;\n  const codeLineStart = getStartPoint(editor, codeLinePath);\n  const indent = ' '.repeat(indentDepth);\n\n  if (!isExpanded(editor.selection)) {\n    const cursor = editor.selection?.anchor;\n    const range = getRange(editor, codeLineStart, cursor);\n    const text = getEditorString(editor, range);\n\n    if (/\\S/.test(text)) {\n      insertText(editor, indent, { at: editor.selection! });\n\n      return;\n    }\n  }\n\n  insertText(editor, indent, { at: codeLineStart });\n};\n","import {\n  type InsertNodesOptions,\n  type PlateEditor,\n  type TElement,\n  type Value,\n  getPluginType,\n  isExpanded,\n  isSelectionAtBlockStart,\n  setElements,\n  someNode,\n  wrapNodes,\n} from '@udecode/plate-common/server';\n\nimport { ELEMENT_CODE_BLOCK } from '../constants';\nimport { getCodeLineType } from '../options';\n\n/**\n * Insert a code block: set the node to code line and wrap it with a code block.\n * If the cursor is not at the block start, insert break before.\n */\nexport const insertCodeBlock = <V extends Value>(\n  editor: PlateEditor<V>,\n  insertNodesOptions: Omit<InsertNodesOptions<V>, 'match'> = {}\n) => {\n  if (!editor.selection || isExpanded(editor.selection)) return;\n\n  const matchCodeElements = (node: TElement) =>\n    node.type === getPluginType(editor, ELEMENT_CODE_BLOCK) ||\n    node.type === getCodeLineType(editor);\n\n  if (\n    someNode(editor, {\n      match: matchCodeElements,\n    })\n  ) {\n    return;\n  }\n  if (!isSelectionAtBlockStart(editor)) {\n    editor.insertBreak();\n  }\n\n  setElements(\n    editor,\n    {\n      children: [{ text: '' }],\n      type: getCodeLineType(editor),\n    },\n    insertNodesOptions\n  );\n\n  wrapNodes<TElement>(\n    editor,\n    {\n      children: [],\n      type: getPluginType(editor, ELEMENT_CODE_BLOCK),\n    },\n    insertNodesOptions\n  );\n};\n","import {\n  type PlateEditor,\n  type Value,\n  insertElements,\n} from '@udecode/plate-common/server';\n\nimport { getCodeLineType } from '../options';\n\n/** Insert a code line starting with indentation. */\nexport const insertCodeLine = <V extends Value>(\n  editor: PlateEditor<V>,\n  indentDepth = 0\n) => {\n  if (editor.selection) {\n    const indent = ' '.repeat(indentDepth);\n\n    insertElements(editor, {\n      children: [{ text: indent }],\n      type: getCodeLineType(editor),\n    });\n  }\n};\n","import {\n  ELEMENT_DEFAULT,\n  type PlateEditor,\n  type Value,\n  getPluginType,\n  insertElements,\n  isBlockAboveEmpty,\n  isExpanded,\n} from '@udecode/plate-common/server';\n\nimport type { CodeBlockInsertOptions } from '../types';\n\nimport { insertCodeBlock } from './insertCodeBlock';\n\n/**\n * Called by toolbars to make sure a code-block gets inserted below a paragraph\n * rather than awkwardly splitting the current selection.\n */\nexport const insertEmptyCodeBlock = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  {\n    defaultType = getPluginType(editor, ELEMENT_DEFAULT),\n    insertNodesOptions,\n  }: CodeBlockInsertOptions<V> = {}\n) => {\n  if (!editor.selection) return;\n  if (isExpanded(editor.selection) || !isBlockAboveEmpty(editor)) {\n    insertElements(\n      editor,\n      editor.blockFactory({ children: [{ text: '' }], type: defaultType }),\n      {\n        nextBlock: true,\n        select: true,\n        ...insertNodesOptions,\n      }\n    );\n  }\n\n  insertCodeBlock(editor, insertNodesOptions);\n};\n","import type {\n  TEditor,\n  TElementEntry,\n  Value,\n} from '@udecode/plate-common/server';\n\nimport { deleteStartSpace } from './deleteStartSpace';\n\nexport interface OutdentCodeLineOptions {\n  codeBlock: TElementEntry;\n  codeLine: TElementEntry;\n}\n\n/** Outdent the code line. Remove 2 whitespace characters if any. */\nexport const outdentCodeLine = <V extends Value>(\n  editor: TEditor<V>,\n  { codeBlock, codeLine }: OutdentCodeLineOptions\n) => {\n  const deleted = deleteStartSpace(editor, { codeBlock, codeLine });\n  deleted && deleteStartSpace(editor, { codeBlock, codeLine });\n};\n","import {\n  type PlateEditor,\n  type TElement,\n  type Value,\n  getPluginType,\n  setElements,\n  someNode,\n  withoutNormalizing,\n  wrapNodes,\n} from '@udecode/plate-common/server';\n\nimport { ELEMENT_CODE_BLOCK } from '../constants';\nimport { getCodeLineType } from '../options';\nimport { unwrapCodeBlock } from './unwrapCodeBlock';\n\nexport const toggleCodeBlock = <V extends Value>(editor: PlateEditor<V>) => {\n  if (!editor.selection) return;\n\n  const codeBlockType = getPluginType(editor, ELEMENT_CODE_BLOCK);\n  const codeLineType = getCodeLineType(editor);\n\n  const isActive = someNode(editor, {\n    match: { type: codeBlockType },\n  });\n\n  withoutNormalizing(editor, () => {\n    unwrapCodeBlock(editor);\n\n    if (!isActive) {\n      setElements(editor, {\n        type: codeLineType,\n      });\n\n      const codeBlock = {\n        children: [],\n        type: codeBlockType,\n      };\n\n      wrapNodes<TElement>(editor, codeBlock);\n    }\n  });\n};\n","import type { Location } from 'slate';\n\nimport {\n  ELEMENT_DEFAULT,\n  type PlateEditor,\n  type Value,\n  getChildren,\n  getNodeEntries,\n  getPluginType,\n  setElements,\n  unwrapNodes,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\n\nimport { ELEMENT_CODE_BLOCK } from '../constants';\n\nexport const unwrapCodeBlock = <V extends Value>(editor: PlateEditor<V>) => {\n  if (!editor.selection) return;\n\n  const codeBlockType = getPluginType(editor, ELEMENT_CODE_BLOCK);\n  const defaultType = getPluginType(editor, ELEMENT_DEFAULT);\n\n  withoutNormalizing(editor, () => {\n    const codeBlockEntries = getNodeEntries(editor, {\n      at: editor.selection as Location,\n      match: { type: codeBlockType },\n    });\n\n    const reversedCodeBlockEntries = Array.from(codeBlockEntries).reverse();\n\n    for (const codeBlockEntry of reversedCodeBlockEntries) {\n      const codeLineEntries = getChildren(codeBlockEntry);\n\n      for (const [, path] of codeLineEntries) {\n        setElements(editor, { type: defaultType }, { at: path });\n      }\n\n      unwrapNodes(editor, {\n        at: codeBlockEntry[1],\n        match: { type: codeBlockType },\n        split: true,\n      });\n    }\n  });\n};\n","import type { PlateEditor, Value } from '@udecode/plate-common/server';\n\nimport { insertFragmentCodeBlock } from './insertFragmentCodeBlock';\nimport { normalizeCodeBlock } from './normalizers/normalizeCodeBlock';\nimport { getCodeLineEntry, getIndentDepth } from './queries';\nimport { indentCodeLine } from './transforms';\n\nexport const withCodeBlock = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E\n) => {\n  const { insertBreak } = editor;\n\n  const insertBreakCodeBlock = () => {\n    if (!editor.selection) return;\n\n    const res = getCodeLineEntry(editor, {});\n\n    if (!res) return;\n\n    const { codeBlock, codeLine } = res;\n    const indentDepth = getIndentDepth(editor, {\n      codeBlock,\n      codeLine,\n    });\n\n    insertBreak();\n\n    indentCodeLine(editor, {\n      codeBlock,\n      codeLine,\n      indentDepth,\n    });\n\n    return true;\n  };\n\n  editor.insertBreak = () => {\n    if (insertBreakCodeBlock()) return;\n\n    insertBreak();\n  };\n\n  editor.insertFragment = insertFragmentCodeBlock(editor);\n\n  editor.normalizeNode = normalizeCodeBlock(editor);\n\n  return editor;\n};\n","import type { Range } from 'slate';\n\nimport {\n  type DecorateEntry,\n  type PlateEditor,\n  type Value,\n  getNodeString,\n  getParentNode,\n  getPlugin,\n} from '@udecode/plate-common/server';\n\nimport type { CodeBlockPlugin, TCodeBlockElement } from '../shared/types';\n\nimport {\n  ELEMENT_CODE_BLOCK,\n  ELEMENT_CODE_LINE,\n  ELEMENT_CODE_SYNTAX,\n} from '../shared/constants';\n\nexport interface CodeSyntaxRange extends Range {\n  [ELEMENT_CODE_SYNTAX]: true;\n  tokenType: string;\n}\n\nexport const decorateCodeLine = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E\n): DecorateEntry => {\n  const code_block = getPlugin<CodeBlockPlugin, V>(editor, ELEMENT_CODE_BLOCK);\n  const code_line = getPlugin<{}, V>(editor, ELEMENT_CODE_LINE);\n\n  const { prism: Prism } = code_block.options;\n\n  if (!Prism) return () => [];\n\n  const { Token, languages, tokenize } = Prism;\n\n  return ([node, path]): CodeSyntaxRange[] => {\n    const ranges: CodeSyntaxRange[] = [];\n\n    if (!code_block.options.syntax || node.type !== code_line.type) {\n      return ranges;\n    }\n\n    const codeBlock = getParentNode<TCodeBlockElement>(editor, path);\n\n    if (!codeBlock) {\n      return ranges;\n    }\n\n    let langName = codeBlock[0].lang ?? '';\n\n    if (langName === 'plain') {\n      langName = '';\n    }\n\n    const lang = languages[langName];\n\n    if (!lang) {\n      return ranges;\n    }\n\n    const text = getNodeString(node);\n    const tokens = tokenize(text, lang);\n    let offset = 0;\n\n    for (const element of tokens) {\n      if (element instanceof Token) {\n        ranges.push({\n          [ELEMENT_CODE_SYNTAX]: true,\n          anchor: { offset, path },\n          focus: { offset: offset + element.length, path },\n          tokenType: element.type,\n        });\n      }\n\n      offset += element.length;\n    }\n\n    return ranges;\n  };\n};\n","import { Hotkeys } from '@udecode/plate-common';\nimport {\n  type KeyboardHandlerReturnType,\n  type PlateEditor,\n  type TElement,\n  type Value,\n  getNodeEntries,\n  getParentNode,\n  isHotkey,\n  isSelectionAtBlockEnd,\n  isSelectionAtBlockStart,\n  select,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\n\nimport { getCodeLineType } from '../shared/options/getCodeLineType';\nimport { getCodeLineEntry } from '../shared/queries/getCodeLineEntry';\nimport { indentCodeLine } from '../shared/transforms/indentCodeLine';\nimport { outdentCodeLine } from '../shared/transforms/outdentCodeLine';\n\n/**\n * - Shift+Tab: outdent code line.\n * - Tab: indent code line.\n */\nexport const onKeyDownCodeBlock =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E\n  ): KeyboardHandlerReturnType =>\n  (e) => {\n    if (e.defaultPrevented) return;\n\n    const isTab = Hotkeys.isTab(editor, e);\n    const isUntab = Hotkeys.isUntab(editor, e);\n\n    if (isTab || isUntab) {\n      const _codeLines = getNodeEntries<TElement>(editor, {\n        match: { type: getCodeLineType(editor) },\n      });\n      const codeLines = Array.from(_codeLines);\n\n      if (codeLines.length > 0) {\n        e.preventDefault();\n        const [, firstLinePath] = codeLines[0];\n        const codeBlock = getParentNode<TElement>(editor, firstLinePath);\n\n        if (!codeBlock) return;\n\n        withoutNormalizing(editor, () => {\n          for (const codeLine of codeLines) {\n            if (isUntab) {\n              outdentCodeLine(editor, { codeBlock, codeLine });\n            }\n            // indent with tab\n            if (isTab) {\n              indentCodeLine(editor, { codeBlock, codeLine });\n            }\n          }\n        });\n      }\n    }\n    if (isHotkey('mod+a', e)) {\n      const res = getCodeLineEntry(editor, {});\n\n      if (!res) return;\n\n      const { codeBlock } = res;\n      const [, codeBlockPath] = codeBlock;\n\n      if (isSelectionAtBlockEnd(editor) && isSelectionAtBlockStart(editor))\n        return;\n\n      // select the whole code block\n      select(editor, codeBlockPath);\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    // Note: rather than handling mod+enter/mod+shift+enter here, we recommend\n    // using the exit-break plugin/ If not using exit-break, follow similar logic\n    // to exit-break to add behavior to exit the code-block\n  };\n","import React from 'react';\n\nimport { findNodePath, useEditorRef, useElement } from '@udecode/plate-common';\nimport { getPluginOptions, setNodes } from '@udecode/plate-common/server';\nimport { useReadOnly } from 'slate-react';\n\nimport {\n  type CodeBlockPlugin,\n  ELEMENT_CODE_BLOCK,\n  type TCodeBlockElement,\n} from '../../shared';\n\nexport const useCodeBlockComboboxState = () => {\n  const editor = useEditorRef();\n  const readOnly = useReadOnly();\n  const element = useElement<TCodeBlockElement>();\n  const [value, setValue] = React.useState(element.lang ?? 'text');\n\n  const { syntaxPopularFirst } = getPluginOptions<CodeBlockPlugin>(\n    editor,\n    ELEMENT_CODE_BLOCK\n  );\n\n  React.useEffect(() => {\n    setValue(element.lang ?? 'text');\n  }, [element.lang]);\n\n  return {\n    element,\n    readOnly,\n    setValue,\n    syntaxPopularFirst,\n    value,\n  };\n};\n\nexport const useCodeBlockCombobox = ({\n  element,\n  setValue,\n}: ReturnType<typeof useCodeBlockComboboxState>) => {\n  const editor = useEditorRef();\n\n  return {\n    commandItemProps: {\n      onSelect: (_value: string) => {\n        const path = findNodePath(editor, element);\n        path &&\n          setNodes<TCodeBlockElement>(editor, { lang: _value }, { at: path });\n        setValue(_value);\n      },\n    },\n  };\n};\n","import React from 'react';\n\nimport { useEditorRef } from '@udecode/plate-common';\nimport { getPluginOptions } from '@udecode/plate-common/server';\n\nimport {\n  type CodeBlockPlugin,\n  ELEMENT_CODE_BLOCK,\n  type TCodeBlockElement,\n} from '../../shared';\n\nexport const useCodeBlockElementState = ({\n  element,\n}: {\n  element: TCodeBlockElement;\n}) => {\n  const editor = useEditorRef();\n  const [domLoaded, setDomLoaded] = React.useState(false);\n  const { lang } = element;\n\n  const codeClassName = lang ? `${lang} language-${lang}` : '';\n\n  React.useEffect(() => {\n    setDomLoaded(true);\n  }, []);\n\n  const { syntax } = getPluginOptions<CodeBlockPlugin>(\n    editor,\n    ELEMENT_CODE_BLOCK\n  );\n\n  return {\n    className: domLoaded && codeClassName,\n    syntax,\n  };\n};\n","export const useCodeSyntaxLeaf = ({ leaf }: { leaf: any }) => {\n  return {\n    tokenProps: {\n      className: `prism-token token ${leaf.tokenType}`,\n    },\n  };\n};\n","import type React from 'react';\n\nimport { useEditorRef } from '@udecode/plate-common';\n\nimport { toggleCodeBlock } from '../../shared/transforms';\n\nexport const useToggleCodeBlockButton = () => {\n  const editor = useEditorRef();\n\n  return {\n    props: {\n      onClick: () => {\n        toggleCodeBlock(editor);\n      },\n      onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n      },\n    },\n  };\n};\n"],"mappings":"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","names":["import_server","import_server","import_server","import_server","import_server","import_server","import_server","import_server","import_server","import_server","import_server","import_server","import_server","import_server","import_server","import_server","import_plate_common","import_server","React","_a","import_react","import_plate_common","import_server","React","import_plate_common"]}