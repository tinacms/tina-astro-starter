import { TElement, PlateEditor, Value, WithPlatePlugin } from '@udecode/plate-common/server';
import { RefObject, HTMLAttributes } from 'react';

interface TriggerComboboxPlugin {
    createComboboxInput?: (trigger: string) => TElement;
    trigger?: RegExp | string | string[];
    triggerPreviousCharPattern?: RegExp;
    triggerQuery?: (editor: PlateEditor) => boolean;
}
type ComboboxInputCursorState = {
    atEnd: boolean;
    atStart: boolean;
};
type CancelComboboxInputCause = 'arrowLeft' | 'arrowRight' | 'backspace' | 'blur' | 'deselect' | 'escape' | 'manual';

declare const withTriggerCombobox: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, { options: { createComboboxInput, trigger, triggerPreviousCharPattern, triggerQuery, }, type, }: WithPlatePlugin<TriggerComboboxPlugin, V, E>) => E;

interface UseComboboxInputOptions {
    ref: RefObject<HTMLElement>;
    autoFocus?: boolean;
    cancelInputOnArrowLeftRight?: boolean;
    cancelInputOnBackspace?: boolean;
    cancelInputOnBlur?: boolean;
    cancelInputOnDeselect?: boolean;
    cancelInputOnEscape?: boolean;
    cursorState?: ComboboxInputCursorState;
    forwardUndoRedoToEditor?: boolean;
    onCancelInput?: (cause: CancelComboboxInputCause) => void;
}
interface UseComboboxInputResult {
    cancelInput: (cause?: CancelComboboxInputCause, focusEditor?: boolean) => void;
    props: Required<Pick<HTMLAttributes<HTMLElement>, 'onBlur' | 'onKeyDown'>>;
    removeInput: (focusEditor?: boolean) => void;
}
declare const useComboboxInput: ({ autoFocus, cancelInputOnArrowLeftRight, cancelInputOnBackspace, cancelInputOnBlur, cancelInputOnDeselect, cancelInputOnEscape, cursorState, forwardUndoRedoToEditor, onCancelInput, ref, }: UseComboboxInputOptions) => UseComboboxInputResult;

declare const useHTMLInputCursorState: (ref: RefObject<HTMLInputElement>) => ComboboxInputCursorState;

interface FilterWordsOptions {
    prefixMode?: 'all-words' | 'last-word' | 'none';
    wordBoundary?: RegExp;
    wordQuantifier?: 'match-all' | 'match-any';
}
declare const filterWords: (haystack: string, needle: string, { prefixMode, wordBoundary, wordQuantifier, }?: FilterWordsOptions) => boolean;

export { type CancelComboboxInputCause, type ComboboxInputCursorState, type FilterWordsOptions, type TriggerComboboxPlugin, type UseComboboxInputOptions, type UseComboboxInputResult, filterWords, useComboboxInput, useHTMLInputCursorState, withTriggerCombobox };
