import * as _udecode_plate_common_server from '@udecode/plate-common/server';
import { ErrorHandler, Value, PlateEditor, WithPlatePlugin } from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';
import { Path } from 'slate';

interface Rule {
    /** Path where the rule applies */
    path: Path;
    /** Force the type of the node at the given path */
    strictType?: string;
    /** Type of the inserted node at the given path if `strictType` is not provided */
    type?: string;
}
interface NormalizeTypesPlugin extends ErrorHandler {
    /**
     * Set of rules for the types. For each rule, provide a `path` and either
     * `strictType` or `type`. If there is no node existing at `path`: insert a
     * node with `strictType`. If there is a node existing at `path` but its type
     * is not `strictType` or `type`: set the node type to `strictType` or
     * `type`.
     */
    rules?: Rule[];
}
declare const KEY_NORMALIZE_TYPES = "normalizeTypes";
/** @see {@link withNormalizeTypes} */
declare const createNormalizeTypesPlugin: <OP = NormalizeTypesPlugin, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

interface RemoveEmptyNodesPlugin {
    types?: string | string[];
}
declare const KEY_REMOVE_EMPTY_NODES = "removeEmptyNodes";
/** @see {@link withRemoveEmptyNodes} */
declare const createRemoveEmptyNodesPlugin: <OP = RemoveEmptyNodesPlugin, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

declare const withNormalizeTypes: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, { options: { onError, rules } }: WithPlatePlugin<NormalizeTypesPlugin, V, E>) => E;

/** Remove nodes with empty text. */
declare const withRemoveEmptyNodes: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, { options: { types: _types } }: WithPlatePlugin<RemoveEmptyNodesPlugin, V, E>) => E;

export { KEY_NORMALIZE_TYPES, KEY_REMOVE_EMPTY_NODES, type NormalizeTypesPlugin, type RemoveEmptyNodesPlugin, createNormalizeTypesPlugin, createRemoveEmptyNodesPlugin, withNormalizeTypes, withRemoveEmptyNodes };
