{"version":3,"sources":["../src/index.ts","../src/createNormalizeTypesPlugin.ts","../src/withNormalizeTypes.ts","../src/createRemoveEmptyNodesPlugin.ts","../src/withRemoveEmptyNodes.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './createNormalizeTypesPlugin';\nexport * from './createRemoveEmptyNodesPlugin';\nexport * from './withNormalizeTypes';\nexport * from './withRemoveEmptyNodes';\n","import type { Path } from 'slate';\n\nimport {\n  type ErrorHandler,\n  createPluginFactory,\n} from '@udecode/plate-common/server';\n\nimport { withNormalizeTypes } from './withNormalizeTypes';\n\ninterface Rule {\n  /** Path where the rule applies */\n  path: Path;\n  /** Force the type of the node at the given path */\n  strictType?: string;\n  /** Type of the inserted node at the given path if `strictType` is not provided */\n  type?: string;\n}\n\nexport interface NormalizeTypesPlugin extends ErrorHandler {\n  /**\n   * Set of rules for the types. For each rule, provide a `path` and either\n   * `strictType` or `type`. If there is no node existing at `path`: insert a\n   * node with `strictType`. If there is a node existing at `path` but its type\n   * is not `strictType` or `type`: set the node type to `strictType` or\n   * `type`.\n   */\n  rules?: Rule[];\n}\n\nexport const KEY_NORMALIZE_TYPES = 'normalizeTypes';\n\n/** @see {@link withNormalizeTypes} */\nexport const createNormalizeTypesPlugin =\n  createPluginFactory<NormalizeTypesPlugin>({\n    key: KEY_NORMALIZE_TYPES,\n    options: {\n      rules: [],\n    },\n    withOverrides: withNormalizeTypes,\n  });\n","import {\n  type PlateEditor,\n  type TElement,\n  type Value,\n  type WithPlatePlugin,\n  getNode,\n  insertElements,\n  isElement,\n  setElements,\n} from '@udecode/plate-common/server';\n\nimport type { NormalizeTypesPlugin } from './createNormalizeTypesPlugin';\n\nexport const withNormalizeTypes = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  { options: { onError, rules } }: WithPlatePlugin<NormalizeTypesPlugin, V, E>\n) => {\n  const { normalizeNode } = editor;\n\n  editor.normalizeNode = ([currentNode, currentPath]) => {\n    if (currentPath.length === 0) {\n      const endCurrentNormalizationPass = rules!.some(\n        ({ path, strictType, type }) => {\n          const node = getNode<TElement>(editor, path);\n\n          if (node) {\n            if (strictType && isElement(node) && node.type !== strictType) {\n              const { children, ...props } = editor.blockFactory({\n                type: strictType,\n              });\n              setElements(editor, props, {\n                at: path,\n              });\n\n              return true;\n            }\n          } else {\n            try {\n              insertElements(\n                editor,\n                editor.blockFactory({ type: strictType ?? type! }),\n                { at: path }\n              );\n\n              return true;\n            } catch (error) {\n              onError?.(error);\n            }\n          }\n\n          return false;\n        }\n      );\n\n      if (endCurrentNormalizationPass) {\n        return;\n      }\n    }\n\n    return normalizeNode([currentNode, currentPath]);\n  };\n\n  return editor;\n};\n","import { createPluginFactory } from '@udecode/plate-common/server';\n\nimport { withRemoveEmptyNodes } from './withRemoveEmptyNodes';\n\nexport interface RemoveEmptyNodesPlugin {\n  types?: string | string[];\n}\n\nexport const KEY_REMOVE_EMPTY_NODES = 'removeEmptyNodes';\n\n/** @see {@link withRemoveEmptyNodes} */\nexport const createRemoveEmptyNodesPlugin =\n  createPluginFactory<RemoveEmptyNodesPlugin>({\n    key: KEY_REMOVE_EMPTY_NODES,\n    withOverrides: withRemoveEmptyNodes,\n  });\n","import {\n  type PlateEditor,\n  type Value,\n  type WithPlatePlugin,\n  getNodeString,\n  isElement,\n  removeNodes,\n} from '@udecode/plate-common/server';\nimport castArray from 'lodash/castArray.js';\n\nimport type { RemoveEmptyNodesPlugin } from './createRemoveEmptyNodesPlugin';\n\n/** Remove nodes with empty text. */\nexport const withRemoveEmptyNodes = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  { options: { types: _types } }: WithPlatePlugin<RemoveEmptyNodesPlugin, V, E>\n) => {\n  const types = castArray(_types);\n\n  const { normalizeNode } = editor;\n\n  editor.normalizeNode = ([node, path]) => {\n    if (\n      isElement(node) &&\n      node.type &&\n      types.includes(node.type) &&\n      getNodeString(node) === ''\n    ) {\n      removeNodes(editor, { at: path });\n\n      return;\n    }\n\n    normalizeNode([node, path]);\n  };\n\n  return editor;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEA,IAAAA,iBAGO;;;ACLP,oBASO;AAIA,IAAM,qBAAqB,CAIhC,QACA,EAAE,SAAS,EAAE,SAAS,MAAM,EAAE,MAC3B;AACH,QAAM,EAAE,cAAc,IAAI;AAE1B,SAAO,gBAAgB,CAAC,CAAC,aAAa,WAAW,MAAM;AACrD,QAAI,YAAY,WAAW,GAAG;AAC5B,YAAM,8BAA8B,MAAO;AAAA,QACzC,CAAC,EAAE,MAAM,YAAY,KAAK,MAAM;AAC9B,gBAAM,WAAO,uBAAkB,QAAQ,IAAI;AAE3C,cAAI,MAAM;AACR,gBAAI,kBAAc,yBAAU,IAAI,KAAK,KAAK,SAAS,YAAY;AAC7D,oBAA+B,YAAO,aAAa;AAAA,gBACjD,MAAM;AAAA,cACR,CAAC,GAFO,WA9BtB,IA8B6C,IAAV,kBAAU,IAAV,CAAb;AAGR,6CAAY,QAAQ,OAAO;AAAA,gBACzB,IAAI;AAAA,cACN,CAAC;AAED,qBAAO;AAAA,YACT;AAAA,UACF,OAAO;AACL,gBAAI;AACF;AAAA,gBACE;AAAA,gBACA,OAAO,aAAa,EAAE,MAAM,kCAAc,KAAM,CAAC;AAAA,gBACjD,EAAE,IAAI,KAAK;AAAA,cACb;AAEA,qBAAO;AAAA,YACT,SAAS,OAAO;AACd,iDAAU;AAAA,YACZ;AAAA,UACF;AAEA,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,UAAI,6BAA6B;AAC/B;AAAA,MACF;AAAA,IACF;AAEA,WAAO,cAAc,CAAC,aAAa,WAAW,CAAC;AAAA,EACjD;AAEA,SAAO;AACT;;;ADrCO,IAAM,sBAAsB;AAG5B,IAAM,iCACX,oCAA0C;AAAA,EACxC,KAAK;AAAA,EACL,SAAS;AAAA,IACP,OAAO,CAAC;AAAA,EACV;AAAA,EACA,eAAe;AACjB,CAAC;;;AEvCH,IAAAC,iBAAoC;;;ACApC,IAAAC,iBAOO;AACP,uBAAsB;AAKf,IAAM,uBAAuB,CAIlC,QACA,EAAE,SAAS,EAAE,OAAO,OAAO,EAAE,MAC1B;AACH,QAAM,YAAQ,iBAAAC,SAAU,MAAM;AAE9B,QAAM,EAAE,cAAc,IAAI;AAE1B,SAAO,gBAAgB,CAAC,CAAC,MAAM,IAAI,MAAM;AACvC,YACE,0BAAU,IAAI,KACd,KAAK,QACL,MAAM,SAAS,KAAK,IAAI,SACxB,8BAAc,IAAI,MAAM,IACxB;AACA,sCAAY,QAAQ,EAAE,IAAI,KAAK,CAAC;AAEhC;AAAA,IACF;AAEA,kBAAc,CAAC,MAAM,IAAI,CAAC;AAAA,EAC5B;AAEA,SAAO;AACT;;;ADhCO,IAAM,yBAAyB;AAG/B,IAAM,mCACX,oCAA4C;AAAA,EAC1C,KAAK;AAAA,EACL,eAAe;AACjB,CAAC;","names":["import_server","import_server","import_server","castArray"]}