"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  KEY_NORMALIZE_TYPES: () => KEY_NORMALIZE_TYPES,
  KEY_REMOVE_EMPTY_NODES: () => KEY_REMOVE_EMPTY_NODES,
  createNormalizeTypesPlugin: () => createNormalizeTypesPlugin,
  createRemoveEmptyNodesPlugin: () => createRemoveEmptyNodesPlugin,
  withNormalizeTypes: () => withNormalizeTypes,
  withRemoveEmptyNodes: () => withRemoveEmptyNodes
});
module.exports = __toCommonJS(src_exports);

// src/createNormalizeTypesPlugin.ts
var import_server2 = require("@udecode/plate-common/server");

// src/withNormalizeTypes.ts
var import_server = require("@udecode/plate-common/server");
var withNormalizeTypes = (editor, { options: { onError, rules } }) => {
  const { normalizeNode } = editor;
  editor.normalizeNode = ([currentNode, currentPath]) => {
    if (currentPath.length === 0) {
      const endCurrentNormalizationPass = rules.some(
        ({ path, strictType, type }) => {
          const node = (0, import_server.getNode)(editor, path);
          if (node) {
            if (strictType && (0, import_server.isElement)(node) && node.type !== strictType) {
              const _a = editor.blockFactory({
                type: strictType
              }), { children } = _a, props = __objRest(_a, ["children"]);
              (0, import_server.setElements)(editor, props, {
                at: path
              });
              return true;
            }
          } else {
            try {
              (0, import_server.insertElements)(
                editor,
                editor.blockFactory({ type: strictType != null ? strictType : type }),
                { at: path }
              );
              return true;
            } catch (error) {
              onError == null ? void 0 : onError(error);
            }
          }
          return false;
        }
      );
      if (endCurrentNormalizationPass) {
        return;
      }
    }
    return normalizeNode([currentNode, currentPath]);
  };
  return editor;
};

// src/createNormalizeTypesPlugin.ts
var KEY_NORMALIZE_TYPES = "normalizeTypes";
var createNormalizeTypesPlugin = (0, import_server2.createPluginFactory)({
  key: KEY_NORMALIZE_TYPES,
  options: {
    rules: []
  },
  withOverrides: withNormalizeTypes
});

// src/createRemoveEmptyNodesPlugin.ts
var import_server4 = require("@udecode/plate-common/server");

// src/withRemoveEmptyNodes.ts
var import_server3 = require("@udecode/plate-common/server");
var import_castArray = __toESM(require("lodash/castArray.js"));
var withRemoveEmptyNodes = (editor, { options: { types: _types } }) => {
  const types = (0, import_castArray.default)(_types);
  const { normalizeNode } = editor;
  editor.normalizeNode = ([node, path]) => {
    if ((0, import_server3.isElement)(node) && node.type && types.includes(node.type) && (0, import_server3.getNodeString)(node) === "") {
      (0, import_server3.removeNodes)(editor, { at: path });
      return;
    }
    normalizeNode([node, path]);
  };
  return editor;
};

// src/createRemoveEmptyNodesPlugin.ts
var KEY_REMOVE_EMPTY_NODES = "removeEmptyNodes";
var createRemoveEmptyNodesPlugin = (0, import_server4.createPluginFactory)({
  key: KEY_REMOVE_EMPTY_NODES,
  withOverrides: withRemoveEmptyNodes
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  KEY_NORMALIZE_TYPES,
  KEY_REMOVE_EMPTY_NODES,
  createNormalizeTypesPlugin,
  createRemoveEmptyNodesPlugin,
  withNormalizeTypes,
  withRemoveEmptyNodes
});
//# sourceMappingURL=index.js.map