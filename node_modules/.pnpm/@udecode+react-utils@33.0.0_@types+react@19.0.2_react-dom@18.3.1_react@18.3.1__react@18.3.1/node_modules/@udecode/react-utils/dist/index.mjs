var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/createSlotComponent.tsx
import React from "react";
import { Slot } from "@radix-ui/react-slot";
var createSlotComponent = (element) => (
  // eslint-disable-next-line react/display-name
  React.forwardRef((_a2, ref) => {
    var _b = _a2, { as, asChild = false } = _b, props = __objRest(_b, ["as", "asChild"]);
    const Comp = asChild ? Slot : as || element;
    return /* @__PURE__ */ React.createElement(Comp, __spreadValues({ ref }, props));
  })
);

// src/Box.tsx
var Box = createSlotComponent("div");

// src/PortalBody.tsx
import React2 from "react";
import ReactDOM from "react-dom";
var PortalBody = ({
  children,
  element
}) => {
  const container = element || typeof window !== "undefined" ? document.body : void 0;
  if (!container)
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, children);
  return ReactDOM.createPortal(children, element || document.body);
};

// src/Text.tsx
var Text = createSlotComponent("span");

// src/composeEventHandlers.ts
var composeEventHandlers = (originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) => (event) => {
  originalEventHandler == null ? void 0 : originalEventHandler(event);
  if (checkForDefaultPrevented === false || !event.defaultPrevented) {
    return ourEventHandler == null ? void 0 : ourEventHandler(event);
  }
};

// src/createPrimitiveComponent.tsx
import React4 from "react";
import { isDefined } from "@udecode/utils";
import { clsx } from "clsx";

// src/useComposedRef.ts
import React3 from "react";
var setRef = (ref, value) => {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref !== null && ref !== void 0) {
    ref.current = value;
  }
};
var composeRefs = (...refs) => (node) => refs.forEach((ref) => setRef(ref, node));
var useComposedRef = (...refs) => {
  return React3.useCallback(composeRefs(...refs), refs);
};

// src/createPrimitiveComponent.tsx
var createPrimitiveComponent = (element) => {
  const Comp = createSlotComponent(element);
  return ({
    propsHook,
    stateHook
  } = {}) => {
    return React4.forwardRef(
      (_a2, ref) => {
        var _b = _a2, {
          asChild,
          className: classNameProp,
          getClassName,
          options,
          state: stateProp
        } = _b, props = __objRest(_b, [
          "asChild",
          "className",
          "getClassName",
          "options",
          "state"
        ]);
        var _a3, _b2;
        const state = isDefined(stateProp) ? stateProp : stateHook ? stateHook(options) : void 0;
        const {
          hidden,
          props: hookProps,
          ref: hookRef
        } = propsHook ? propsHook(state) : { hidden: false, props: {}, ref: null };
        const _ref = useComposedRef(ref, hookRef);
        const className = isDefined(hookProps == null ? void 0 : hookProps.className) || isDefined(classNameProp) ? clsx(hookProps == null ? void 0 : hookProps.className, classNameProp) : void 0;
        const style = (hookProps == null ? void 0 : hookProps.style) || props.style ? __spreadValues(__spreadValues({}, hookProps == null ? void 0 : hookProps.style), props.style) : void 0;
        if (!asChild && hidden)
          return null;
        return /* @__PURE__ */ React4.createElement(
          Comp,
          __spreadValues(__spreadValues(__spreadProps(__spreadValues({
            asChild,
            ref: _ref
          }, hookProps), {
            className,
            style
          }), props), (_b2 = (_a3 = props.setProps) == null ? void 0 : _a3.call(props, hookProps != null ? hookProps : {})) != null ? _b2 : {})
        );
      }
    );
  };
};

// src/createPrimitiveElement.tsx
import React5 from "react";
function createPrimitiveElement(tag) {
  return React5.forwardRef(
    function CreateComponent(props, ref) {
      return React5.createElement(tag, __spreadProps(__spreadValues({}, props), { ref }));
    }
  );
}

// src/useIsomorphicLayoutEffect.ts
import React6 from "react";
var _a;
var CAN_USE_DOM = typeof window !== "undefined" && ((_a = window.document) == null ? void 0 : _a.createElement) !== void 0;
var useIsomorphicLayoutEffect = CAN_USE_DOM ? React6.useLayoutEffect : React6.useEffect;

// src/useOnClickOutside.ts
import React7 from "react";
var canUsePassiveEvents = () => {
  if (typeof window === "undefined" || typeof window.addEventListener !== "function")
    return false;
  let passive = false;
  const options = Object.defineProperty({}, "passive", {
    // eslint-disable-next-line getter-return
    get() {
      passive = true;
    }
  });
  const noop = () => null;
  window.addEventListener("test", noop, options);
  window.removeEventListener("test", noop, options);
  return passive;
};
var DEFAULT_IGNORE_CLASS = "ignore-onclickoutside";
var checkClass = (el, cl) => {
  var _a2;
  return (_a2 = el.classList) == null ? void 0 : _a2.contains(cl);
};
var hasIgnoreClass = (e, ignoreClass) => {
  let el = e.target || e;
  while (el) {
    if (Array.isArray(ignoreClass)) {
      if (ignoreClass.some((c) => checkClass(el, c)))
        return true;
    } else if (checkClass(el, ignoreClass)) {
      return true;
    }
    el = el.parentElement;
  }
  return false;
};
var clickedOnScrollbar = (e) => document.documentElement.clientWidth <= e.clientX || document.documentElement.clientHeight <= e.clientY;
var getEventOptions = (type) => type.includes("touch") && canUsePassiveEvents() ? { passive: true } : false;
var useOnClickOutside = (callback, {
  detectIFrame = true,
  disabled,
  eventTypes = ["mousedown", "touchstart"],
  excludeScrollbar,
  ignoreClass = DEFAULT_IGNORE_CLASS,
  refs: refsOpt
} = {}) => {
  const [refsState, setRefsState] = React7.useState([]);
  const callbackRef = React7.useRef(callback);
  callbackRef.current = callback;
  const ref = React7.useCallback(
    (el) => setRefsState((prevState) => [...prevState, { current: el }]),
    []
  );
  React7.useEffect(
    () => {
      if (!(refsOpt == null ? void 0 : refsOpt.length) && refsState.length === 0)
        return;
      const getEls = () => {
        const els = [];
        (refsOpt || refsState).forEach(
          ({ current }) => current && els.push(current)
        );
        return els;
      };
      const handler = (e) => {
        if (!hasIgnoreClass(e, ignoreClass) && !(excludeScrollbar && clickedOnScrollbar(e)) && getEls().every((el) => !el.contains(e.target)))
          callbackRef.current(e);
      };
      const blurHandler = (e) => (
        // On firefox the iframe becomes document.activeElement in the next event loop
        setTimeout(() => {
          const { activeElement } = document;
          if ((activeElement == null ? void 0 : activeElement.tagName) === "IFRAME" && !hasIgnoreClass(activeElement, ignoreClass) && !getEls().includes(activeElement))
            callbackRef.current(e);
        }, 0)
      );
      const removeEventListener = () => {
        eventTypes.forEach(
          (type) => document.removeEventListener(
            type,
            handler,
            getEventOptions(type)
          )
        );
        if (detectIFrame)
          window.removeEventListener("blur", blurHandler);
      };
      if (disabled) {
        removeEventListener();
        return;
      }
      eventTypes.forEach(
        (type) => document.addEventListener(type, handler, getEventOptions(type))
      );
      if (detectIFrame)
        window.addEventListener("blur", blurHandler);
      return () => removeEventListener();
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      refsState,
      ignoreClass,
      excludeScrollbar,
      disabled,
      detectIFrame,
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(eventTypes)
    ]
  );
  return ref;
};

// src/useStableMemo.ts
import React8 from "react";
var useStableMemo = (producer, deps) => {
  const [value, setValue] = React8.useState(producer);
  React8.useLayoutEffect(() => {
    setValue(producer);
  }, deps);
  return value;
};

// src/withProviders.tsx
import React9 from "react";
var withProviders = (...providers) => (WrappedComponent) => (props) => providers.reduceRight(
  (acc, prov) => {
    let Provider = prov;
    if (Array.isArray(prov)) {
      [Provider] = prov;
      return /* @__PURE__ */ React9.createElement(Provider, __spreadValues({}, prov[1]), acc);
    }
    return /* @__PURE__ */ React9.createElement(Provider, null, acc);
  },
  /* @__PURE__ */ React9.createElement(WrappedComponent, __spreadValues({}, props))
);

// src/withRef.tsx
import React10 from "react";
function withRef(renderFunction) {
  return React10.forwardRef(renderFunction);
}
export {
  Box,
  CAN_USE_DOM,
  DEFAULT_IGNORE_CLASS,
  PortalBody,
  Text,
  composeEventHandlers,
  composeRefs,
  createPrimitiveComponent,
  createPrimitiveElement,
  createSlotComponent,
  useComposedRef,
  useIsomorphicLayoutEffect,
  useOnClickOutside,
  useStableMemo,
  withProviders,
  withRef
};
//# sourceMappingURL=index.mjs.map