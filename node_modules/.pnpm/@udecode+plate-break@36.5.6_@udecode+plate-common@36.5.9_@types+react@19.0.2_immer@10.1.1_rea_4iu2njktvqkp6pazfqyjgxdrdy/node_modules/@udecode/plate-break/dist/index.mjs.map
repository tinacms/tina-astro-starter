{"version":3,"sources":["../src/exit-break/createExitBreakPlugin.ts","../src/exit-break/onKeyDownExitBreak.ts","../src/exit-break/transforms/exitBreak.ts","../src/exit-break/queries/exitBreakAtEdges.ts","../src/single-line/createSingleLinePlugin.ts","../src/single-line/onKeyDownSingleLine.ts","../src/single-line/withSingleLine.ts","../src/soft-break/createSoftBreakPlugin.ts","../src/soft-break/onKeyDownSoftBreak.ts"],"sourcesContent":["import { createPluginFactory } from '@udecode/plate-common/server';\n\nimport type { ExitBreakPlugin } from './types';\n\nimport { onKeyDownExitBreak } from './onKeyDownExitBreak';\n\nexport const KEY_EXIT_BREAK = 'exitBreak';\n\n/**\n * Insert soft break following configurable rules. Each rule specifies a hotkey\n * and query options.\n */\nexport const createExitBreakPlugin = createPluginFactory<ExitBreakPlugin>({\n  handlers: {\n    onKeyDown: onKeyDownExitBreak,\n  },\n  key: KEY_EXIT_BREAK,\n  options: {\n    rules: [\n      { hotkey: 'mod+enter' },\n      { before: true, hotkey: 'mod+shift+enter' },\n    ],\n  },\n});\n","import {\n  type KeyboardHandlerReturnType,\n  type PlateEditor,\n  type Value,\n  type WithPlatePlugin,\n  getBlockAbove,\n  isHotkey,\n  queryNode,\n} from '@udecode/plate-common/server';\n\nimport type { ExitBreakPlugin } from './types';\n\nimport { exitBreak } from './transforms/exitBreak';\n\nexport const onKeyDownExitBreak =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E,\n    { options: { rules = [] } }: WithPlatePlugin<ExitBreakPlugin, V, E>\n  ): KeyboardHandlerReturnType =>\n  (event) => {\n    if (event.defaultPrevented) return;\n\n    const entry = getBlockAbove(editor);\n\n    if (!entry) return;\n\n    rules.forEach(({ hotkey, ...rule }) => {\n      if (\n        isHotkey(hotkey, event as any) &&\n        queryNode(entry, rule.query) &&\n        exitBreak(editor as any, rule)\n      ) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    });\n  };\n","import {\n  ELEMENT_DEFAULT,\n  type PlateEditor,\n  type Value,\n  getPath,\n  getPluginType,\n  insertElements,\n} from '@udecode/plate-common/server';\nimport { Path } from 'slate';\n\nimport type { ExitBreakRule } from '../types';\n\nimport { exitBreakAtEdges } from '../queries/exitBreakAtEdges';\n\nexport const exitBreak = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  {\n    before,\n    defaultType = getPluginType(editor, ELEMENT_DEFAULT),\n    level = 0,\n    query = {},\n    relative = false,\n  }: Omit<ExitBreakRule, 'hotkey'>\n) => {\n  if (!editor.selection) return;\n\n  const { isEdge, isStart, queryEdge } = exitBreakAtEdges(editor, query);\n\n  if (isStart) before = true;\n  if (queryEdge && !isEdge) return;\n\n  const selectionPath = getPath(editor, editor.selection);\n\n  const slicedPath = relative\n    ? selectionPath.slice(0, -level)\n    : selectionPath.slice(0, level + 1);\n\n  const insertPath = before ? slicedPath : Path.next(slicedPath);\n\n  insertElements(\n    editor,\n    editor.blockFactory({ children: [{ text: '' }], type: defaultType }),\n    {\n      at: insertPath,\n      select: !isStart,\n    }\n  );\n\n  return true;\n};\n","import {\n  type TEditor,\n  type Value,\n  isExpanded,\n  isSelectionAtBlockEnd,\n  isSelectionAtBlockStart,\n} from '@udecode/plate-common/server';\n\n/**\n * Check if the selection is at the edge of its parent block. If it is and if\n * the selection is expanded, delete its content.\n */\nexport const exitBreakAtEdges = <V extends Value>(\n  editor: TEditor<V>,\n  {\n    end,\n    start,\n  }: {\n    end?: boolean;\n    start?: boolean;\n  }\n) => {\n  let queryEdge = false;\n  let isEdge = false;\n  let isStart = false;\n\n  if (start || end) {\n    queryEdge = true;\n\n    if (start && isSelectionAtBlockStart(editor)) {\n      isEdge = true;\n      isStart = true;\n    }\n    if (end && isSelectionAtBlockEnd(editor)) {\n      isEdge = true;\n    }\n    if (isEdge && isExpanded(editor.selection)) {\n      editor.deleteFragment();\n    }\n  }\n\n  return {\n    isEdge,\n    isStart,\n    queryEdge,\n  };\n};\n","import { createPluginFactory } from '@udecode/plate-common/server';\n\nimport { onKeyDownSingleLine } from './onKeyDownSingleLine';\nimport { withSingleLine } from './withSingleLine';\n\nexport const KEY_SINGLE_LINE = 'singleLine';\n\n/** Forces editor to only have one line. */\nexport const createSingleLinePlugin = createPluginFactory({\n  handlers: {\n    onKeyDown: onKeyDownSingleLine,\n  },\n  key: KEY_SINGLE_LINE,\n  withOverrides: withSingleLine,\n});\n","import {\n  Hotkeys,\n  type KeyboardHandlerReturnType,\n} from '@udecode/plate-common/server';\n\nexport const onKeyDownSingleLine = (): KeyboardHandlerReturnType => (event) => {\n  if (event.defaultPrevented) return;\n  if (Hotkeys.isSplitBlock(event)) {\n    event.preventDefault();\n  }\n};\n","import {\n  type PlateEditor,\n  type Value,\n  removeNodes,\n} from '@udecode/plate-common/server';\n\nexport const withSingleLine = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E\n) => {\n  const { normalizeNode } = editor;\n\n  editor.insertBreak = () => null;\n\n  editor.normalizeNode = (entry) => {\n    if (entry[1].length === 0 && editor.children.length > 1) {\n      removeNodes(editor, {\n        at: [],\n        match: (node, path) => path.length === 1 && path[0] > 0,\n        mode: 'highest',\n      });\n\n      return;\n    }\n\n    normalizeNode(entry);\n  };\n\n  return editor;\n};\n","import { createPluginFactory } from '@udecode/plate-common/server';\n\nimport type { SoftBreakPlugin } from './types';\n\nimport { onKeyDownSoftBreak } from './onKeyDownSoftBreak';\n\nexport const KEY_SOFT_BREAK = 'softBreak';\n\n/**\n * Insert soft break following configurable rules. Each rule specifies a hotkey\n * and query options.\n */\nexport const createSoftBreakPlugin = createPluginFactory<SoftBreakPlugin>({\n  handlers: {\n    onKeyDown: onKeyDownSoftBreak,\n  },\n  key: KEY_SOFT_BREAK,\n  options: {\n    rules: [{ hotkey: 'shift+enter' }],\n  },\n});\n","import {\n  type KeyboardHandlerReturnType,\n  type PlateEditor,\n  type Value,\n  type WithPlatePlugin,\n  getBlockAbove,\n  isHotkey,\n  queryNode,\n} from '@udecode/plate-common/server';\n\nimport type { SoftBreakPlugin } from './types';\n\nexport const onKeyDownSoftBreak =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E,\n    { options: { rules = [] } }: WithPlatePlugin<SoftBreakPlugin, V, E>\n  ): KeyboardHandlerReturnType =>\n  (event) => {\n    if (event.defaultPrevented) return;\n\n    const entry = getBlockAbove(editor);\n\n    if (!entry) return;\n\n    rules.forEach(({ hotkey, query }) => {\n      if (isHotkey(hotkey, event as any) && queryNode(entry, query)) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        editor.insertText('\\n');\n      }\n    });\n  };\n"],"mappings":"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","names":["createPluginFactory","createPluginFactory","createPluginFactory","getBlockAbove","isHotkey","queryNode","createPluginFactory"]}