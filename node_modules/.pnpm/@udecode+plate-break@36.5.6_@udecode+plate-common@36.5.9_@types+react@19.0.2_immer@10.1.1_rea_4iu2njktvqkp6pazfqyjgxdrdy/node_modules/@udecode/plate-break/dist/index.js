"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  KEY_EXIT_BREAK: () => KEY_EXIT_BREAK,
  KEY_SINGLE_LINE: () => KEY_SINGLE_LINE,
  KEY_SOFT_BREAK: () => KEY_SOFT_BREAK,
  createExitBreakPlugin: () => createExitBreakPlugin,
  createSingleLinePlugin: () => createSingleLinePlugin,
  createSoftBreakPlugin: () => createSoftBreakPlugin,
  exitBreak: () => exitBreak,
  exitBreakAtEdges: () => exitBreakAtEdges,
  onKeyDownExitBreak: () => onKeyDownExitBreak,
  onKeyDownSingleLine: () => onKeyDownSingleLine,
  onKeyDownSoftBreak: () => onKeyDownSoftBreak,
  withSingleLine: () => withSingleLine
});
module.exports = __toCommonJS(src_exports);

// src/exit-break/createExitBreakPlugin.ts
var import_server4 = require("@udecode/plate-common/server");

// src/exit-break/onKeyDownExitBreak.ts
var import_server3 = require("@udecode/plate-common/server");

// src/exit-break/transforms/exitBreak.ts
var import_server2 = require("@udecode/plate-common/server");
var import_slate = require("slate");

// src/exit-break/queries/exitBreakAtEdges.ts
var import_server = require("@udecode/plate-common/server");
var exitBreakAtEdges = (editor, {
  end,
  start
}) => {
  let queryEdge = false;
  let isEdge = false;
  let isStart = false;
  if (start || end) {
    queryEdge = true;
    if (start && (0, import_server.isSelectionAtBlockStart)(editor)) {
      isEdge = true;
      isStart = true;
    }
    if (end && (0, import_server.isSelectionAtBlockEnd)(editor)) {
      isEdge = true;
    }
    if (isEdge && (0, import_server.isExpanded)(editor.selection)) {
      editor.deleteFragment();
    }
  }
  return {
    isEdge,
    isStart,
    queryEdge
  };
};

// src/exit-break/transforms/exitBreak.ts
var exitBreak = (editor, {
  before,
  defaultType = (0, import_server2.getPluginType)(editor, import_server2.ELEMENT_DEFAULT),
  level = 0,
  query = {},
  relative = false
}) => {
  if (!editor.selection)
    return;
  const { isEdge, isStart, queryEdge } = exitBreakAtEdges(editor, query);
  if (isStart)
    before = true;
  if (queryEdge && !isEdge)
    return;
  const selectionPath = (0, import_server2.getPath)(editor, editor.selection);
  const slicedPath = relative ? selectionPath.slice(0, -level) : selectionPath.slice(0, level + 1);
  const insertPath = before ? slicedPath : import_slate.Path.next(slicedPath);
  (0, import_server2.insertElements)(
    editor,
    editor.blockFactory({ children: [{ text: "" }], type: defaultType }),
    {
      at: insertPath,
      select: !isStart
    }
  );
  return true;
};

// src/exit-break/onKeyDownExitBreak.ts
var onKeyDownExitBreak = (editor, { options: { rules = [] } }) => (event) => {
  if (event.defaultPrevented)
    return;
  const entry = (0, import_server3.getBlockAbove)(editor);
  if (!entry)
    return;
  rules.forEach((_a) => {
    var _b = _a, { hotkey } = _b, rule = __objRest(_b, ["hotkey"]);
    if ((0, import_server3.isHotkey)(hotkey, event) && (0, import_server3.queryNode)(entry, rule.query) && exitBreak(editor, rule)) {
      event.preventDefault();
      event.stopPropagation();
    }
  });
};

// src/exit-break/createExitBreakPlugin.ts
var KEY_EXIT_BREAK = "exitBreak";
var createExitBreakPlugin = (0, import_server4.createPluginFactory)({
  handlers: {
    onKeyDown: onKeyDownExitBreak
  },
  key: KEY_EXIT_BREAK,
  options: {
    rules: [
      { hotkey: "mod+enter" },
      { before: true, hotkey: "mod+shift+enter" }
    ]
  }
});

// src/single-line/createSingleLinePlugin.ts
var import_server7 = require("@udecode/plate-common/server");

// src/single-line/onKeyDownSingleLine.ts
var import_server5 = require("@udecode/plate-common/server");
var onKeyDownSingleLine = () => (event) => {
  if (event.defaultPrevented)
    return;
  if (import_server5.Hotkeys.isSplitBlock(event)) {
    event.preventDefault();
  }
};

// src/single-line/withSingleLine.ts
var import_server6 = require("@udecode/plate-common/server");
var withSingleLine = (editor) => {
  const { normalizeNode } = editor;
  editor.insertBreak = () => null;
  editor.normalizeNode = (entry) => {
    if (entry[1].length === 0 && editor.children.length > 1) {
      (0, import_server6.removeNodes)(editor, {
        at: [],
        match: (node, path) => path.length === 1 && path[0] > 0,
        mode: "highest"
      });
      return;
    }
    normalizeNode(entry);
  };
  return editor;
};

// src/single-line/createSingleLinePlugin.ts
var KEY_SINGLE_LINE = "singleLine";
var createSingleLinePlugin = (0, import_server7.createPluginFactory)({
  handlers: {
    onKeyDown: onKeyDownSingleLine
  },
  key: KEY_SINGLE_LINE,
  withOverrides: withSingleLine
});

// src/soft-break/createSoftBreakPlugin.ts
var import_server9 = require("@udecode/plate-common/server");

// src/soft-break/onKeyDownSoftBreak.ts
var import_server8 = require("@udecode/plate-common/server");
var onKeyDownSoftBreak = (editor, { options: { rules = [] } }) => (event) => {
  if (event.defaultPrevented)
    return;
  const entry = (0, import_server8.getBlockAbove)(editor);
  if (!entry)
    return;
  rules.forEach(({ hotkey, query }) => {
    if ((0, import_server8.isHotkey)(hotkey, event) && (0, import_server8.queryNode)(entry, query)) {
      event.preventDefault();
      event.stopPropagation();
      editor.insertText("\n");
    }
  });
};

// src/soft-break/createSoftBreakPlugin.ts
var KEY_SOFT_BREAK = "softBreak";
var createSoftBreakPlugin = (0, import_server9.createPluginFactory)({
  handlers: {
    onKeyDown: onKeyDownSoftBreak
  },
  key: KEY_SOFT_BREAK,
  options: {
    rules: [{ hotkey: "shift+enter" }]
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  KEY_EXIT_BREAK,
  KEY_SINGLE_LINE,
  KEY_SOFT_BREAK,
  createExitBreakPlugin,
  createSingleLinePlugin,
  createSoftBreakPlugin,
  exitBreak,
  exitBreakAtEdges,
  onKeyDownExitBreak,
  onKeyDownSingleLine,
  onKeyDownSoftBreak,
  withSingleLine
});
//# sourceMappingURL=index.js.map