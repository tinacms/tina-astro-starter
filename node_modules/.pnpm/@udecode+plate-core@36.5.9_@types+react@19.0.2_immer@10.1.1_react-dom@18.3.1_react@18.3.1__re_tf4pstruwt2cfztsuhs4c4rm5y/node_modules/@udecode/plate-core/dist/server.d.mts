import { Value, TEditor } from '@udecode/slate';
import { C as CreatePlateEditorOptions, b as PlateEditor, d as PlatePlugin, bl as NoInfer, be as OverrideByKey, c as PlateProps, g as WithPlateOptions } from './createPlateEditor-DJdXykNd.mjs';
export { bS as ApplyDeepToNodesOptions, Z as BLUR_EDITOR_EVENT, a6 as CARRIAGE_RETURN, b9 as CollapseWhiteSpaceState, br as DOMHandler, bq as DOMHandlerReturnType, bs as DOMHandlers, bn as DOM_HANDLERS, bu as Decorate, bt as DecorateEntry, D as DefaultLeaf, bv as DeserializeHtml, ae as DeserializeHtmlChildren, af as DeserializeHtmlNodeReturnType, E as ELEMENT_DEFAULT, bk as EXPOSED_STORE_KEYS, a0 as EventEditorState, Y as FOCUS_EDITOR_EVENT, co as GetInjectPropsOptions, cp as GetInjectPropsReturnType, bo as HandlerReturnType, bw as HotkeyPlugin, ct as Hotkeys, bz as InjectComponent, bx as InjectComponentProps, by as InjectComponentReturnType, bB as InjectProps, bX as InjectedPlugin, K as KEY_DESERIALIZE_AST, ac as KEY_DESERIALIZE_HTML, s as KEY_EDITOR_PROTOCOL, _ as KEY_EVENT_EDITOR, x as KEY_HISTORY, A as KEY_INLINE_VOID, I as KEY_INSERT_DATA, M as KEY_LENGTH, Q as KEY_NODE_FACTORY, V as KEY_PREV_SELECTION, bp as KeyboardEventHandler, bC as KeyboardHandler, bD as KeyboardHandlerReturnType, a7 as LINE_FEED, L as LengthPlugin, a8 as NO_BREAK_SPACE, bm as Nullable, bE as OnChange, P as PlateChangeKey, bf as PlateEditorMethods, bG as PlatePluginComponent, bI as PlatePluginInsertData, bH as PlatePluginInsertDataOptions, bK as PlatePluginKey, bL as PlatePluginProps, bg as PlateRenderElementProps, bh as PlateRenderLeafProps, bi as PlateRenderNodeProps, bj as PlateStoreState, bJ as PluginKey, bF as PluginOptions, bM as RenderAfterEditable, R as RenderElement, bR as RenderElementFn, e as RenderLeaf, a9 as SPACE, bN as SerializeHtml, aa as TAB, T as TEditableProps, bQ as TRenderElementProps, bO as ToggleMarkPlugin, bc as ToggleNodeTypeOptions, bA as TransformOptions, b8 as TrimEndRule, b7 as TrimStartRule, b6 as WhiteSpaceRule, bP as WithOverride, W as WithPlatePlugin, ab as ZERO_WIDTH_SPACE, bT as applyDeepToNodes, ag as cleanHtmlBrElements, ah as cleanHtmlCrLf, ai as cleanHtmlEmptyElements, aj as cleanHtmlFontElements, ak as cleanHtmlLinkElements, al as cleanHtmlTextNodes, aY as collapseString, aZ as collapseWhiteSpace, a_ as collapseWhiteSpaceChildren, a$ as collapseWhiteSpaceElement, b0 as collapseWhiteSpaceNode, b1 as collapseWhiteSpaceText, cf as convertDomEventToSyntheticEvent, am as copyBlockMarksToSpanChild, r as createDeserializeAstPlugin, ad as createDeserializeHtmlPlugin, v as createEditorProtocolPlugin, $ as createEventEditorPlugin, z as createHistoryPlugin, cs as createHotkey, F as createInlineVoidPlugin, J as createInsertDataPlugin, O as createLengthPlugin, S as createNodeFactoryPlugin, bU as createPluginFactory, bV as createPlugins, X as createPrevSelectionPlugin, an as deserializeHtml, ao as deserializeHtmlElement, ap as deserializeHtmlNode, aq as deserializeHtmlNodeChildren, b5 as endInlineFormattingContext, a2 as eventEditorActions, a3 as eventEditorSelectors, a1 as eventEditorStore, ar as findHtmlElement, bW as flattenDeepPlugins, a5 as getEventPlateId, at as getHtmlComments, bY as getInjectedPlugins, bZ as getKeyByType, b_ as getKeysByTypes, b$ as getPlugin, c0 as getPluginInjectProps, c1 as getPluginOptions, c2 as getPluginType, c3 as getPluginTypes, c4 as getPlugins, c5 as getPluginsByKey, c6 as getRenderNodeProps, cv as getSlateClass, au as htmlBodyToFragment, av as htmlBrToNewLine, aw as htmlElementToElement, ax as htmlElementToLeaf, ay as htmlStringToDOMNode, az as htmlTextNodeToString, b2 as inferWhiteSpaceRule, aA as inlineTagNames, cg as isEventHandled, aB as isHtmlBlockElement, aC as isHtmlComment, aD as isHtmlElement, aE as isHtmlFragmentHref, aF as isHtmlInlineElement, aG as isHtmlTable, aH as isHtmlText, b3 as isLastNonEmptyTextOfInlineFormattingContext, aI as isOlSymbol, c7 as mapInjectPropsToPlugin, c8 as mergeDeepPlugins, c9 as mergeDeepToNodes, ca as mockPlugin, cb as normalizeDescendantsToDocumentFragment, cc as normalizeInitialValue, cd as overridePluginsByKey, aJ as parseHtmlDocument, aK as parseHtmlElement, ce as pipeDecorate, aL as pipeDeserializeHtmlElement, aM as pipeDeserializeHtmlLeaf, ch as pipeHandler, ci as pipeInjectProps, cj as pipeInsertDataQuery, ck as pipeInsertFragment, cl as pipeOnChange, cm as pipeTransformData, cn as pipeTransformFragment, aN as pluginDeserializeHtml, cq as pluginInjectProps, aO as postCleanHtml, aP as preCleanHtml, aQ as removeHtmlNodesBetweenComments, aR as removeHtmlSurroundings, aS as replaceTagName, ba as resetEditor, bb as resetEditorChildren, cr as setDefaultPlugin, ct as sharedHotkeys, as as someHtmlElement, bd as toggleNodeType, aT as traverseHtmlComments, aU as traverseHtmlElements, aV as traverseHtmlNode, aW as traverseHtmlTexts, aX as unwrapHtmlElement, b4 as upsertInlineFormattingContext, a4 as useEventEditorSelectors, t as withEditorProtocol, cu as withHOC, B as withInlineVoid, H as withInsertData, N as withLength, y as withTHistory } from './createPlateEditor-DJdXykNd.mjs';
import * as _udecode_utils from '@udecode/utils';
export { nanoid } from 'nanoid';
export { StateActions as ZustandStateActions, StoreApi as ZustandStoreApi, createZustandStore } from 'zustand-x';
export { isHotkey } from 'is-hotkey';
import 'react';
import 'src';
import 'slate';
import 'slate-history';
import '@udecode/slate-utils';
import '@udecode/slate-react';
import 'slate-react';
import 'slate-react/dist/components/editable';
import 'jotai-x';
import 'jotai';

/**
 * Create a plate editor with:
 *
 * - `createTEditor` or custom `editor`
 * - `withPlate`
 * - Custom `components`
 */
declare const createPlateEditor: <V extends Value = Value, E extends TEditor<V> = TEditor<V>>({ components, editor, normalizeInitialValue: shouldNormalizeInitialValue, overrideByKey, plugins, ...withPlateOptions }?: CreatePlateEditorOptions<V, E>) => E & PlateEditor<V>;

declare const withReact: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E) => E;
/** @see {@link withReact} with noop methods for server-side support. */
declare const createReactPlugin: <OP = _udecode_utils.AnyObject, OV extends Value = Value, OE extends PlateEditor<OV> = PlateEditor<OV>>(override?: Partial<PlatePlugin<NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: OverrideByKey<OV, OE>) => PlatePlugin<NoInfer<OP>, OV, OE>;

declare const setPlatePlugins: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, { disableCorePlugins, maxLength, plugins: _plugins, }: Pick<PlateProps<V, E>, 'disableCorePlugins' | 'maxLength' | 'plugins'>) => void;

/** `withPlate` with server-side support. */
declare const withPlate: <V extends Value = Value, E extends TEditor<V> = TEditor<V>>(e: E, { disableCorePlugins, id, maxLength, plugins, }?: WithPlateOptions<V, E & PlateEditor<V>>) => E & PlateEditor<V>;

export { NoInfer, OverrideByKey, PlateEditor, PlatePlugin, createPlateEditor, createReactPlugin, setPlatePlugins, withPlate, withReact };
