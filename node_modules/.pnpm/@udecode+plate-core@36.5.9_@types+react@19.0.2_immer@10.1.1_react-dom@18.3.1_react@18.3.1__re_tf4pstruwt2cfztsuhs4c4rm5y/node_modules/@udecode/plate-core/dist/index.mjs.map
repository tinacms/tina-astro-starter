{"version":3,"sources":["../src/client/components/EditorMethodsEffect.ts","../src/shared/types/PlateStore.ts","../src/client/libs/jotai.ts","../src/client/stores/element/useElementStore.ts","../src/client/stores/element/useElement.ts","../src/shared/libs/nanoid.ts","../src/shared/libs/zustand.ts","../src/shared/plugins/event-editor/eventEditorStore.ts","../src/client/stores/plate/createPlateStore.ts","../src/client/libs/react-hotkeys-hook.ts","../src/client/utils/createPlateEditor.ts","../src/shared/utils/createPlugins.tsx","../src/shared/utils/overridePluginsByKey.ts","../src/shared/transforms/resetEditorChildren.ts","../src/shared/transforms/resetEditor.ts","../src/shared/transforms/toggleNodeType.ts","../src/shared/constants/ELEMENT_DEFAULT.ts","../src/shared/utils/getPluginsByKey.ts","../src/shared/utils/getPlugin.ts","../src/shared/utils/getPluginType.ts","../src/client/utils/setPlatePlugins.ts","../src/shared/plugins/createDeserializeAstPlugin.ts","../src/shared/utils/createPluginFactory.ts","../src/shared/plugins/createEditorProtocolPlugin.ts","../src/shared/plugins/createHistoryPlugin.ts","../src/shared/plugins/createInlineVoidPlugin.ts","../src/shared/utils/getInjectedPlugins.ts","../src/shared/utils/pipeInsertDataQuery.ts","../src/shared/utils/pipeInsertFragment.ts","../src/shared/utils/pipeTransformData.ts","../src/shared/utils/pipeTransformFragment.ts","../src/shared/plugins/createInsertDataPlugin.ts","../src/shared/plugins/createLengthPlugin.ts","../src/shared/utils/applyDeepToNodes.ts","../src/shared/utils/flattenDeepPlugins.ts","../src/shared/utils/mergeDeepPlugins.ts","../src/shared/utils/setDefaultPlugin.ts","../src/shared/utils/getKeysByTypes.ts","../src/shared/utils/getKeyByType.ts","../src/shared/utils/getPluginInjectProps.ts","../src/shared/utils/getPluginOptions.ts","../src/shared/utils/getPluginTypes.ts","../src/shared/utils/getPlugins.ts","../src/shared/utils/getRenderNodeProps.ts","../src/shared/utils/misc/getSlateClass.ts","../src/shared/utils/mapInjectPropsToPlugin.ts","../src/shared/utils/mergeDeepToNodes.ts","../src/shared/utils/mockPlugin.ts","../src/shared/utils/normalizeDescendantsToDocumentFragment.ts","../src/shared/utils/normalizeInitialValue.ts","../src/shared/utils/pipeDecorate.ts","../src/shared/utils/pipeHandler.ts","../src/shared/utils/pluginInjectProps.ts","../src/shared/utils/pipeInjectProps.tsx","../src/shared/utils/pipeOnChange.ts","../src/shared/utils/shared-hotkeys.ts","../src/shared/utils/withHOC.tsx","../src/shared/plugins/createNodeFactoryPlugin.ts","../src/shared/plugins/createPrevSelectionPlugin.ts","../src/shared/plugins/event-editor/constants.ts","../src/shared/plugins/event-editor/createEventEditorPlugin.ts","../src/shared/plugins/event-editor/getEventPlateId.ts","../src/shared/plugins/html-deserializer/constants.ts","../src/shared/plugins/html-deserializer/utils/collapse-white-space/collapseString.ts","../src/shared/plugins/html-deserializer/utils/inlineTagNames.ts","../src/shared/plugins/html-deserializer/utils/isHtmlElement.ts","../src/shared/plugins/html-deserializer/utils/isHtmlInlineElement.ts","../src/shared/plugins/html-deserializer/utils/isHtmlText.ts","../src/shared/plugins/html-deserializer/utils/isHtmlBlockElement.ts","../src/shared/plugins/html-deserializer/utils/collapse-white-space/isLastNonEmptyTextOfInlineFormattingContext.ts","../src/shared/plugins/html-deserializer/utils/collapse-white-space/stateTransforms.ts","../src/shared/plugins/html-deserializer/utils/collapse-white-space/collapseWhiteSpaceText.ts","../src/shared/plugins/html-deserializer/utils/collapse-white-space/collapseWhiteSpaceNode.ts","../src/shared/plugins/html-deserializer/utils/collapse-white-space/collapseWhiteSpaceChildren.ts","../src/shared/plugins/html-deserializer/utils/collapse-white-space/inferWhiteSpaceRule.ts","../src/shared/plugins/html-deserializer/utils/collapse-white-space/collapseWhiteSpaceElement.ts","../src/shared/plugins/html-deserializer/utils/collapse-white-space/collapseWhiteSpace.ts","../src/shared/plugins/html-deserializer/utils/htmlBodyToFragment.ts","../src/shared/plugins/html-deserializer/utils/deserializeHtmlNodeChildren.ts","../src/shared/plugins/html-deserializer/utils/htmlBrToNewLine.ts","../src/shared/plugins/html-deserializer/utils/htmlElementToElement.ts","../src/shared/plugins/html-deserializer/utils/pluginDeserializeHtml.ts","../src/shared/plugins/html-deserializer/utils/pipeDeserializeHtmlElement.ts","../src/shared/plugins/html-deserializer/utils/htmlElementToLeaf.ts","../src/shared/plugins/html-deserializer/utils/pipeDeserializeHtmlLeaf.ts","../src/shared/plugins/html-deserializer/utils/htmlTextNodeToString.ts","../src/shared/plugins/html-deserializer/utils/deserializeHtmlNode.ts","../src/shared/plugins/html-deserializer/utils/deserializeHtmlElement.ts","../src/shared/plugins/html-deserializer/utils/htmlStringToDOMNode.ts","../src/shared/plugins/html-deserializer/utils/deserializeHtml.ts","../src/shared/plugins/html-deserializer/utils/parseHtmlDocument.ts","../src/shared/plugins/html-deserializer/createDeserializeHtmlPlugin.ts","../src/shared/plugins/html-deserializer/utils/traverseHtmlNode.ts","../src/shared/plugins/html-deserializer/utils/traverseHtmlElements.ts","../src/shared/plugins/html-deserializer/utils/cleanHtmlBrElements.ts","../src/shared/plugins/html-deserializer/utils/cleanHtmlCrLf.ts","../src/shared/plugins/html-deserializer/utils/cleanHtmlEmptyElements.ts","../src/shared/plugins/html-deserializer/utils/replaceTagName.ts","../src/shared/plugins/html-deserializer/utils/cleanHtmlFontElements.ts","../src/shared/plugins/html-deserializer/utils/isHtmlFragmentHref.ts","../src/shared/plugins/html-deserializer/utils/unwrapHtmlElement.ts","../src/shared/plugins/html-deserializer/utils/cleanHtmlLinkElements.ts","../src/shared/plugins/html-deserializer/utils/traverseHtmlTexts.ts","../src/shared/plugins/html-deserializer/utils/cleanHtmlTextNodes.ts","../src/shared/plugins/html-deserializer/utils/isHtmlTable.ts","../src/shared/plugins/html-deserializer/utils/copyBlockMarksToSpanChild.ts","../src/shared/plugins/html-deserializer/utils/findHtmlElement.ts","../src/shared/plugins/html-deserializer/utils/getHtmlComments.ts","../src/shared/plugins/html-deserializer/utils/isHtmlComment.ts","../src/shared/plugins/html-deserializer/utils/isOlSymbol.ts","../src/shared/plugins/html-deserializer/utils/parseHtmlElement.ts","../src/shared/plugins/html-deserializer/utils/postCleanHtml.ts","../src/shared/plugins/html-deserializer/utils/removeHtmlSurroundings.ts","../src/shared/plugins/html-deserializer/utils/preCleanHtml.ts","../src/shared/plugins/html-deserializer/utils/traverseHtmlComments.ts","../src/shared/plugins/html-deserializer/utils/removeHtmlNodesBetweenComments.ts","../src/client/plugins/event-editor/useFocusEditorEvents.ts","../src/client/plugins/react/withTReact.ts","../src/client/plugins/react/createReactPlugin.ts","../src/client/plugins/withPlate.ts","../src/client/utils/createPlateFallbackEditor.ts","../src/client/utils/hotkeys.ts","../src/client/utils/pipeRenderElement.tsx","../src/client/utils/pluginRenderElement.tsx","../src/client/utils/pipeRenderLeaf.tsx","../src/shared/components/DefaultLeaf.tsx","../src/shared/types/misc/dom-attributes.ts","../src/client/utils/pluginRenderLeaf.tsx","../src/client/stores/plate-controller/plateControllerStore.ts","../src/client/stores/plate/actions/useIncrementVersion.ts","../src/client/stores/plate/actions/useRedecorate.ts","../src/client/stores/plate/actions/useReplaceEditor.ts","../src/client/stores/plate/selectors/useEditorMounted.ts","../src/client/stores/plate/selectors/useEditorReadOnly.ts","../src/client/stores/plate/selectors/useEditorRef.ts","../src/client/stores/plate/selectors/useEditorSelection.ts","../src/client/stores/plate/selectors/useEditorSelector.ts","../src/client/stores/plate/selectors/useEditorState.ts","../src/client/stores/plate/selectors/useEditorVersion.ts","../src/client/stores/plate/selectors/useSelectionVersion.ts","../src/client/stores/event-editor/selectors/useEventPlateId.ts","../src/client/components/EditorRefEffect.tsx","../src/client/components/EditorStateEffect.tsx","../src/client/components/Plate.tsx","../src/client/components/PlateEffects.tsx","../src/client/hooks/useEditableProps.ts","../src/client/hooks/usePlateEffects.ts","../src/client/hooks/useSlateProps.ts","../src/client/components/PlateContent.tsx","../src/client/components/PlateControllerEffect.ts","../src/client/components/PlateSlate.tsx","../src/client/components/PlateTest.tsx"],"sourcesContent":["import React from 'react';\n\nimport { EXPOSED_STORE_KEYS } from '../../shared/types/PlateStore';\nimport {\n  type PlateId,\n  useEditorRef,\n  usePlateStore,\n  useRedecorate,\n} from '../stores';\n\nexport const EditorMethodsEffect = ({ id }: { id?: PlateId }) => {\n  const editor = useEditorRef(id);\n  const redecorate = useRedecorate(id);\n\n  const plateStore = usePlateStore(id);\n\n  // Must be in a scope where hooks can be called.\n  const storeSetters = Object.fromEntries(\n    EXPOSED_STORE_KEYS.map((key) => [key, plateStore.set[key]()])\n  ) as any;\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const memorizedStoreSetters = React.useMemo(() => storeSetters, []);\n\n  React.useEffect(() => {\n    editor.redecorate = redecorate;\n    editor.plate = {\n      set: memorizedStoreSetters,\n    };\n  }, [editor, redecorate, memorizedStoreSetters]);\n\n  return null;\n};\n","import type React from 'react';\n\nimport type { TSelection, Value } from '@udecode/slate';\n\nimport type { PlateId } from '../../client';\nimport type { PlateEditor } from './PlateEditor';\nimport type { Nullable } from './misc/Nullable';\nimport type {\n  PlatePlugin,\n  PluginOptions,\n  WithPlatePlugin,\n} from './plugin/PlatePlugin';\nimport type { TEditableProps } from './slate-react/TEditableProps';\n\nexport type PlateChangeKey =\n  | 'versionDecorate'\n  | 'versionEditor'\n  | 'versionSelection';\n\nexport type PlateStoreState<\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n> = {\n  /**\n   * Slate editor reference.\n   *\n   * @default createPlateFallbackEditor()\n   */\n  editor: E;\n\n  /**\n   * A unique id used as a provider scope. Use it if you have multiple `Plate`\n   * in the same React tree.\n   *\n   * @default random id\n   */\n  id: PlateId;\n\n  /** Flattened plugins. */\n  plugins: WithPlatePlugin<PluginOptions, V, E>[];\n\n  /** Plugins prop passed to `Plate`. */\n  rawPlugins: PlatePlugin<PluginOptions, V, E>[];\n\n  /**\n   * Value of the editor.\n   *\n   * @default [{ type: 'p'; children: [{ text: '' }] }]\n   */\n  value: V;\n} & Nullable<{\n  decorate: NonNullable<TEditableProps['decorate']>;\n\n  /** Access the editor object using a React ref. */\n  editorRef: React.ForwardedRef<E>;\n\n  /** Whether `Editable` is rendered so slate DOM is resolvable. */\n  isMounted: boolean;\n\n  /** Controlled callback called when the editor state changes. */\n  onChange: (value: V) => void;\n\n  /** Controlled callback called when the editor.selection changes. */\n  onSelectionChange: (selection: TSelection) => void;\n\n  /** Controlled callback called when the editor.children changes. */\n  onValueChange: (value: V) => void;\n\n  /**\n   * Whether the editor is primary. If no editor is active, then PlateController\n   * will use the first-mounted primary editor.\n   *\n   * @default true\n   */\n  primary: boolean;\n\n  // Whether the editor is read-only.\n  readOnly: boolean;\n\n  renderElement: NonNullable<TEditableProps['renderElement']>;\n\n  renderLeaf: NonNullable<TEditableProps['renderLeaf']>;\n\n  /**\n   * Version incremented when calling `redecorate`. This is a dependency of the\n   * `decorate` function.\n   */\n  versionDecorate: number;\n  /** Version incremented on each editor change. */\n  versionEditor: number;\n  /** Version incremented on each editor.selection change. */\n  versionSelection: number;\n}>;\n\n// A list of store keys to be exposed in `editor.plate.set`.\nexport const EXPOSED_STORE_KEYS: (keyof PlateStoreState)[] = [\n  'readOnly',\n  'plugins',\n  'onChange',\n  'decorate',\n  'renderElement',\n  'renderLeaf',\n];\n","export { atom } from 'jotai';\n\nexport { createAtomStore } from 'jotai-x';\n","import type { TElement } from '@udecode/slate';\n\nimport type { Nullable } from '../../../shared/types';\n\nimport { createAtomStore } from '../../libs/jotai';\n\nexport const SCOPE_ELEMENT = 'element';\n\nexport type ElementStoreState = { element: TElement };\n\nconst initialState: Nullable<ElementStoreState> = {\n  element: null,\n};\n\nexport const { ElementProvider, useElementStore } = createAtomStore(\n  initialState as ElementStoreState,\n  { name: 'element' } as const\n);\n","import type { TElement } from '@udecode/slate';\n\nimport { SCOPE_ELEMENT, useElementStore } from './useElementStore';\n\n/**\n * Get the element by plugin key. If no element is found in the context, it will\n * return an empty object.\n */\nexport const useElement = <T extends TElement = TElement>(\n  pluginKey = SCOPE_ELEMENT\n): T => {\n  const value = useElementStore(pluginKey).get.element();\n\n  if (!value) {\n    console.warn(\n      `The \\`useElement(pluginKey)\\` hook must be used inside the node component's context`\n    );\n\n    return {} as T;\n  }\n\n  return value as T;\n};\n","export { nanoid } from 'nanoid';\n","export type {\n  StateActions as ZustandStateActions,\n  StoreApi as ZustandStoreApi,\n} from 'zustand-x';\n\nexport { createZustandStore } from 'zustand-x';\n","import type { PlateId } from '../../../client/stores/plate';\n\nimport { createZustandStore } from '../../libs';\n\nexport type EventEditorState = {\n  /** Last editor id that has been blurred. */\n  blur: PlateId | null;\n  /** Editor id that is currently being focused. */\n  focus: PlateId | null;\n  /** Last editor id. */\n  last: PlateId | null;\n};\n\n/** Store where the keys are event names and the values are editor ids. */\nexport const eventEditorStore = createZustandStore('event-editor')({\n  blur: null,\n  focus: null,\n  last: null,\n} as EventEditorState);\n\nexport const eventEditorActions = eventEditorStore.set;\n\nexport const eventEditorSelectors = eventEditorStore.get;\n\nexport const useEventEditorSelectors = eventEditorStore.use;\n","import React from 'react';\n\nimport type { Value } from '@udecode/slate';\nimport type { JotaiStore } from 'jotai-x';\n\nimport { atom, createStore } from 'jotai';\n\nimport type { PlateEditor, PlateStoreState } from '../../../shared/types';\n\nimport { createAtomStore } from '../../libs';\nimport { createPlateFallbackEditor } from '../../utils';\nimport {\n  usePlateControllerEditorStore,\n  usePlateControllerExists,\n} from '../plate-controller';\n\n/**\n * A unique id used as a provider scope. Use it if you have multiple `Plate` in\n * the same React tree.\n *\n * @default PLATE_SCOPE\n */\nexport type PlateId = string;\n\nexport const PLATE_SCOPE = 'plate';\n\nexport const GLOBAL_PLATE_SCOPE = Symbol('global-plate');\n\nexport const createPlateStore = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>({\n  decorate = null,\n  editor = createPlateFallbackEditor<V, E>(),\n  editorRef = null,\n  id,\n  isMounted = false,\n  onChange = null,\n  onSelectionChange = null,\n  onValueChange = null,\n  plugins = [],\n  primary = true,\n  rawPlugins = [],\n  readOnly = null,\n  renderElement = null,\n  renderLeaf = null,\n  value = null as any,\n  versionDecorate = 1,\n  versionEditor = 1,\n  versionSelection = 1,\n  ...state\n}: Partial<PlateStoreState<V, E>> = {}) =>\n  createAtomStore(\n    {\n      decorate,\n      editor,\n      editorRef,\n      id,\n      isMounted,\n      onChange,\n      onSelectionChange,\n      onValueChange,\n      plugins,\n      primary,\n      rawPlugins,\n      readOnly,\n      renderElement,\n      renderLeaf,\n      value,\n      versionDecorate,\n      versionEditor,\n      versionSelection,\n      ...state,\n    } as PlateStoreState<V, E>,\n    {\n      extend: (atoms) => ({\n        trackedEditor: atom((get) => ({\n          editor: get(atoms.editor),\n          version: get(atoms.versionEditor),\n        })),\n        trackedSelection: atom((get) => ({\n          selection: get(atoms.editor).selection,\n          version: get(atoms.versionSelection),\n        })),\n      }),\n      name: 'plate',\n    }\n  );\n\nexport const {\n  PlateProvider: PlateStoreProvider,\n  plateStore,\n  usePlateStore,\n} = createPlateStore();\n\nexport interface UsePlateEditorStoreOptions {\n  debugHookName?: string;\n}\n\nexport const usePlateEditorStore = (\n  id?: PlateId,\n  { debugHookName = 'usePlateEditorStore' }: UsePlateEditorStoreOptions = {}\n): JotaiStore => {\n  // Try to fetch the store from a Plate provider\n  const localStore = usePlateStore(id).store({ warnIfNoStore: false }) ?? null;\n\n  /**\n   * To preserve hook order, only use `localStore` if it was present on first\n   * render. This lets us call `usePlateControllerEditorStore` conditionally.\n   */\n  const [localStoreExists] = React.useState(!!localStore);\n\n  // If no store was found, try to fetch the store from a PlateController\n  const store = localStoreExists\n    ? localStore\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      usePlateControllerEditorStore(id);\n\n  /**\n   * If we still have no store, there are two possibilities.\n   *\n   * Case 1: There is neither a Plate nor a PlateController above us in the\n   * tree. In this case, throw an error, since calling the hook will never\n   * work.\n   *\n   * Case 2: There is a PlateController, but it has no active editor. In this\n   * case, return a fallback store until an editor becomes active.\n   */\n  const plateControllerExists = usePlateControllerExists();\n  const fallbackStore = React.useMemo(() => createStore(), []);\n\n  if (!store) {\n    if (plateControllerExists) {\n      return fallbackStore;\n    }\n\n    throw new Error(\n      `${debugHookName} must be used inside a Plate or PlateController`\n    );\n  }\n\n  return store;\n};\n\nexport const usePlateSelectors = (\n  id?: PlateId,\n  options?: UsePlateEditorStoreOptions\n) => {\n  const store = usePlateEditorStore(id, {\n    debugHookName: 'usePlateSelectors',\n    ...options,\n  });\n\n  return usePlateStore({ store }).get;\n};\n\nexport const usePlateActions = (\n  id?: PlateId,\n  options?: UsePlateEditorStoreOptions\n) => {\n  const store = usePlateEditorStore(id, {\n    debugHookName: 'usePlateActions',\n    ...options,\n  });\n\n  return usePlateStore({ store }).set;\n};\n\nexport const usePlateStates = (\n  id?: PlateId,\n  options?: UsePlateEditorStoreOptions\n) => {\n  const store = usePlateEditorStore(id, {\n    debugHookName: 'usePlateStates',\n    ...options,\n  });\n\n  return usePlateStore({ store }).use;\n};\n\n/** Get the closest `Plate` id. */\nexport const usePlateId = (): PlateId =>\n  usePlateSelectors(undefined, { debugHookName: 'usePlateId' }).id();\n","export { isHotkeyPressed, useHotkeys } from 'react-hotkeys-hook';\n\nexport type { Options as UseHotkeysOptions } from 'react-hotkeys-hook';\n","import {\n  type TEditor,\n  type Value,\n  createTEditor,\n  normalizeEditor,\n} from '@udecode/slate';\n\nimport type {\n  OverrideByKey,\n  PlatePlugin,\n  PlatePluginComponent,\n} from '../../shared/types';\nimport type { PlateEditor } from '../../shared/types/PlateEditor';\n\nimport { createPlugins } from '../../shared/utils/createPlugins';\nimport { type WithPlateOptions, withPlate } from '../plugins/withPlate';\n\nexport interface CreatePlateEditorOptions<\n  V extends Value = Value,\n  E extends TEditor<V> = TEditor<V>,\n> extends Omit<WithPlateOptions<V, E & PlateEditor<V>>, 'plugins'> {\n  /** Inject components into plugins. */\n  components?: Record<string, PlatePluginComponent>;\n\n  /** Initial editor (without `withPlate`). */\n  editor?: E;\n\n  /** Normalize editor. */\n  normalizeInitialValue?: boolean;\n\n  /** Override plugins by key. */\n  overrideByKey?: OverrideByKey;\n\n  /** Editor plugins. */\n  plugins?: PlatePlugin[];\n}\n\n/**\n * Create a plate editor with:\n *\n * - `createTEditor` or custom `editor`\n * - `withPlate`\n * - Custom `components`\n */\nexport const createPlateEditor = <\n  V extends Value = Value,\n  E extends TEditor<V> = TEditor<V>,\n>({\n  components,\n  editor = createTEditor() as E,\n  normalizeInitialValue: shouldNormalizeInitialValue,\n  overrideByKey,\n  plugins = [],\n  ...withPlateOptions\n}: CreatePlateEditorOptions<V, E> = {}): E & PlateEditor<V> => {\n  plugins = createPlugins(plugins, {\n    components,\n    overrideByKey,\n  });\n\n  const e = withPlate<V>(editor, {\n    plugins,\n    ...withPlateOptions,\n  }) as E & PlateEditor<V>;\n\n  if (shouldNormalizeInitialValue) {\n    normalizeEditor(e, { force: true });\n  }\n\n  return e;\n};\n","import type { Value } from '@udecode/slate';\n\nimport cloneDeep from 'lodash/cloneDeep.js';\n\nimport type { OverrideByKey } from '../types/OverrideByKey';\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type { PlatePlugin, PluginOptions } from '../types/plugin/PlatePlugin';\nimport type { PlatePluginComponent } from '../types/plugin/PlatePluginComponent';\n\nimport { overridePluginsByKey } from './overridePluginsByKey';\n\n/**\n * Creates a new array of plugins by overriding the plugins in the original\n * array. Components can be overridden by key using `components` in the second\n * param. Any other properties can be overridden by key using `overrideByKey` in\n * the second param.\n */\nexport const createPlugins = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  plugins: PlatePlugin[],\n  {\n    components,\n    overrideByKey,\n  }: {\n    /** Override plugin component by key. */\n    components?: Record<string, PlatePluginComponent>;\n\n    /** Override plugin by key. */\n    overrideByKey?: OverrideByKey;\n  } = {}\n): PlatePlugin<PluginOptions, V, E>[] => {\n  let allOverrideByKey: OverrideByKey = {};\n\n  if (overrideByKey) {\n    allOverrideByKey = cloneDeep(overrideByKey);\n  }\n  if (components) {\n    Object.keys(components).forEach((key) => {\n      if (!allOverrideByKey[key]) allOverrideByKey[key] = {};\n\n      allOverrideByKey[key].component = components[key];\n    });\n  }\n  if (Object.keys(allOverrideByKey).length > 0) {\n    return plugins.map((plugin) => {\n      return overridePluginsByKey(plugin as any, allOverrideByKey as any);\n    });\n  }\n\n  return plugins as PlatePlugin<PluginOptions, V, E>[];\n};\n","import type { Value } from '@udecode/slate';\n\nimport defaultsDeep from 'lodash/defaultsDeep.js';\n\nimport type { OverrideByKey } from '../types/OverrideByKey';\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type { NoInfer } from '../types/misc/NoInfer';\nimport type { PlatePlugin, PluginOptions } from '../types/plugin/PlatePlugin';\n\n/**\n * Recursive deep merge of each plugin from `overrideByKey` into plugin with\n * same key (plugin > plugin.plugins).\n */\nexport const overridePluginsByKey = <\n  P = PluginOptions,\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  plugin: PlatePlugin<NoInfer<P>, V, E>,\n  overrideByKey: OverrideByKey<V, E> = {},\n  nested = false\n): PlatePlugin<NoInfer<P>, V, E> => {\n  if (overrideByKey[plugin.key]) {\n    const {\n      plugins: pluginOverridesPlugins,\n      then: pluginOverridesThen,\n      ...pluginOverrides\n    } = overrideByKey[plugin.key];\n\n    // override plugin\n    plugin = defaultsDeep(pluginOverrides, plugin);\n\n    if (!nested) {\n      // concat new pluginOverrides.plugins to plugin.plugins\n      pluginOverridesPlugins?.forEach((pOverrides) => {\n        if (!plugin.plugins) plugin.plugins = [];\n\n        const found = plugin.plugins.find((p) => p.key === pOverrides.key);\n\n        if (!found) plugin.plugins.push(pOverrides);\n      });\n    }\n  }\n  if (plugin.plugins) {\n    // override plugin.plugins\n    plugin.plugins = plugin.plugins.map((p) =>\n      overridePluginsByKey<{}, V, E>(p, overrideByKey, true)\n    );\n  }\n\n  const { then } = plugin;\n\n  if (then) {\n    if (plugin._thenReplaced === undefined) {\n      plugin._thenReplaced = 0;\n    }\n    // Limit the number of times that `then` can be replaced.\n    // otherwise we will accidentally create a stack overflow.\n    // There is probably a better solution for this.\n    if ((plugin._thenReplaced as number) < 3) {\n      // override plugin.then\n      plugin.then = (editor, p) => {\n        const pluginThen = { key: plugin.key, ...then(editor, p) };\n\n        return defaultsDeep(\n          overridePluginsByKey(pluginThen as any, overrideByKey),\n          pluginThen\n        );\n      };\n      (plugin._thenReplaced as number)++;\n    }\n  } else if (overrideByKey[plugin.key]?.then) {\n    // TODO: recursvie\n    plugin.then = overrideByKey[plugin.key].then as any;\n  }\n\n  return plugin;\n};\n","import type { EElement, Value } from '@udecode/slate';\n\nimport {\n  type ReplaceNodeChildrenOptions,\n  replaceNodeChildren,\n} from '@udecode/slate-utils';\n\nimport type { PlateEditor } from '../types/index';\n\n/** Replace editor children by default block. */\nexport const resetEditorChildren = <V extends Value>(\n  editor: PlateEditor<V>,\n  options?: Omit<ReplaceNodeChildrenOptions<EElement<V>, V>, 'at' | 'nodes'>\n) => {\n  replaceNodeChildren<EElement<V>>(editor, {\n    at: [],\n    nodes: editor.childrenFactory(),\n    ...options,\n  } as any);\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/index';\n\nimport { resetEditorChildren } from './resetEditorChildren';\n\nexport const resetEditor = <V extends Value>(editor: PlateEditor<V>) => {\n  resetEditorChildren(editor);\n\n  editor.history.undos = [];\n  editor.history.redos = [];\n  editor.operations = [];\n};\n","import {\n  type GetNodeEntriesOptions,\n  type Value,\n  setElements,\n  someNode,\n} from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\n\nimport { ELEMENT_DEFAULT } from '../constants/ELEMENT_DEFAULT';\nimport { getPluginType } from '../utils/getPluginType';\n\nexport interface ToggleNodeTypeOptions {\n  /**\n   * If there is no node type above the selection, set the selected node type to\n   * activeType.\n   */\n  activeType?: string;\n\n  /**\n   * If there is a node type above the selection, set the selected node type to\n   * inactiveType.\n   */\n  inactiveType?: string;\n}\n\n/**\n * Toggle the type of the selected node. Don't do anything if activeType ===\n * inactiveType.\n */\nexport const toggleNodeType = <V extends Value>(\n  editor: PlateEditor<V>,\n  options: ToggleNodeTypeOptions,\n  editorNodesOptions?: Omit<GetNodeEntriesOptions<V>, 'match'>\n) => {\n  const { activeType, inactiveType = getPluginType(editor, ELEMENT_DEFAULT) } =\n    options;\n\n  const at = editorNodesOptions?.at ?? editor.selection;\n\n  if (!activeType || !at) return;\n\n  const isActive = someNode(editor, {\n    ...editorNodesOptions,\n    match: {\n      type: activeType,\n    },\n  });\n\n  if (isActive && activeType === inactiveType) return;\n\n  setElements(\n    editor,\n    {\n      type: isActive ? inactiveType : activeType,\n    },\n    { at: at as any }\n  );\n};\n","export const ELEMENT_DEFAULT = 'p';\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type {\n  PluginOptions,\n  WithPlatePlugin,\n} from '../types/plugin/PlatePlugin';\nimport type { PluginKey } from '../types/plugin/PlatePluginKey';\n\n/** Get `editor.pluginsByKey` */\nexport const getPluginsByKey = <\n  P = PluginOptions,\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor?: E\n): Record<PluginKey, WithPlatePlugin<P, V, E>> => {\n  return (\n    (editor?.pluginsByKey as Record<PluginKey, WithPlatePlugin<P, V, E>>) ?? {}\n  );\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type {\n  PluginOptions,\n  WithPlatePlugin,\n} from '../types/plugin/PlatePlugin';\nimport type { PluginKey } from '../types/plugin/PlatePluginKey';\n\nimport { getPluginsByKey } from './getPluginsByKey';\n\n/** Get plugin options by plugin key. */\nexport const getPlugin = <\n  P = PluginOptions,\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  key: PluginKey\n): WithPlatePlugin<P, V, E> => getPluginsByKey<P, V, E>(editor)[key] ?? { key };\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\n\nimport { getPlugin } from './getPlugin';\n\n/** Get plugin type option by plugin key. */\nexport const getPluginType = <V extends Value>(\n  editor: PlateEditor<V>,\n  key: string\n): string => getPlugin<{}, V>(editor, key).type ?? key ?? '';\n","import type { Value } from '@udecode/slate';\n\nimport { isDefined } from '@udecode/utils';\n\nimport type { PlateEditor } from '../../shared/types/PlateEditor';\nimport type { PlatePlugin } from '../../shared/types/plugin/PlatePlugin';\nimport type { PlateProps } from '../components';\n\nimport {\n  KEY_DESERIALIZE_AST,\n  KEY_DESERIALIZE_HTML,\n  KEY_EDITOR_PROTOCOL,\n  KEY_EVENT_EDITOR,\n  KEY_INLINE_VOID,\n  KEY_INSERT_DATA,\n  KEY_LENGTH,\n  KEY_NODE_FACTORY,\n  KEY_PREV_SELECTION,\n  createDeserializeAstPlugin,\n  createDeserializeHtmlPlugin,\n  createEditorProtocolPlugin,\n  createEventEditorPlugin,\n  createHistoryPlugin,\n  createInlineVoidPlugin,\n  createInsertDataPlugin,\n  createLengthPlugin,\n  createNodeFactoryPlugin,\n  createPrevSelectionPlugin,\n} from '../../shared/plugins';\nimport { flattenDeepPlugins } from '../../shared/utils/flattenDeepPlugins';\nimport { overridePluginsByKey } from '../../shared/utils/overridePluginsByKey';\nimport { createReactPlugin } from '../plugins';\n\n/** Flatten deep plugins then set editor.plugins and editor.pluginsByKey */\nexport const setPlatePlugins = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  {\n    disableCorePlugins,\n    maxLength,\n    plugins: _plugins = [],\n  }: Pick<PlateProps<V, E>, 'disableCorePlugins' | 'maxLength' | 'plugins'>\n) => {\n  let plugins: PlatePlugin<{}, V, PlateEditor<V>>[] = [];\n\n  if (disableCorePlugins !== true) {\n    const dcp = disableCorePlugins;\n\n    if (typeof dcp !== 'object' || !dcp?.react) {\n      plugins.push((editor?.pluginsByKey?.react as any) ?? createReactPlugin());\n    }\n    if (typeof dcp !== 'object' || !dcp?.history) {\n      plugins.push(\n        (editor?.pluginsByKey?.history as any) ?? createHistoryPlugin()\n      );\n    }\n    if (typeof dcp !== 'object' || !dcp?.nodeFactory) {\n      plugins.push(\n        (editor?.pluginsByKey?.[KEY_NODE_FACTORY] as any) ??\n          createNodeFactoryPlugin()\n      );\n    }\n    if (typeof dcp !== 'object' || !dcp?.eventEditor) {\n      plugins.push(\n        (editor?.pluginsByKey?.[KEY_EVENT_EDITOR] as any) ??\n          createEventEditorPlugin()\n      );\n    }\n    if (typeof dcp !== 'object' || !dcp?.inlineVoid) {\n      plugins.push(\n        (editor?.pluginsByKey?.[KEY_INLINE_VOID] as any) ??\n          createInlineVoidPlugin()\n      );\n    }\n    if (typeof dcp !== 'object' || !dcp?.insertData) {\n      plugins.push(\n        (editor?.pluginsByKey?.[KEY_INSERT_DATA] as any) ??\n          createInsertDataPlugin()\n      );\n    }\n    if (typeof dcp !== 'object' || !dcp?.selection) {\n      plugins.push(\n        (editor?.pluginsByKey?.[KEY_PREV_SELECTION] as any) ??\n          createPrevSelectionPlugin()\n      );\n    }\n    if ((typeof dcp !== 'object' || !dcp?.length) && isDefined(maxLength)) {\n      plugins.push(\n        (editor?.pluginsByKey?.[KEY_LENGTH] as any) ??\n          createLengthPlugin({\n            options: {\n              maxLength,\n            },\n          })\n      );\n    }\n    if (typeof dcp !== 'object' || !dcp?.deserializeHtml) {\n      plugins.push(\n        (editor?.pluginsByKey?.[KEY_DESERIALIZE_HTML] as any) ??\n          createDeserializeHtmlPlugin()\n      );\n    }\n    if (typeof dcp !== 'object' || !dcp?.deserializeAst) {\n      plugins.push(\n        (editor?.pluginsByKey?.[KEY_DESERIALIZE_AST] as any) ??\n          createDeserializeAstPlugin()\n      );\n    }\n    if (typeof dcp !== 'object' || !dcp?.editorProtocol) {\n      plugins.push(\n        (editor?.pluginsByKey?.[KEY_EDITOR_PROTOCOL] as any) ??\n          createEditorProtocolPlugin()\n      );\n    }\n  }\n\n  plugins = [...plugins, ..._plugins] as any;\n\n  editor.plugins = [];\n  editor.pluginsByKey = {};\n\n  flattenDeepPlugins(editor, plugins);\n\n  // override all the plugins one by one, so plugin.overrideByKey effects can be overridden by the next plugin\n  editor.plugins.forEach((plugin) => {\n    if (plugin.overrideByKey) {\n      const newPlugins = editor.plugins.map((p) => {\n        return overridePluginsByKey<V>(p as any, plugin.overrideByKey as any);\n      });\n\n      editor.plugins = [];\n      editor.pluginsByKey = {};\n\n      // flatten again the overrides\n      flattenDeepPlugins<V>(editor, newPlugins as any);\n    }\n  });\n};\n","import castArray from 'lodash/castArray.js';\n\nimport { createPluginFactory } from '../utils/createPluginFactory';\n\nexport const KEY_DESERIALIZE_AST = 'deserializeAst';\n\n/**\n * Enables support for deserializing inserted content from Slate Ast format to\n * Slate format while apply a small bug fix.\n */\nexport const createDeserializeAstPlugin = createPluginFactory({\n  editor: {\n    insertData: {\n      format: 'application/x-slate-fragment',\n      getFragment: ({ data }) => {\n        const decoded = decodeURIComponent(window.atob(data));\n        let parsed;\n\n        try {\n          parsed = JSON.parse(decoded);\n        } catch (error) {\n          /* empty */\n        }\n\n        return castArray(parsed);\n      },\n    },\n  },\n  key: KEY_DESERIALIZE_AST,\n});\n","import type { Value } from '@udecode/slate';\n\nimport type { OverrideByKey } from '../types/OverrideByKey';\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type { NoInfer } from '../types/misc/NoInfer';\nimport type { PlatePlugin, PluginOptions } from '../types/plugin/PlatePlugin';\n\nimport { overridePluginsByKey } from './overridePluginsByKey';\n\n/**\n * Create plugin factory with a default plugin.\n *\n * - First param is the default plugin.\n * - The only required property of the default plugin is `key`.\n * - Returns a plugin factory:\n *\n *   - First param `override` can be used to (deeply) override the default plugin.\n *   - Second param `overrideByKey` can be used to (deeply) override by key a nested\n *       plugin (in plugin.plugins).\n */\nexport const createPluginFactory =\n  <\n    P = PluginOptions,\n    V extends Value = Value,\n    E extends PlateEditor<V> = PlateEditor<V>,\n  >(\n    defaultPlugin: PlatePlugin<NoInfer<P>, V, E>\n  ) =>\n  <OP = P, OV extends Value = V, OE extends PlateEditor<OV> = PlateEditor<OV>>(\n    override?: Partial<PlatePlugin<NoInfer<OP>, OV, OE>>,\n    overrideByKey: OverrideByKey<OV, OE> = {}\n  ): PlatePlugin<NoInfer<OP>, OV, OE> => {\n    overrideByKey[defaultPlugin.key] = override as any;\n\n    return overridePluginsByKey<OP, OV, OE>(\n      { ...defaultPlugin } as any,\n      overrideByKey\n    );\n  };\n","import {\n  type EAncestor,\n  type GetAboveNodeOptions,\n  type TEditor,\n  type Value,\n  getAboveNode,\n  getMarks,\n  isExpanded,\n  isStartPoint,\n  removeEditorMark,\n} from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/index';\n\nimport { createPluginFactory } from '../utils/createPluginFactory';\n\nconst getBlockAbove = <N extends EAncestor<V>, V extends Value = Value>(\n  editor: TEditor<V>,\n  options: GetAboveNodeOptions<V> = {}\n) =>\n  getAboveNode<N, V>(editor, {\n    ...options,\n    block: true,\n  });\n\nconst isSelectionAtBlockStart = <V extends Value>(\n  editor: TEditor<V>,\n  options?: GetAboveNodeOptions<V>\n) => {\n  const { selection } = editor;\n\n  if (!selection) return false;\n\n  const path = getBlockAbove(editor, options)?.[1];\n\n  if (!path) return false;\n\n  return (\n    isStartPoint(editor, selection.focus, path) ||\n    (isExpanded(editor.selection) &&\n      isStartPoint(editor, selection.anchor, path))\n  );\n};\n\nconst removeSelectionMark = <V extends Value = Value>(editor: TEditor<V>) => {\n  const marks = getMarks(editor);\n\n  if (!marks) return;\n\n  // remove all marks\n  Object.keys(marks).forEach((key) => {\n    removeEditorMark(editor, key);\n  });\n};\n\nexport const KEY_EDITOR_PROTOCOL = 'editorProtocol';\n\nexport const withEditorProtocol = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E\n) => {\n  const { deleteBackward, deleteForward, deleteFragment } = editor;\n\n  const resetMarks = () => {\n    if (isSelectionAtBlockStart(editor)) {\n      removeSelectionMark(editor);\n    }\n  };\n\n  editor.deleteBackward = (unit) => {\n    deleteBackward(unit);\n\n    resetMarks();\n  };\n\n  editor.deleteForward = (unit) => {\n    deleteForward(unit);\n\n    resetMarks();\n  };\n\n  editor.deleteFragment = (direction) => {\n    deleteFragment(direction);\n\n    resetMarks();\n  };\n\n  return editor;\n};\n\nexport const createEditorProtocolPlugin = createPluginFactory({\n  key: KEY_EDITOR_PROTOCOL,\n  withOverrides: withEditorProtocol,\n});\n","import type { TEditor, THistoryEditor, Value } from '@udecode/slate';\n\nimport { withHistory } from 'slate-history';\n\nimport { createPluginFactory } from '../utils/createPluginFactory';\n\nexport const KEY_HISTORY = 'history';\n\nexport const withTHistory = <\n  V extends Value = Value,\n  E extends TEditor<V> = TEditor<V>,\n  EE extends E = E & THistoryEditor<V>,\n>(\n  editor: E\n) => withHistory(editor as any) as any as EE;\n\n/** @see {@link withHistory} */\nexport const createHistoryPlugin = createPluginFactory({\n  key: KEY_HISTORY,\n  withOverrides: withTHistory,\n});\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\n\nimport { createPluginFactory } from '../utils/createPluginFactory';\n\nexport const KEY_INLINE_VOID = 'inline-void';\n\n/**\n * Merge and register all the inline types and void types from the plugins and\n * options, using `editor.isInline`, `editor.markableVoid` and `editor.isVoid`\n */\nexport const withInlineVoid = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E\n) => {\n  const { isInline, isVoid, markableVoid } = editor;\n\n  const voidTypes: string[] = [];\n  const inlineTypes: string[] = [];\n  const markableVoidTypes: string[] = [];\n\n  editor.plugins.forEach((plugin) => {\n    if (plugin.isInline) {\n      inlineTypes.push(plugin.type);\n    }\n    if (plugin.isVoid) {\n      voidTypes.push(plugin.type);\n    }\n    if (plugin.isMarkableVoid) {\n      markableVoidTypes.push(plugin.type);\n    }\n  });\n\n  editor.isInline = (element) => {\n    return inlineTypes.includes(element.type) ? true : isInline(element);\n  };\n\n  editor.isVoid = (element) => {\n    return voidTypes.includes(element.type) ? true : isVoid(element);\n  };\n\n  editor.markableVoid = (element) => {\n    return markableVoidTypes.includes(element.type)\n      ? true\n      : markableVoid(element);\n  };\n\n  return editor;\n};\n\n/** @see {@link withInlineVoid} */\nexport const createInlineVoidPlugin = createPluginFactory({\n  key: KEY_INLINE_VOID,\n  withOverrides: withInlineVoid,\n});\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type {\n  PlatePlugin,\n  PluginOptions,\n  WithPlatePlugin,\n} from '../types/plugin/PlatePlugin';\n\nexport type InjectedPlugin<\n  P = PluginOptions,\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n> = Partial<PlatePlugin<P, V, E>>;\n\n/**\n * Get all plugins having a defined `inject.pluginsByKey[plugin.key]`. It\n * includes `plugin` itself.\n */\nexport const getInjectedPlugins = <\n  P = PluginOptions,\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: PlateEditor<V>,\n  plugin: WithPlatePlugin<P, V, E>\n): InjectedPlugin<P, V, E>[] => {\n  const injectedPlugins: InjectedPlugin<P, V, E>[] = [];\n\n  [...editor.plugins].reverse().forEach((p) => {\n    const injectedPlugin = p.inject.pluginsByKey?.[\n      plugin.key\n    ] as InjectedPlugin<P, V, E>;\n\n    if (injectedPlugin) injectedPlugins.push(injectedPlugin);\n  });\n\n  return [plugin as InjectedPlugin<P, V, E>, ...injectedPlugins];\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type { PluginOptions } from '../types/plugin/PlatePlugin';\nimport type { PlatePluginInsertDataOptions } from '../types/plugin/PlatePluginInsertData';\nimport type { InjectedPlugin } from './getInjectedPlugins';\n\n/** Is the plugin disabled by another plugin. */\nexport const pipeInsertDataQuery = <\n  P = PluginOptions,\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  plugins: InjectedPlugin<P, V, E>[],\n  { data, dataTransfer }: PlatePluginInsertDataOptions\n) =>\n  plugins.every((p) => {\n    const query = p.editor?.insertData?.query;\n\n    return (\n      !query ||\n      query({\n        data,\n        dataTransfer,\n      })\n    );\n  });\n","import {\n  type EElementOrText,\n  type Value,\n  withoutNormalizing,\n} from '@udecode/slate';\n\nimport type { PlateEditor } from '../types';\nimport type { PlatePluginInsertDataOptions } from '../types/plugin/PlatePluginInsertData';\nimport type { InjectedPlugin } from './getInjectedPlugins';\n\n/** Pipe preInsert then insertFragment. */\nexport const pipeInsertFragment = <V extends Value>(\n  editor: PlateEditor<V>,\n  injectedPlugins: InjectedPlugin<{}, V>[],\n  {\n    fragment,\n    ...options\n  }: { fragment: EElementOrText<V>[] } & PlatePluginInsertDataOptions\n) => {\n  withoutNormalizing(editor, () => {\n    injectedPlugins.some((p) => {\n      return p.editor?.insertData?.preInsert?.(fragment, options) === true;\n    });\n\n    editor.insertFragment(fragment);\n  });\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PluginOptions } from '../types/plugin/PlatePlugin';\nimport type { PlatePluginInsertDataOptions } from '../types/plugin/PlatePluginInsertData';\nimport type { InjectedPlugin } from './getInjectedPlugins';\n\n/** Pipe editor.insertData.transformData */\nexport const pipeTransformData = <V extends Value>(\n  plugins: InjectedPlugin<PluginOptions, V>[],\n  { data, dataTransfer }: PlatePluginInsertDataOptions\n) => {\n  plugins.forEach((p) => {\n    const transformData = p.editor?.insertData?.transformData;\n\n    if (!transformData) return;\n\n    data = transformData(data, { dataTransfer });\n  });\n\n  return data;\n};\n","import type { EElementOrText, Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type { PlatePluginInsertDataOptions } from '../types/plugin/PlatePluginInsertData';\nimport type { InjectedPlugin } from './getInjectedPlugins';\n\n/** Pipe editor.insertData.transformFragment */\nexport const pipeTransformFragment = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  plugins: InjectedPlugin<{}, V, E>[],\n  {\n    fragment,\n    ...options\n  }: { fragment: EElementOrText<V>[] } & PlatePluginInsertDataOptions\n) => {\n  plugins.forEach((p) => {\n    const transformFragment = p.editor?.insertData?.transformFragment;\n\n    if (!transformFragment) return;\n\n    fragment = transformFragment(fragment, options);\n  });\n\n  return fragment;\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\n\nimport { createPluginFactory } from '../utils/createPluginFactory';\nimport { getInjectedPlugins } from '../utils/getInjectedPlugins';\nimport { pipeInsertDataQuery } from '../utils/pipeInsertDataQuery';\nimport { pipeInsertFragment } from '../utils/pipeInsertFragment';\nimport { pipeTransformData } from '../utils/pipeTransformData';\nimport { pipeTransformFragment } from '../utils/pipeTransformFragment';\n\nexport const withInsertData = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E\n) => {\n  const { insertData } = editor;\n\n  editor.insertData = (dataTransfer) => {\n    const inserted = [...editor.plugins].reverse().some((plugin) => {\n      const insertDataOptions = plugin.editor.insertData;\n\n      if (!insertDataOptions) return false;\n\n      const injectedPlugins = getInjectedPlugins<{}, V>(editor, plugin);\n      const { format, getFragment } = insertDataOptions;\n\n      if (!format) return false;\n\n      let data = dataTransfer.getData(format);\n\n      if (!data) return;\n      if (\n        !pipeInsertDataQuery<{}, V>(injectedPlugins, {\n          data,\n          dataTransfer,\n        })\n      ) {\n        return false;\n      }\n\n      data = pipeTransformData(injectedPlugins, {\n        data,\n        dataTransfer,\n      });\n\n      let fragment = getFragment?.({\n        data,\n        dataTransfer,\n      });\n\n      if (!fragment?.length) return false;\n\n      fragment = pipeTransformFragment(injectedPlugins, {\n        data,\n        dataTransfer,\n        fragment,\n      });\n\n      if (fragment.length === 0) return false;\n\n      pipeInsertFragment(editor, injectedPlugins, {\n        data,\n        dataTransfer,\n        fragment,\n      });\n\n      return true;\n    });\n\n    if (inserted) return;\n\n    insertData(dataTransfer);\n  };\n\n  return editor;\n};\n\nexport const KEY_INSERT_DATA = 'insertData';\n\nexport const createInsertDataPlugin = createPluginFactory({\n  key: KEY_INSERT_DATA,\n  withOverrides: withInsertData,\n});\n","import { getEditorString, withoutNormalizing } from '@udecode/slate';\n\nimport type { WithOverride } from '../types/index';\n\nimport { createPluginFactory } from '../utils/createPluginFactory';\n\nexport type LengthPlugin = {\n  maxLength: number;\n};\n\nexport const KEY_LENGTH = 'length';\n\nexport const withLength: WithOverride<LengthPlugin> = (editor, { options }) => {\n  const { apply } = editor;\n\n  editor.apply = (operation) => {\n    withoutNormalizing(editor, () => {\n      apply(operation);\n\n      if (options.maxLength) {\n        const length = getEditorString(editor, []).length;\n\n        // Make sure to remove overflow of text beyond character limit\n        if (length > options.maxLength) {\n          const overflowLength = length - options.maxLength;\n\n          editor.delete({\n            distance: overflowLength,\n            reverse: true,\n            unit: 'character',\n          });\n        }\n      }\n    });\n  };\n\n  return editor;\n};\n\nexport const createLengthPlugin = createPluginFactory<LengthPlugin>({\n  key: KEY_LENGTH,\n  withOverrides: withLength,\n});\n","import type { Path } from 'slate';\n\nimport {\n  type NodeOf,\n  type QueryNodeOptions,\n  type TNode,\n  type TNodeEntry,\n  isAncestor,\n  queryNode,\n} from '@udecode/slate';\n\nexport interface ApplyDeepToNodesOptions<N extends TNode> {\n  // Function to call on each node following the query.\n  apply: (\n    node: NodeOf<N>,\n    source: (() => Record<string, any>) | Record<string, any>\n  ) => void;\n  // The destination node object.\n  node: N;\n  // The source object. Can be a factory.\n  source: (() => Record<string, any>) | Record<string, any>;\n  path?: Path;\n  // Query to filter the nodes.\n  query?: QueryNodeOptions;\n}\n\n/** Recursively apply an operation to children nodes with a query. */\nexport const applyDeepToNodes = <N extends TNode>({\n  apply,\n  node,\n  path = [],\n  query,\n  source,\n}: ApplyDeepToNodesOptions<N>) => {\n  const entry: TNodeEntry<N> = [node, path];\n\n  if (queryNode<N>(entry, query)) {\n    if (source instanceof Function) {\n      apply(node, source());\n    } else {\n      apply(node, source);\n    }\n  }\n  if (!isAncestor(node)) return;\n\n  node.children.forEach((child, index) => {\n    applyDeepToNodes({\n      apply,\n      node: child as any,\n      path: path.concat([index]),\n      query,\n      source,\n    });\n  });\n};\n","import type { Value } from '@udecode/slate';\n\nimport defaultsDeep from 'lodash/defaultsDeep.js';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type { PlatePlugin } from '../types/plugin/PlatePlugin';\n\nimport { mergeDeepPlugins } from './mergeDeepPlugins';\nimport { setDefaultPlugin } from './setDefaultPlugin';\n\n/** Recursively merge plugin.plugins into editor.plugins and editor.pluginsByKey */\nexport const flattenDeepPlugins = <V extends Value>(\n  editor: PlateEditor<V>,\n  plugins?: PlatePlugin<{}, V>[]\n) => {\n  if (!plugins) return;\n\n  plugins.forEach((plugin) => {\n    let p = setDefaultPlugin(plugin);\n\n    p = mergeDeepPlugins<V>(editor, p);\n\n    if (p.enabled === false) return;\n    if (editor.pluginsByKey[p.key]) {\n      const index = editor.plugins.indexOf(editor.pluginsByKey[p.key]);\n\n      const mergedPlugin = defaultsDeep(p, editor.pluginsByKey[p.key]);\n\n      if (index >= 0) {\n        editor.plugins[index] = mergedPlugin;\n      }\n\n      editor.pluginsByKey[p.key] = mergedPlugin;\n    } else {\n      editor.plugins.push(p);\n      editor.pluginsByKey[p.key] = p;\n    }\n\n    flattenDeepPlugins(editor, p.plugins!);\n  });\n};\n","import type { Value } from '@udecode/slate';\n\nimport defaultsDeep from 'lodash/defaultsDeep.js';\nimport keyBy from 'lodash/keyBy.js';\nimport merge from 'lodash/merge.js';\nimport values from 'lodash/values.js';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type { WithPlatePlugin } from '../types/plugin/PlatePlugin';\n\n/** Recursively merge nested plugins into the root plugins */\nexport const mergeDeepPlugins = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n  P extends WithPlatePlugin<{}, V, E> = WithPlatePlugin<{}, V, E>,\n>(\n  editor: E,\n  _plugin: P\n): P => {\n  const plugin = { ..._plugin };\n\n  const { then } = plugin;\n\n  if (then) {\n    delete plugin.then;\n\n    const { plugins: pluginPlugins } = plugin;\n\n    const pluginThen = mergeDeepPlugins<V, E, P>(\n      editor,\n      defaultsDeep(then(editor, plugin), plugin)\n    );\n\n    // merge plugins by key\n    if (pluginPlugins && pluginThen.plugins) {\n      const merged = merge(\n        keyBy(pluginPlugins, 'key'),\n        keyBy(pluginThen.plugins, 'key')\n      );\n\n      pluginThen.plugins = values(merged);\n    }\n\n    return pluginThen;\n  }\n\n  return plugin;\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type {\n  PlatePlugin,\n  PluginOptions,\n  WithPlatePlugin,\n} from '../types/plugin/PlatePlugin';\n\nexport const setDefaultPlugin = <\n  P = PluginOptions,\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  plugin: PlatePlugin<P, V, E>\n): WithPlatePlugin<P, V, E> => {\n  if (plugin.type === undefined) plugin.type = plugin.key;\n  if (!plugin.options) plugin.options = {} as any;\n  if (!plugin.inject) plugin.inject = {};\n  if (!plugin.editor) plugin.editor = {};\n\n  return plugin as WithPlatePlugin<P, V, E>;\n};\n","import type { Value } from '@udecode/slate';\n\nimport castArray from 'lodash/castArray.js';\n\nimport type { PlateEditor } from '../types/PlateEditor';\n\n/** Get plugin keys by types */\nexport const getKeysByTypes = <V extends Value>(\n  editor: PlateEditor<V>,\n  type: string | string[]\n) => {\n  const types = castArray<string>(type);\n\n  const found = Object.values(editor.pluginsByKey).filter((plugin) => {\n    return types.includes(plugin.type);\n  });\n\n  return found.map((p) => p.key);\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\n\nimport { getKeysByTypes } from './getKeysByTypes';\n\n/** Get plugin key by type */\nexport const getKeyByType = <V extends Value>(\n  editor: PlateEditor<V>,\n  type: string\n): string | undefined => {\n  return getKeysByTypes<V>(editor, type)[0];\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type { PluginKey } from '../types/plugin/PlatePluginKey';\n\nimport { getPlugin } from './getPlugin';\n\nexport const getPluginInjectProps = <V extends Value>(\n  editor: PlateEditor<V>,\n  key: PluginKey\n) => getPlugin<{}, V>(editor, key).inject?.props ?? {};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type { PluginKey } from '../types/plugin/PlatePluginKey';\n\nimport { getPlugin } from './getPlugin';\n\nexport const getPluginOptions = <\n  P,\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  key: PluginKey\n): P => getPlugin<P, V, E>(editor, key).options ?? ({} as P);\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\n\nimport { getPluginType } from './getPluginType';\n\n/** Get plugin types option by plugin keys. */\nexport const getPluginTypes = <V extends Value>(\n  editor: PlateEditor<V>,\n  keys: string[]\n) => keys.map((key) => getPluginType(editor, key));\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type { PlatePlugin, PluginOptions } from '../types/plugin/PlatePlugin';\n\n/** Get `editor.plugins` */\nexport const getPlugins = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E\n): PlatePlugin<PluginOptions, V, E>[] => {\n  return (editor?.plugins as PlatePlugin<PluginOptions, V, E>[]) ?? [];\n};\n","import type { Value } from '@udecode/slate';\nimport type { AnyObject } from '@udecode/utils';\n\nimport { clsx } from 'clsx';\nimport pick from 'lodash/pick.js';\n\nimport type { PlateRenderNodeProps } from '../types/PlateRenderNodeProps';\nimport type { WithPlatePlugin } from '../types/plugin/PlatePlugin';\n\nimport { getSlateClass } from './misc/getSlateClass';\n\n/**\n * Override node props with plugin props. Allowed properties in\n * `props.element.attributes` are passed as `nodeProps`. Extend the class name\n * with the node type.\n */\nexport const getRenderNodeProps = <V extends Value>({\n  attributes,\n  dangerouslyAllowAttributes,\n  nodeProps,\n  props,\n  type,\n}: {\n  attributes?: AnyObject;\n  dangerouslyAllowAttributes?: string[];\n  nodeProps: PlateRenderNodeProps<V>;\n} & Pick<WithPlatePlugin<V>, 'props' | 'type'>): PlateRenderNodeProps<V> => {\n  let newProps: AnyObject = {};\n\n  if (props) {\n    newProps =\n      (typeof props === 'function' ? props(nodeProps as any) : props) ?? {};\n  }\n  if (!newProps.nodeProps && attributes) {\n    /**\n     * WARNING: Improper use of `dangerouslyAllowAttributes` WILL make your\n     * application vulnerable to cross-site scripting (XSS) or information\n     * exposure attacks.\n     *\n     * @see {@link PlatePlugin.dangerouslyAllowAttributes}\n     */\n    newProps.nodeProps = pick(attributes, dangerouslyAllowAttributes ?? []);\n  }\n\n  nodeProps = { ...nodeProps, ...newProps };\n\n  if (nodeProps.nodeProps) {\n    // remove attributes values that are undefined\n    Object.keys(nodeProps.nodeProps).forEach((key) => {\n      if (nodeProps.nodeProps?.[key] === undefined) {\n        delete nodeProps.nodeProps?.[key];\n      }\n    });\n  }\n\n  const { className } = nodeProps;\n\n  return { ...nodeProps, className: clsx(getSlateClass(type), className) };\n};\n","/** Get slate class name: slate-<type> */\nexport const getSlateClass = (type: string) => `slate-${type}`;\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type {\n  PlatePlugin,\n  PluginOptions,\n  WithPlatePlugin,\n} from '../types/plugin/PlatePlugin';\nimport type { PluginKey } from '../types/plugin/PlatePluginKey';\n\nimport { getKeysByTypes } from './getKeysByTypes';\n\n/** Map plugin inject props to injected plugin */\nexport const mapInjectPropsToPlugin = <\n  P = PluginOptions,\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  plugin: WithPlatePlugin<P, V, E>,\n  injectedPlugin: Partial<PlatePlugin>\n) => {\n  const validTypes = plugin.inject.props?.validTypes;\n\n  if (!validTypes) return;\n\n  const keys = getKeysByTypes(editor, validTypes);\n\n  const injected: Record<PluginKey, Partial<PlatePlugin>> = {};\n\n  keys.forEach((key) => {\n    injected[key] = injectedPlugin;\n  });\n\n  return {\n    inject: {\n      pluginsByKey: injected,\n    },\n  };\n};\n","import type { TNode } from '@udecode/slate';\n\nimport merge from 'lodash/merge.js';\n\nimport {\n  type ApplyDeepToNodesOptions,\n  applyDeepToNodes,\n} from './applyDeepToNodes';\n\n/** Recursively merge a source object to children nodes with a query. */\nexport const mergeDeepToNodes = <N extends TNode>(\n  options: Omit<ApplyDeepToNodesOptions<N>, 'apply'>\n) => {\n  applyDeepToNodes({ ...options, apply: merge });\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type { NoInfer } from '../types/misc/NoInfer';\nimport type {\n  PlatePlugin,\n  PluginOptions,\n  WithPlatePlugin,\n} from '../types/plugin/PlatePlugin';\n\nexport const mockPlugin = <\n  P = PluginOptions,\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  plugin?: Partial<PlatePlugin<NoInfer<P>>>\n): WithPlatePlugin<NoInfer<P>, V, E> =>\n  ({\n    editor: {} as any,\n    inject: {} as any,\n    key: '',\n    options: {} as any,\n    type: '',\n    ...plugin,\n  }) as any;\n","import {\n  type EDescendant,\n  type TDescendant,\n  type TEditor,\n  type Value,\n  isElement,\n  isText,\n} from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\n\nimport { ELEMENT_DEFAULT } from '../constants';\nimport { getPluginType } from './getPluginType';\n\nconst isInlineNode =\n  <V extends Value>(editor: Pick<TEditor<V>, 'isInline'>) =>\n  (node: EDescendant<V>) =>\n    isText(node) || (isElement(node) && editor.isInline(node));\n\nconst makeBlockLazy = (type: string) => (): TDescendant => ({\n  children: [],\n  type,\n});\n\nconst hasDifferentChildNodes = <N extends TDescendant>(\n  descendants: N[],\n  isInline: (node: N) => boolean\n): boolean => {\n  return descendants.some((descendant, index, arr) => {\n    const prevDescendant = arr[index - 1];\n\n    if (index !== 0) {\n      return isInline(descendant) !== isInline(prevDescendant);\n    }\n\n    return false;\n  });\n};\n\n/**\n * Handles 3rd constraint: \"Block nodes can only contain other blocks, or inline\n * and text nodes.\"\n */\nconst normalizeDifferentNodeTypes = <N extends TDescendant>(\n  descendants: N[],\n  isInline: (node: N) => boolean,\n  makeDefaultBlock: () => N\n): N[] => {\n  const hasDifferentNodes = hasDifferentChildNodes(descendants, isInline);\n\n  const { fragment } = descendants.reduce(\n    (memo, node) => {\n      if (hasDifferentNodes && isInline(node)) {\n        let block = memo.precedingBlock;\n\n        if (!block) {\n          block = makeDefaultBlock();\n          memo.precedingBlock = block;\n          memo.fragment.push(block);\n        }\n\n        (block.children as N[]).push(node);\n      } else {\n        memo.fragment.push(node);\n        memo.precedingBlock = null;\n      }\n\n      return memo;\n    },\n    {\n      fragment: [] as N[],\n      precedingBlock: null as N | null,\n    }\n  );\n\n  return fragment;\n};\n\n/**\n * Handles 1st constraint: \"All Element nodes must contain at least one Text\n * descendant.\"\n */\nconst normalizeEmptyChildren = <N extends TDescendant>(\n  descendants: N[]\n): N[] => {\n  if (descendants.length === 0) {\n    return [{ text: '' } as N];\n  }\n\n  return descendants;\n};\n\nconst normalize = <N extends TDescendant>(\n  descendants: N[],\n  isInline: (node: N) => boolean,\n  makeDefaultBlock: () => N\n): N[] => {\n  descendants = normalizeEmptyChildren(descendants);\n  descendants = normalizeDifferentNodeTypes(\n    descendants,\n    isInline,\n    makeDefaultBlock\n  );\n\n  descendants = descendants.map((node) => {\n    if (isElement(node)) {\n      return {\n        ...node,\n        children: normalize(node.children as N[], isInline, makeDefaultBlock),\n      };\n    }\n\n    return node;\n  });\n\n  return descendants;\n};\n\n/** Normalize the descendants to a valid document fragment. */\nexport const normalizeDescendantsToDocumentFragment = <V extends Value>(\n  editor: PlateEditor<V>,\n  { descendants }: { descendants: EDescendant<V>[] }\n): EDescendant<V>[] => {\n  const isInline = isInlineNode<V>(editor);\n  const defaultType = getPluginType(editor, ELEMENT_DEFAULT);\n  const makeDefaultBlock = makeBlockLazy(defaultType);\n\n  return normalize(descendants, isInline, makeDefaultBlock as any);\n};\n","import type { Value } from '@udecode/slate';\n\nimport cloneDeep from 'lodash/cloneDeep.js';\nimport isEqual from 'lodash/isEqual.js';\n\nimport type { PlateEditor } from '../types';\n\n/** Normalize initial value from editor plugins. Set into plate store if diff. */\nexport const normalizeInitialValue = <V extends Value>(\n  editor: PlateEditor<V>,\n  value: V\n) => {\n  let normalizedValue = cloneDeep(value);\n\n  editor.plugins.forEach((p) => {\n    const _normalizedValue = p.normalizeInitialValue?.(normalizedValue);\n\n    if (_normalizedValue) {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      normalizedValue = _normalizedValue;\n    }\n  });\n\n  if (!isEqual(value, normalizedValue)) {\n    return normalizedValue;\n  }\n};\n","import type { Range } from 'slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type { TEditableProps } from '../types/slate-react/TEditableProps';\n\n/**\n * @see {@link Decorate} .\n * Optimization: return undefined if empty list so Editable uses a memo.\n */\nexport const pipeDecorate = (\n  editor: PlateEditor,\n  decorateProp?: TEditableProps['decorate']\n): TEditableProps['decorate'] => {\n  const decorates = editor.plugins.flatMap(\n    (plugin) => plugin.decorate?.(editor, plugin) ?? []\n  );\n\n  if (decorateProp) {\n    decorates.push(decorateProp);\n  }\n  if (decorates.length === 0) return;\n\n  return (entry) => {\n    let ranges: Range[] = [];\n\n    const addRanges = (newRanges?: Range[]) => {\n      if (newRanges?.length) ranges = [...ranges, ...newRanges];\n    };\n\n    decorates.forEach((decorate) => {\n      addRanges(decorate(entry));\n    });\n\n    return ranges;\n  };\n};\n","import type React from 'react';\n\nimport type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type {\n  DOMHandlers,\n  HandlerReturnType,\n} from '../types/plugin/DOMHandlers';\nimport type { TEditableProps } from '../types/slate-react/TEditableProps';\n\nexport const convertDomEventToSyntheticEvent = (\n  domEvent: Event\n): React.SyntheticEvent<unknown, unknown> => {\n  let propagationStopped = false;\n\n  return {\n    ...domEvent,\n    bubbles: domEvent.bubbles,\n    cancelable: domEvent.cancelable,\n    currentTarget: domEvent.currentTarget!,\n    defaultPrevented: domEvent.defaultPrevented,\n    eventPhase: domEvent.eventPhase,\n    isDefaultPrevented: () => domEvent.defaultPrevented,\n    isPropagationStopped: () => propagationStopped,\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: domEvent,\n    persist: () => {\n      throw new Error(\n        'persist is not implemented for synthetic events created using convertDomEventToSyntheticEvent'\n      );\n    },\n    preventDefault: () => domEvent.preventDefault(),\n    stopPropagation: () => {\n      propagationStopped = true;\n      domEvent.stopPropagation();\n    },\n    target: domEvent.target!,\n    timeStamp: domEvent.timeStamp,\n    type: domEvent.type,\n  };\n};\n\n/** Check if an event is overrided by a handler. */\nexport const isEventHandled = <\n  EventType extends React.SyntheticEvent<unknown, unknown>,\n>(\n  event: EventType,\n  handler?: (event: EventType) => boolean | void\n) => {\n  if (!handler) {\n    return false;\n  }\n\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event);\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n\n  return event.isPropagationStopped();\n};\n\n/**\n * Generic pipe for handlers.\n *\n * - Get all the plugins handlers by `handlerKey`.\n * - If there is no plugin handler or editable prop handler for this key, return\n *   `undefined`.\n * - Return a handler calling all the plugins handlers then the prop handler.\n * - Any handler returning true will stop the next handlers to be called,\n *   including slate internal handler.\n */\nexport const pipeHandler = <V extends Value, K extends keyof DOMHandlers<V>>(\n  editor: PlateEditor<V>,\n  {\n    editableProps,\n    handlerKey,\n  }: { editableProps?: TEditableProps | null; handlerKey: K }\n): ((event: any) => void) | undefined => {\n  let pluginsHandlers: ((event: any) => HandlerReturnType)[] = [];\n  pluginsHandlers = editor.plugins.flatMap(\n    (plugin) => plugin.handlers?.[handlerKey]?.(editor, plugin) ?? []\n  );\n\n  const propsHandler = editableProps?.[handlerKey] as (\n    event: any\n  ) => HandlerReturnType | undefined;\n\n  if (pluginsHandlers.length === 0 && !propsHandler) return;\n\n  return (event: any) => {\n    const isDomEvent = event instanceof Event;\n    const handledEvent = isDomEvent\n      ? convertDomEventToSyntheticEvent(event)\n      : event;\n\n    const eventIsHandled = pluginsHandlers.some((handler) =>\n      isEventHandled(handledEvent, handler)\n    );\n\n    if (eventIsHandled) return true;\n\n    return isEventHandled(handledEvent, propsHandler);\n  };\n};\n","import type React from 'react';\n\nimport {\n  type EElement,\n  type EText,\n  type Value,\n  isElement,\n} from '@udecode/slate';\nimport { type AnyObject, isDefined } from '@udecode/utils';\nimport { clsx } from 'clsx';\n\nimport type { TransformOptions } from '../types';\nimport type { PlateEditor } from '../types/PlateEditor';\nimport type { WithPlatePlugin } from '../types/plugin/PlatePlugin';\n\nexport interface GetInjectPropsOptions<V extends Value = Value> {\n  /** Existing className. */\n  className?: string;\n\n  /** Style value or className key. */\n  element?: EElement<V>;\n\n  /** Existing style. */\n  style?: React.CSSProperties;\n\n  /** Style value or className key. */\n  text?: EText<V>;\n}\n\nexport interface GetInjectPropsReturnType extends AnyObject {\n  className?: string;\n  style?: React.CSSProperties;\n}\n\n/**\n * Return if `element`, `text`, `nodeKey` is defined. Return if `node.type` is\n * not in `validTypes` (if defined). Return if `value = node[nodeKey]` is not in\n * `validNodeValues` (if defined). If `classNames[value]` is defined, override\n * `className` with it. If `styleKey` is defined, override `style` with\n * `[styleKey]: value`.\n */\nexport const pluginInjectProps = <V extends Value>(\n  editor: PlateEditor<V>,\n  { inject: { props }, key }: WithPlatePlugin<{}, V>,\n  nodeProps: GetInjectPropsOptions<V>\n): GetInjectPropsReturnType | undefined => {\n  const { className, element, style, text } = nodeProps;\n\n  const node = element ?? text;\n\n  if (!node) return;\n  if (!props) return;\n\n  const {\n    classNames,\n    defaultNodeValue,\n    nodeKey = key,\n    query,\n    styleKey = nodeKey as any,\n    transformClassName,\n    transformNodeValue,\n    transformProps,\n    transformStyle,\n    validNodeValues,\n    validTypes,\n  } = props;\n\n  const queryResult = query?.(props, nodeProps);\n\n  if (\n    !queryResult &&\n    validTypes &&\n    isElement(node) &&\n    node.type &&\n    !validTypes.includes(node.type)\n  ) {\n    return;\n  }\n\n  const nodeValue = node[nodeKey!] as any;\n\n  // early return if there is no reason to inject props\n  if (\n    !queryResult &&\n    (!isDefined(nodeValue) ||\n      (validNodeValues && !validNodeValues.includes(nodeValue)) ||\n      nodeValue === defaultNodeValue)\n  ) {\n    return;\n  }\n\n  const transformOptions: TransformOptions<V> = { ...nodeProps, nodeValue };\n  const value = transformNodeValue?.(transformOptions) ?? nodeValue;\n  transformOptions.value = value;\n\n  let res: GetInjectPropsReturnType = {};\n\n  if (element) {\n    res.className = clsx(className, `slate-${nodeKey}-${nodeValue}`);\n  }\n  if (classNames?.[nodeValue] || transformClassName) {\n    res.className =\n      transformClassName?.(transformOptions) ??\n      clsx(className, classNames?.[value]);\n  }\n  if (styleKey) {\n    res.style = transformStyle?.(transformOptions) ?? {\n      ...style,\n      [styleKey as string]: value,\n    };\n  }\n  if (transformProps) {\n    res = transformProps(transformOptions, res) ?? res;\n  }\n\n  return res;\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\n\nimport { pluginInjectProps } from './pluginInjectProps';\n\n/** Inject plugin props, editor. */\nexport const pipeInjectProps = <V extends Value>(\n  editor: PlateEditor<V>,\n  nodeProps: any\n) => {\n  editor.plugins.forEach((plugin) => {\n    if (plugin.inject.props) {\n      const props = pluginInjectProps(editor, plugin, nodeProps);\n\n      if (props) {\n        nodeProps = {\n          ...nodeProps,\n          ...props,\n        };\n      }\n    }\n  });\n\n  return { ...nodeProps, editor };\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../types/PlateEditor';\n\nexport const pipeOnChange = <V extends Value>(editor: PlateEditor<V>) => {\n  const onChanges = editor.plugins.flatMap(\n    (plugin) => plugin.handlers?.onChange?.(editor, plugin) ?? []\n  );\n\n  return (nodes: V) => {\n    return onChanges.some((handler) => {\n      if (!handler) {\n        return false;\n      }\n\n      // The custom event handler may return a boolean to specify whether the event\n      // shall be treated as being handled or not.\n      const shouldTreatEventAsHandled = handler(nodes);\n\n      if (shouldTreatEventAsHandled != null) {\n        return shouldTreatEventAsHandled;\n      }\n\n      return false;\n    });\n  };\n};\n","import type React from 'react';\n\nimport { IS_APPLE } from '@udecode/utils';\nimport { isKeyHotkey } from 'is-hotkey';\n\nexport { isHotkey } from 'is-hotkey';\n\n/** Hotkey mappings for each platform. */\nconst HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  insertSoftBreak: 'shift+enter',\n  italic: 'mod+i',\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  splitBlock: 'enter',\n  tab: 'tab',\n  undo: 'mod+z',\n  untab: 'shift+tab',\n};\n\nconst APPLE_HOTKEYS = {\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t',\n};\n\nconst WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z'],\n};\n\n/** Create a platform-aware hotkey checker. */\n\nexport const createHotkey = (key: string) => {\n  const generic = (HOTKEYS as any)[key];\n  const apple = (APPLE_HOTKEYS as any)[key];\n  const windows = (WINDOWS_HOTKEYS as any)[key];\n  const isGeneric = generic && isKeyHotkey(generic);\n  const isApple = apple && isKeyHotkey(apple);\n  const isWindows = windows && isKeyHotkey(windows);\n\n  return (event: React.KeyboardEvent) => {\n    if (isGeneric?.(event)) return true;\n    if (IS_APPLE && isApple?.(event)) return true;\n    if (!IS_APPLE && isWindows?.(event)) return true;\n\n    return false;\n  };\n};\n\nexport const sharedHotkeys = {\n  isBold: createHotkey('bold'),\n  isCompose: createHotkey('compose'),\n  isDeleteBackward: createHotkey('deleteBackward'),\n  isDeleteForward: createHotkey('deleteForward'),\n  isDeleteLineBackward: createHotkey('deleteLineBackward'),\n  isDeleteLineForward: createHotkey('deleteLineForward'),\n  isDeleteWordBackward: createHotkey('deleteWordBackward'),\n  isDeleteWordForward: createHotkey('deleteWordForward'),\n  isExtendBackward: createHotkey('extendBackward'),\n  isExtendForward: createHotkey('extendForward'),\n  isExtendLineBackward: createHotkey('extendLineBackward'),\n  isExtendLineForward: createHotkey('extendLineForward'),\n  isItalic: createHotkey('italic'),\n  isMoveBackward: createHotkey('moveBackward'),\n  isMoveForward: createHotkey('moveForward'),\n  isMoveLineBackward: createHotkey('moveLineBackward'),\n  isMoveLineForward: createHotkey('moveLineForward'),\n  isMoveWordBackward: createHotkey('moveWordBackward'),\n  isMoveWordForward: createHotkey('moveWordForward'),\n  isRedo: createHotkey('redo'),\n  isSoftBreak: createHotkey('insertSoftBreak'),\n  isSplitBlock: createHotkey('splitBlock'),\n  isTransposeCharacter: createHotkey('transposeCharacter'),\n  isUndo: createHotkey('undo'),\n};\n","import React from 'react';\n\ntype RefComponent<P, R> = {\n  ref?: React.Ref<R>;\n} & React.FC<P>;\n\n/* eslint-disable react/display-name */\nexport const withHOC = <ComponentProps, HOCProps, ComponentRef, HOCRef>(\n  HOC: RefComponent<HOCProps, HOCRef>,\n  Component: RefComponent<ComponentProps, ComponentRef>,\n  hocProps?: Omit<HOCProps, 'children'>,\n  hocRef?: React.Ref<HOCRef>\n) =>\n  React.forwardRef<ComponentRef, ComponentProps>((props, componentRef) => (\n    <HOC {...(hocProps as any)} ref={hocRef}>\n      <Component {...props} ref={componentRef} />\n    </HOC>\n  ));\n","import { ELEMENT_DEFAULT } from '../constants';\nimport { createPluginFactory } from '../utils/createPluginFactory';\nimport { getPluginType } from '../utils/index';\n\nexport const KEY_NODE_FACTORY = 'nodeFactory';\n\nexport const createNodeFactoryPlugin = createPluginFactory({\n  key: KEY_NODE_FACTORY,\n  withOverrides: (editor) => {\n    editor.blockFactory = (node) => ({\n      children: [{ text: '' }],\n      type: getPluginType(editor, ELEMENT_DEFAULT),\n      ...node,\n    });\n    editor.childrenFactory = () => [editor.blockFactory()];\n\n    return editor;\n  },\n});\n","import type { TRange } from '@udecode/slate';\n\nimport { createPluginFactory } from '../utils/createPluginFactory';\n\nexport const KEY_PREV_SELECTION = 'prevSelection';\n\nexport const createPrevSelectionPlugin = createPluginFactory({\n  handlers: {\n    onKeyDown: (editor) => (e) => {\n      // React 16.x needs this event to be persistented due to it's event pooling implementation.\n      // https://reactjs.org/docs/legacy-event-pooling.html\n      e.persist();\n      editor.currentKeyboardEvent = e;\n    },\n  },\n  key: KEY_PREV_SELECTION,\n  withOverrides: (editor) => {\n    const { apply } = editor;\n\n    editor.apply = (operation) => {\n      if (operation.type === 'set_selection') {\n        const { properties } = operation;\n\n        editor.prevSelection = properties as TRange | null;\n\n        apply(operation);\n\n        editor.currentKeyboardEvent = null;\n\n        return;\n      }\n\n      apply(operation);\n    };\n\n    return editor;\n  },\n});\n","export const FOCUS_EDITOR_EVENT = 'focus-editor-event';\n\nexport const BLUR_EDITOR_EVENT = 'blur-editor-event';\n","import { createPluginFactory } from '../../utils/createPluginFactory';\nimport { BLUR_EDITOR_EVENT, FOCUS_EDITOR_EVENT } from './constants';\nimport { eventEditorActions, eventEditorSelectors } from './eventEditorStore';\n\nexport const KEY_EVENT_EDITOR = 'event-editor';\n\nexport const createEventEditorPlugin = createPluginFactory({\n  handlers: {\n    onBlur: (editor) => () => {\n      const focus = eventEditorSelectors.focus();\n\n      if (focus === editor.id) {\n        eventEditorActions.focus(null);\n      }\n\n      eventEditorActions.blur(editor.id);\n\n      document.dispatchEvent(\n        new CustomEvent(BLUR_EDITOR_EVENT, {\n          detail: { id: editor.id },\n        })\n      );\n    },\n    onFocus: (editor) => () => {\n      eventEditorActions.focus(editor.id);\n\n      document.dispatchEvent(\n        new CustomEvent(FOCUS_EDITOR_EVENT, {\n          detail: { id: editor.id },\n        })\n      );\n    },\n  },\n  key: KEY_EVENT_EDITOR,\n});\n","import type { PlateId } from '../../../client/stores/plate';\n\nimport { eventEditorSelectors } from './eventEditorStore';\n\nexport const getEventPlateId = (id?: PlateId) => {\n  if (id) return id;\n\n  const focus = eventEditorSelectors.focus();\n\n  if (focus) return focus;\n\n  const blur = eventEditorSelectors.blur();\n\n  if (blur) return blur;\n\n  return eventEditorSelectors.last() ?? 'plate';\n};\n","export const CARRIAGE_RETURN = '\\u000D';\n\nexport const LINE_FEED = '\\u000A';\n\nexport const NO_BREAK_SPACE = '\\u00A0';\n\nexport const SPACE = '\\u0020';\n\nexport const TAB = '\\u0009';\n\nexport const ZERO_WIDTH_SPACE = '\\u200B';\n","import type { TrimEndRule, TrimStartRule } from './types';\n\nexport const collapseString = (\n  text: string,\n  {\n    shouldCollapseWhiteSpace = true,\n    trimEnd = 'collapse',\n    trimStart = 'collapse',\n    whiteSpaceIncludesNewlines = true,\n  }: {\n    shouldCollapseWhiteSpace?: boolean;\n    trimEnd?: TrimEndRule;\n    trimStart?: TrimStartRule;\n    whiteSpaceIncludesNewlines?: boolean;\n  } = {}\n) => {\n  if (trimStart === 'all') {\n    text = text.replace(/^\\s+/, '');\n  }\n  if (trimEnd === 'single-newline') {\n    // Strip at most one newline from the end\n    text = text.replace(/\\n$/, '');\n  }\n  if (shouldCollapseWhiteSpace) {\n    if (whiteSpaceIncludesNewlines) {\n      text = text.replaceAll(/\\s+/g, ' ');\n    } else {\n      // Collapse horizontal whitespace\n      text = text.replaceAll(/[^\\S\\n\\r]+/g, ' ');\n\n      /**\n       * Trim horizontal whitespace from the start and end of lines (behavior of\n       * pre-line).\n       */\n      text = text.replaceAll(/^[^\\S\\n\\r]+/gm, '');\n      text = text.replaceAll(/[^\\S\\n\\r]+$/gm, '');\n    }\n  }\n\n  return text;\n};\n","/**\n * # Methodology\n *\n * ## Step 1. Get the list of all standard tag names\n *\n * Go to https://developer.mozilla.org/en-US/docs/Web/HTML/Element and run the\n * following in the console to generate a JSON array of tag names:\n *\n * ```js\n * JSON.stringify(\n *   Array.from(document.querySelectorAll('article table td:first-child'))\n *     .map((td) => {\n *       const body = document.createElement('body');\n *       body.innerHTML = td.textContent;\n *       return body.firstChild?.tagName;\n *     })\n *     .filter((tagName) => tagName)\n * );\n * ```\n *\n * Output (as of 2023-11-06):\n *\n * ```json\n * '[\"BASE\",\"LINK\",\"META\",\"STYLE\",\"TITLE\",\"ADDRESS\",\"ARTICLE\",\"ASIDE\",\"FOOTER\",\"HEADER\",\"H1\",\"HGROUP\",\"MAIN\",\"NAV\",\"SECTION\",\"SEARCH\",\"BLOCKQUOTE\",\"DD\",\"DIV\",\"DL\",\"DT\",\"FIGCAPTION\",\"FIGURE\",\"HR\",\"LI\",\"MENU\",\"OL\",\"P\",\"PRE\",\"UL\",\"A\",\"ABBR\",\"B\",\"BDI\",\"BDO\",\"BR\",\"CITE\",\"CODE\",\"DATA\",\"DFN\",\"EM\",\"I\",\"KBD\",\"MARK\",\"Q\",\"RP\",\"RT\",\"RUBY\",\"S\",\"SAMP\",\"SMALL\",\"SPAN\",\"STRONG\",\"SUB\",\"SUP\",\"TIME\",\"U\",\"VAR\",\"WBR\",\"AREA\",\"AUDIO\",\"IMG\",\"MAP\",\"TRACK\",\"VIDEO\",\"EMBED\",\"IFRAME\",\"OBJECT\",\"PICTURE\",\"PORTAL\",\"SOURCE\",\"svg\",\"math\",\"CANVAS\",\"NOSCRIPT\",\"SCRIPT\",\"DEL\",\"INS\",\"TABLE\",\"BUTTON\",\"DATALIST\",\"FIELDSET\",\"FORM\",\"INPUT\",\"LABEL\",\"LEGEND\",\"METER\",\"OPTGROUP\",\"OPTION\",\"OUTPUT\",\"PROGRESS\",\"SELECT\",\"TEXTAREA\",\"DETAILS\",\"DIALOG\",\"SUMMARY\",\"SLOT\",\"TEMPLATE\",\"ACRONYM\",\"BIG\",\"CENTER\",\"CONTENT\",\"DIR\",\"FONT\",\"IMG\",\"MARQUEE\",\"MENUITEM\",\"NOBR\",\"NOEMBED\",\"NOFRAMES\",\"PARAM\",\"PLAINTEXT\",\"RB\",\"RTC\",\"SHADOW\",\"STRIKE\",\"TT\",\"XMP\"]'\n * ```\n *\n * ## Step 2. For each tag name, determine the default browser style\n *\n * Open an empty HTML file in the browser and run the following in the console:\n *\n * ```js\n * const tagNames = JSON.parse(<JSON string from step 1>);\n *\n * JSON.stringify(\n *   tagNames.filter((tagName) => {\n *     const element = document.createElement(tagName);\n *     document.body.appendChild(element);\n *     const display = window.getComputedStyle(element).display;\n *     element.remove();\n *     return display.startsWith('inline');\n *   })\n * );\n * ```\n *\n * Place the result in the array below (accurate as of 2023-11-06).\n */\n\nexport const inlineTagNames = new Set([\n  'A',\n  'ABBR',\n  'B',\n  'BDI',\n  'BDO',\n  'BR',\n  'CITE',\n  'CODE',\n  'DATA',\n  'DFN',\n  'EM',\n  'I',\n  'KBD',\n  'MARK',\n  'Q',\n  'S',\n  'SAMP',\n  'SMALL',\n  'SPAN',\n  'STRONG',\n  'SUB',\n  'SUP',\n  'TIME',\n  'U',\n  'VAR',\n  'WBR',\n  'IMG',\n  'MAP',\n  'TRACK',\n  'VIDEO',\n  'EMBED',\n  'IFRAME',\n  'OBJECT',\n  'PICTURE',\n  'PORTAL',\n  'SOURCE',\n  'svg',\n  'math',\n  'CANVAS',\n  'DEL',\n  'INS',\n  'BUTTON',\n  'INPUT',\n  'LABEL',\n  'METER',\n  'OUTPUT',\n  'PROGRESS',\n  'SELECT',\n  'TEXTAREA',\n  'ACRONYM',\n  'BIG',\n  'CONTENT',\n  'FONT',\n  'IMG',\n  'MARQUEE',\n  'MENUITEM',\n  'NOBR',\n  'SHADOW',\n  'STRIKE',\n  'TT',\n]);\n","export const isHtmlElement = (node: Node): node is Element =>\n  node.nodeType === Node.ELEMENT_NODE;\n","import { inlineTagNames } from './inlineTagNames';\nimport { isHtmlElement } from './isHtmlElement';\n\nexport const isHtmlInlineElement = (node: Node): boolean => {\n  if (!isHtmlElement(node)) return false;\n\n  const element = node as HTMLElement;\n\n  const tagNameIsInline = inlineTagNames.has(element.tagName);\n\n  /**\n   * Valid display values include 'inline flow'. We only care about the first\n   * part.\n   */\n  const displayProperty = element.style.display.split(' ')[0];\n\n  if (displayProperty === '') {\n    return tagNameIsInline;\n  }\n  if (displayProperty.startsWith('inline')) {\n    return true;\n  }\n  if (displayProperty === 'inherit' && element.parentElement) {\n    return isHtmlInlineElement(element.parentElement);\n  }\n  /**\n   * Handle all special values manually, so that any unhandled values can be\n   * assumed to be block.\n   *\n   * Note: Ideally, content inside `display: none` elements should not be\n   * parsed. However, if such elements are parsed, it's best for their inline or\n   * block status to be left unchanged.\n   */\n  if (\n    ['contents', 'initial', 'none', 'revert', 'revert-layer', 'unset'].includes(\n      displayProperty\n    )\n  ) {\n    return tagNameIsInline;\n  }\n\n  return false;\n};\n","export const isHtmlText = (node: Node): node is Text =>\n  node.nodeType === Node.TEXT_NODE;\n","import { isHtmlElement } from './isHtmlElement';\nimport { isHtmlInlineElement } from './isHtmlInlineElement';\n\nexport const isHtmlBlockElement = (node: Node): boolean => {\n  if (!isHtmlElement(node)) return false;\n\n  const element = node as HTMLElement;\n\n  return !isHtmlInlineElement(element);\n};\n","import { isHtmlBlockElement } from '../isHtmlBlockElement';\n\nexport const isLastNonEmptyTextOfInlineFormattingContext = (\n  initialText: Text\n): boolean => {\n  let currentNode: Node | null = initialText;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (currentNode.nextSibling) {\n      currentNode = currentNode.nextSibling;\n    } else {\n      // If there is no next sibling, ascend to the parent node\n      currentNode = currentNode.parentElement;\n\n      // If the parent node is a block, we've reached the end\n      if (currentNode && isHtmlBlockElement(currentNode)) {\n        return true;\n      }\n\n      // Otherwise, continue to the next sibling of the parent node\n      currentNode = currentNode?.nextSibling || null;\n    }\n    // If there's no next node, we've reached the end\n    if (!currentNode) {\n      return true;\n    }\n    // If the next node is a block, we've reached the end\n    if (isHtmlBlockElement(currentNode)) {\n      return true;\n    }\n    // If the next node is a non-empty text node, we're not at the end\n    if ((currentNode.textContent || '').length > 0) {\n      return false;\n    }\n\n    // Otherwise, continue to the next node\n  }\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nexport const upsertInlineFormattingContext = (\n  state: CollapseWhiteSpaceState\n) => {\n  if (state.inlineFormattingContext) {\n    state.inlineFormattingContext.atStart = false;\n  } else {\n    state.inlineFormattingContext = {\n      atStart: true,\n      lastHasTrailingWhiteSpace: false,\n    };\n  }\n};\n\nexport const endInlineFormattingContext = (state: CollapseWhiteSpaceState) => {\n  state.inlineFormattingContext = null;\n};\n","import type {\n  CollapseWhiteSpaceState,\n  TrimEndRule,\n  TrimStartRule,\n} from './types';\n\nimport { collapseString } from './collapseString';\nimport { isLastNonEmptyTextOfInlineFormattingContext } from './isLastNonEmptyTextOfInlineFormattingContext';\nimport { upsertInlineFormattingContext } from './stateTransforms';\n\nexport const collapseWhiteSpaceText = (\n  text: Text,\n  state: CollapseWhiteSpaceState\n) => {\n  const textContent = text.textContent || '';\n  const isWhiteSpaceOnly = textContent.trim() === '';\n\n  /**\n   * Do not start an inline formatting context with a text node containing only\n   * white space.\n   */\n  if (state.inlineFormattingContext || !isWhiteSpaceOnly) {\n    upsertInlineFormattingContext(state);\n  }\n\n  const { whiteSpaceRule } = state;\n\n  /**\n   * Note: Due to the way HTML strings are parsed in htmlStringToDOMNode, up to\n   * one newline is already trimmed from the start of text nodes inside <pre>\n   * elements. If we do so again here, we may remove too many newlines. This\n   * only applies to actual <pre> elements, not elements with the white-space\n   * CSS property.\n   */\n  const trimStart: TrimStartRule = (() => {\n    if (whiteSpaceRule !== 'normal') return 'collapse';\n    if (\n      !state.inlineFormattingContext ||\n      state.inlineFormattingContext.atStart ||\n      state.inlineFormattingContext.lastHasTrailingWhiteSpace\n    )\n      return 'all';\n\n    return 'collapse';\n  })();\n\n  const trimEnd: TrimEndRule = (() => {\n    if (whiteSpaceRule === 'normal') return 'collapse';\n    if (isLastNonEmptyTextOfInlineFormattingContext(text))\n      return 'single-newline';\n\n    return 'collapse';\n  })();\n\n  const shouldCollapseWhiteSpace: boolean = {\n    normal: true,\n    pre: false,\n    'pre-line': true,\n  }[whiteSpaceRule];\n\n  const whiteSpaceIncludesNewlines = whiteSpaceRule !== 'pre-line';\n\n  const collapsedTextContent = collapseString(textContent || '', {\n    shouldCollapseWhiteSpace,\n    trimEnd,\n    trimStart,\n    whiteSpaceIncludesNewlines,\n  });\n\n  if (state.inlineFormattingContext && shouldCollapseWhiteSpace) {\n    state.inlineFormattingContext.lastHasTrailingWhiteSpace =\n      collapsedTextContent.endsWith(' ');\n  }\n\n  text.textContent = collapsedTextContent;\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nimport { isHtmlElement } from '../isHtmlElement';\nimport { isHtmlText } from '../isHtmlText';\nimport { collapseWhiteSpaceChildren } from './collapseWhiteSpaceChildren';\nimport { collapseWhiteSpaceElement } from './collapseWhiteSpaceElement';\nimport { collapseWhiteSpaceText } from './collapseWhiteSpaceText';\n\nexport const collapseWhiteSpaceNode = (\n  node: Node,\n  state: CollapseWhiteSpaceState\n) => {\n  if (isHtmlElement(node)) {\n    collapseWhiteSpaceElement(node as HTMLElement, state);\n\n    return;\n  }\n  if (isHtmlText(node)) {\n    collapseWhiteSpaceText(node as Text, state);\n\n    return;\n  }\n\n  collapseWhiteSpaceChildren(node, state);\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nimport { collapseWhiteSpaceNode } from './collapseWhiteSpaceNode';\n\nexport const collapseWhiteSpaceChildren = (\n  node: Node,\n  state: CollapseWhiteSpaceState\n) => {\n  const childNodes = Array.from(node.childNodes);\n\n  for (const childNode of childNodes) {\n    collapseWhiteSpaceNode(childNode, state);\n  }\n};\n","import type { WhiteSpaceRule } from './types';\n\nexport const inferWhiteSpaceRule = (\n  element: HTMLElement\n): WhiteSpaceRule | null => {\n  const whiteSpaceProperty = element.style.whiteSpace;\n\n  switch (whiteSpaceProperty) {\n    case 'normal':\n    case 'nowrap': {\n      return 'normal';\n    }\n    case 'pre':\n    case 'pre-wrap':\n    case 'break-spaces': {\n      return 'pre';\n    }\n    case 'pre-line': {\n      return 'pre-line';\n    }\n  }\n\n  if (element.tagName === 'PRE') {\n    return 'pre';\n  }\n  if (whiteSpaceProperty === 'initial') {\n    return 'normal';\n  }\n\n  return null;\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nimport { isHtmlInlineElement } from '../isHtmlInlineElement';\nimport { collapseWhiteSpaceChildren } from './collapseWhiteSpaceChildren';\nimport { inferWhiteSpaceRule } from './inferWhiteSpaceRule';\nimport { endInlineFormattingContext } from './stateTransforms';\n\n/**\n * Note: We do not want to start an inline formatting context until we encounter\n * a text node.\n */\nexport const collapseWhiteSpaceElement = (\n  element: HTMLElement,\n  state: CollapseWhiteSpaceState\n) => {\n  const isInlineElement = isHtmlInlineElement(element);\n  const previousWhiteSpaceRule = state.whiteSpaceRule;\n  const inferredWhiteSpaceRule = inferWhiteSpaceRule(element);\n\n  if (inferredWhiteSpaceRule) {\n    state.whiteSpaceRule = inferredWhiteSpaceRule;\n  }\n  // End any existing inline formatting context\n  if (!isInlineElement) {\n    endInlineFormattingContext(state);\n  }\n\n  collapseWhiteSpaceChildren(element, state);\n\n  // Do not let inline formatting context break out of block elements\n  if (!isInlineElement) {\n    endInlineFormattingContext(state);\n  }\n\n  // Restore previous whiteSpaceRule\n  state.whiteSpaceRule = previousWhiteSpaceRule;\n};\n","import type { CollapseWhiteSpaceState } from './types';\n\nimport { collapseWhiteSpaceElement } from './collapseWhiteSpaceElement';\n\n// Entrypoint\nexport const collapseWhiteSpace = (element: HTMLElement) => {\n  const clonedElement = element.cloneNode(true) as HTMLElement;\n\n  // Mutable state object\n  const state: CollapseWhiteSpaceState = {\n    inlineFormattingContext: null,\n    whiteSpaceRule: 'normal',\n  };\n\n  collapseWhiteSpaceElement(clonedElement, state);\n\n  return clonedElement;\n};\n","import type { EDescendant, Value } from '@udecode/slate';\n\nimport { jsx } from 'slate-hyperscript';\n\nimport type { PlateEditor } from '../../../types/PlateEditor';\n\nimport { deserializeHtmlNodeChildren } from './deserializeHtmlNodeChildren';\n\njsx;\n\n/** Deserialize HTML body element to Fragment. */\nexport const htmlBodyToFragment = <V extends Value>(\n  editor: PlateEditor<V>,\n  element: HTMLElement\n): EDescendant<V>[] | undefined => {\n  if (element.nodeName === 'BODY') {\n    return jsx(\n      'fragment',\n      {},\n      deserializeHtmlNodeChildren(editor, element)\n    ) as EDescendant<V>[];\n  }\n};\n","import type { EDescendant, Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../../../types/PlateEditor';\nimport type { DeserializeHtmlChildren } from '../types';\n\nimport { deserializeHtmlNode } from './deserializeHtmlNode';\n\nexport const deserializeHtmlNodeChildren = <V extends Value>(\n  editor: PlateEditor<V>,\n  node: ChildNode | HTMLElement\n) =>\n  Array.from(node.childNodes).flatMap(\n    deserializeHtmlNode(editor)\n  ) as DeserializeHtmlChildren<EDescendant<V>>[];\n","/** Deserialize HTML to break line. */\nexport const htmlBrToNewLine = (node: ChildNode | HTMLElement) => {\n  if (node.nodeName === 'BR') {\n    return '\\n';\n  }\n};\n","import type { EDescendant, TDescendant, Value } from '@udecode/slate';\n\nimport { jsx } from 'slate-hyperscript';\n\nimport type { PlateEditor } from '../../../types/PlateEditor';\n\nimport { deserializeHtmlNodeChildren } from './deserializeHtmlNodeChildren';\nimport { pipeDeserializeHtmlElement } from './pipeDeserializeHtmlElement';\n\n/** Deserialize HTML to Element. */\nexport const htmlElementToElement = <V extends Value>(\n  editor: PlateEditor<V>,\n  element: HTMLElement\n) => {\n  const deserialized = pipeDeserializeHtmlElement(editor, element);\n\n  if (deserialized) {\n    const { node, withoutChildren } = deserialized;\n\n    let descendants =\n      node.children ??\n      (deserializeHtmlNodeChildren(editor, element) as TDescendant[]);\n\n    if (descendants.length === 0 || withoutChildren) {\n      descendants = [{ text: '' }];\n    }\n\n    return jsx('element', node, descendants) as EDescendant<V>;\n  }\n};\n","import type { Value } from '@udecode/slate';\n\nimport { type AnyObject, isDefined } from '@udecode/utils';\nimport castArray from 'lodash/castArray.js';\n\nimport type { Nullable } from '../../../types';\nimport type { PlateEditor } from '../../../types/PlateEditor';\nimport type { DeserializeHtml } from '../../../types/plugin/DeserializeHtml';\nimport type { WithPlatePlugin } from '../../../types/plugin/PlatePlugin';\n\nimport { getInjectedPlugins } from '../../../utils/getInjectedPlugins';\n\n/** Get a deserializer by type, node names, class names and styles. */\nexport const pluginDeserializeHtml = <V extends Value>(\n  editor: PlateEditor<V>,\n  plugin: WithPlatePlugin<{}, V>,\n  {\n    deserializeLeaf,\n    element: el,\n  }: { deserializeLeaf?: boolean; element: HTMLElement }\n): ({ node: AnyObject } & Nullable<DeserializeHtml>) | undefined => {\n  const {\n    deserializeHtml,\n    isElement: isElementRoot,\n    isLeaf: isLeafRoot,\n    type,\n  } = plugin;\n\n  if (!deserializeHtml) return;\n\n  const {\n    attributeNames,\n    isElement: isElementRule,\n    isLeaf: isLeafRule,\n    query,\n    rules,\n  } = deserializeHtml;\n  let { getNode } = deserializeHtml;\n\n  const isElement = isElementRule || isElementRoot;\n  const isLeaf = isLeafRule || isLeafRoot;\n\n  if (!deserializeLeaf && !isElement) {\n    return;\n  }\n  if (deserializeLeaf && !isLeaf) {\n    return;\n  }\n  if (rules) {\n    const isValid = rules.some(\n      ({ validAttribute, validClassName, validNodeName = '*', validStyle }) => {\n        if (validNodeName) {\n          const validNodeNames = castArray<string>(validNodeName);\n\n          // Ignore if el nodeName is not included in rule validNodeNames (except *).\n          if (\n            validNodeNames.length > 0 &&\n            !validNodeNames.includes(el.nodeName) &&\n            validNodeName !== '*'\n          )\n            return false;\n        }\n        // Ignore if the rule className is not in el class list.\n        if (validClassName && !el.classList.contains(validClassName))\n          return false;\n        if (validStyle) {\n          for (const [key, value] of Object.entries(validStyle)) {\n            const values = castArray<string>(value);\n\n            // Ignore if el style value is not included in rule style values (except *)\n            if (!values.includes((el.style as any)[key]) && value !== '*')\n              return;\n            // Ignore if el style value is falsy (for value *)\n            if (value === '*' && !(el.style as any)[key]) return;\n\n            const defaultNodeValue = plugin.inject.props?.defaultNodeValue;\n\n            // Ignore if the style value = plugin.inject.props.defaultNodeValue\n            if (\n              defaultNodeValue &&\n              defaultNodeValue === (el.style as any)[key]\n            ) {\n              return false;\n            }\n          }\n        }\n        if (validAttribute) {\n          if (typeof validAttribute === 'string') {\n            if (!el.getAttributeNames().includes(validAttribute)) return false;\n          } else {\n            for (const [attributeName, attributeValue] of Object.entries(\n              validAttribute\n            )) {\n              const attributeValues = castArray<string>(attributeValue);\n              const elAttribute = el.getAttribute(attributeName);\n\n              if (\n                !isDefined(elAttribute) ||\n                !attributeValues.includes(elAttribute)\n              )\n                return false;\n            }\n          }\n        }\n\n        return true;\n      }\n    );\n\n    if (!isValid) return;\n  }\n  if (query && !query(el)) {\n    return;\n  }\n  if (!getNode) {\n    if (isElement) {\n      getNode = () => ({ type });\n    } else if (isLeaf) {\n      getNode = () => ({ [type]: true });\n    } else {\n      return;\n    }\n  }\n\n  let node = getNode(el, {}) ?? {};\n\n  if (Object.keys(node).length === 0) return;\n\n  const injectedPlugins = getInjectedPlugins<{}, V>(editor, plugin);\n\n  injectedPlugins.forEach((injectedPlugin) => {\n    const res = injectedPlugin.deserializeHtml?.getNode?.(el, node);\n\n    if (res) {\n      node = {\n        ...node,\n        ...res,\n      };\n    }\n  });\n\n  if (attributeNames) {\n    const elementAttributes = {};\n\n    const elementAttributeNames = el.getAttributeNames();\n\n    for (const elementAttributeName of elementAttributeNames) {\n      if (attributeNames.includes(elementAttributeName)) {\n        (elementAttributes as any)[elementAttributeName] =\n          el.getAttribute(elementAttributeName);\n      }\n    }\n\n    if (Object.keys(elementAttributes).length > 0) {\n      node.attributes = elementAttributes;\n    }\n  }\n\n  return { ...deserializeHtml, node };\n};\n","import type { Value } from '@udecode/slate';\nimport type { AnyObject } from '@udecode/utils';\n\nimport type { DeserializeHtml, PlateEditor } from '../../../types';\nimport type { Nullable } from '../../../types/misc/Nullable';\n\nimport { pluginDeserializeHtml } from './pluginDeserializeHtml';\n\nexport const pipeDeserializeHtmlElement = <V extends Value>(\n  editor: PlateEditor<V>,\n  element: HTMLElement\n) => {\n  let result: ({ node: AnyObject } & Nullable<DeserializeHtml>) | undefined;\n\n  [...editor.plugins].reverse().some((plugin) => {\n    result = pluginDeserializeHtml(editor, plugin, { element });\n\n    return !!result;\n  });\n\n  return result;\n};\n","import {\n  type EDescendant,\n  type TDescendant,\n  type Value,\n  isElement,\n  isText,\n} from '@udecode/slate';\nimport { jsx } from 'slate-hyperscript';\n\nimport type { PlateEditor } from '../../../types';\n\nimport { mergeDeepToNodes } from '../../../utils';\nimport { deserializeHtmlNodeChildren } from './deserializeHtmlNodeChildren';\nimport { pipeDeserializeHtmlLeaf } from './pipeDeserializeHtmlLeaf';\n\n/**\n * Deserialize HTML to TDescendant[] with marks on Text. Build the leaf from the\n * leaf deserializers of each plugin.\n */\nexport const htmlElementToLeaf = <V extends Value>(\n  editor: PlateEditor<V>,\n  element: HTMLElement\n) => {\n  const node = pipeDeserializeHtmlLeaf(editor, element);\n\n  return deserializeHtmlNodeChildren(editor, element).reduce(\n    (arr: TDescendant[], child) => {\n      if (!child) return arr;\n      if (isElement(child)) {\n        if (Object.keys(node).length > 0) {\n          mergeDeepToNodes({\n            node: child,\n            query: {\n              filter: ([n]) => isText(n),\n            },\n            source: node,\n          });\n        }\n\n        arr.push(child);\n      } else {\n        const attributes = { ...node };\n\n        // attributes should not override child attributes\n        if (isText(child) && child.text) {\n          Object.keys(attributes).forEach((key) => {\n            if (attributes[key] && child[key]) {\n              attributes[key] = child[key];\n            }\n          });\n        }\n\n        arr.push(jsx('text', attributes, child) as any);\n      }\n\n      return arr;\n    },\n    []\n  ) as EDescendant<V>[];\n};\n","import type { Value } from '@udecode/slate';\nimport type { AnyObject } from '@udecode/utils';\n\nimport type { PlateEditor } from '../../../types/PlateEditor';\n\nimport { pluginDeserializeHtml } from './pluginDeserializeHtml';\n\nexport const pipeDeserializeHtmlLeaf = <V extends Value>(\n  editor: PlateEditor<V>,\n  element: HTMLElement\n) => {\n  let node: AnyObject = {};\n\n  [...editor.plugins].reverse().forEach((plugin) => {\n    const deserialized = pluginDeserializeHtml(editor, plugin, {\n      deserializeLeaf: true,\n      element,\n    });\n\n    if (!deserialized) return;\n\n    node = { ...node, ...deserialized.node };\n  });\n\n  return node;\n};\n","/** Deserialize HTML text node to text. */\nimport { isHtmlText } from './isHtmlText';\n\nexport const htmlTextNodeToString = (node: ChildNode | HTMLElement) => {\n  if (isHtmlText(node)) {\n    return node.textContent || '';\n  }\n};\n","import type { EDescendant, Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../../../types/PlateEditor';\nimport type { DeserializeHtmlNodeReturnType } from '../types';\n\nimport { htmlBodyToFragment } from './htmlBodyToFragment';\nimport { htmlBrToNewLine } from './htmlBrToNewLine';\nimport { htmlElementToElement } from './htmlElementToElement';\nimport { htmlElementToLeaf } from './htmlElementToLeaf';\nimport { htmlTextNodeToString } from './htmlTextNodeToString';\nimport { isHtmlElement } from './isHtmlElement';\n\n/** Deserialize HTML element or child node. */\nexport const deserializeHtmlNode =\n  <V extends Value>(editor: PlateEditor<V>) =>\n  (\n    node: ChildNode | HTMLElement\n  ): DeserializeHtmlNodeReturnType<EDescendant<V>> => {\n    const textNode = htmlTextNodeToString(node);\n\n    if (textNode) return textNode;\n    if (!isHtmlElement(node)) return null;\n\n    // break line\n    const breakLine = htmlBrToNewLine(node);\n\n    if (breakLine) return breakLine;\n\n    // body\n    const fragment = htmlBodyToFragment(editor, node as HTMLElement);\n\n    if (fragment) return fragment;\n\n    // element\n    const element = htmlElementToElement(editor, node as HTMLElement);\n\n    if (element) return element;\n\n    // leaf\n    return htmlElementToLeaf(editor, node as HTMLElement);\n  };\n","import type { EDescendant, Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../../../types/PlateEditor';\nimport type { DeserializeHtmlNodeReturnType } from '../types';\n\nimport { deserializeHtmlNode } from './deserializeHtmlNode';\n\n/** Deserialize HTML element to fragment. */\nexport const deserializeHtmlElement = <V extends Value>(\n  editor: PlateEditor<V>,\n  element: HTMLElement\n): DeserializeHtmlNodeReturnType<EDescendant<V>> => {\n  return deserializeHtmlNode(editor)(element);\n};\n","/** Convert HTML string into HTML element. */\nexport const htmlStringToDOMNode = (rawHtml: string) => {\n  const node = document.createElement('body');\n  node.innerHTML = rawHtml;\n\n  return node;\n};\n","import type { EDescendant, Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../../../types';\n\nimport { normalizeDescendantsToDocumentFragment } from '../../../utils/normalizeDescendantsToDocumentFragment';\nimport { collapseWhiteSpace } from './collapse-white-space';\nimport { deserializeHtmlElement } from './deserializeHtmlElement';\nimport { htmlStringToDOMNode } from './htmlStringToDOMNode';\n\n/** Deserialize HTML element to a valid document fragment. */\nexport const deserializeHtml = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    collapseWhiteSpace: shouldCollapseWhiteSpace = true,\n    element,\n  }: {\n    collapseWhiteSpace?: boolean;\n    element: HTMLElement | string;\n  }\n): EDescendant<V>[] => {\n  // for serializer\n  if (typeof element === 'string') {\n    element = htmlStringToDOMNode(element);\n  }\n  if (shouldCollapseWhiteSpace) {\n    element = collapseWhiteSpace(element);\n  }\n\n  const fragment = deserializeHtmlElement(editor, element) as EDescendant<V>[];\n\n  return normalizeDescendantsToDocumentFragment(editor, {\n    descendants: fragment,\n  });\n};\n","export const parseHtmlDocument = (html: string) => {\n  return new DOMParser().parseFromString(html, 'text/html');\n};\n","import { createPluginFactory } from '../../utils/createPluginFactory';\nimport { deserializeHtml } from './utils/deserializeHtml';\nimport { parseHtmlDocument } from './utils/parseHtmlDocument';\n\nexport const KEY_DESERIALIZE_HTML = 'deserializeHtml';\n\n/**\n * Enables support for deserializing inserted content from HTML format to Slate\n * format.\n */\nexport const createDeserializeHtmlPlugin = createPluginFactory({\n  key: KEY_DESERIALIZE_HTML,\n  then: (editor) => ({\n    editor: {\n      insertData: {\n        format: 'text/html',\n        getFragment: ({ data }) => {\n          const document = parseHtmlDocument(data);\n\n          return deserializeHtml(editor, {\n            element: document.body,\n          });\n        },\n      },\n    },\n  }),\n});\n","type Callback = (node: Node) => boolean;\n\n/**\n * Depth-first pre-order tree traverse the given HTML node and calls the given\n * callback for each node. see:\n * https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR)\n *\n * @param callback Returns a boolean indicating whether traversal should be\n *   continued\n */\nexport const traverseHtmlNode = (node: Node, callback: Callback): void => {\n  const keepTraversing = callback(node);\n\n  if (!keepTraversing) {\n    return;\n  }\n\n  let child = node.firstChild;\n\n  while (child) {\n    const currentChild = child;\n    const previousChild = child.previousSibling;\n    child = child.nextSibling;\n\n    traverseHtmlNode(currentChild, callback);\n\n    if (\n      // An unwrap was made. Need to compute the next child again.\n      !currentChild.previousSibling &&\n      !currentChild.nextSibling &&\n      !currentChild.parentNode &&\n      child &&\n      previousChild !== child.previousSibling &&\n      child.parentNode\n    ) {\n      child = previousChild ? previousChild.nextSibling : node.firstChild;\n    } else if (\n      // A list was created. Need to compute the next child again.\n      !currentChild.previousSibling &&\n      !currentChild.nextSibling &&\n      !currentChild.parentNode &&\n      child &&\n      !child.previousSibling &&\n      !child.nextSibling &&\n      !child.parentNode\n    ) {\n      if (previousChild) {\n        child = previousChild.nextSibling\n          ? previousChild.nextSibling.nextSibling\n          : null;\n      } else if (node.firstChild) {\n        child = node.firstChild.nextSibling;\n      }\n    }\n  }\n};\n","import { isHtmlElement } from './isHtmlElement';\nimport { traverseHtmlNode } from './traverseHtmlNode';\n\ntype Callback = (node: Element) => boolean;\n\n/**\n * Traverse the HTML elements of the given HTML node.\n *\n * @param rootNode The root HTML node to traverse.\n * @param callback The callback to call for each HTML element.\n */\nexport const traverseHtmlElements = (\n  rootNode: Node,\n  callback: Callback\n): void => {\n  traverseHtmlNode(rootNode, (node) => {\n    if (!isHtmlElement(node)) {\n      return true;\n    }\n\n    return callback(node);\n  });\n};\n","import { LINE_FEED } from '../constants';\nimport { traverseHtmlElements } from './traverseHtmlElements';\n\n/** Replace BR elements with line feeds. */\nexport const cleanHtmlBrElements = (rootNode: Node): void => {\n  traverseHtmlElements(rootNode, (element) => {\n    if (element.tagName !== 'BR') {\n      return true;\n    }\n\n    const replacementTextNode = document.createTextNode(LINE_FEED);\n\n    if (element.parentElement) {\n      element.parentElement.replaceChild(replacementTextNode, element);\n    }\n\n    return false;\n  });\n};\n","/** Replace \\r\\n and \\r with \\n */\nexport const cleanHtmlCrLf = (html: string): string => {\n  return html.replaceAll(/\\r\\n|\\r/g, '\\n');\n};\n","import { traverseHtmlElements } from './traverseHtmlElements';\n\nconst ALLOWED_EMPTY_ELEMENTS = new Set(['BR', 'IMG', 'TH', 'TD']);\n\nconst isEmpty = (element: Element): boolean => {\n  return (\n    !ALLOWED_EMPTY_ELEMENTS.has(element.nodeName) && !element.innerHTML.trim()\n  );\n};\n\nconst removeIfEmpty = (element: Element): void => {\n  if (isEmpty(element)) {\n    const { parentElement } = element;\n\n    element.remove();\n\n    if (parentElement) {\n      removeIfEmpty(parentElement);\n    }\n  }\n};\n\n/** Remove empty elements from rootNode. Allowed empty elements: BR, IMG. */\nexport const cleanHtmlEmptyElements = (rootNode: Node): void => {\n  traverseHtmlElements(rootNode, (element) => {\n    removeIfEmpty(element);\n\n    return true;\n  });\n};\n","/**\n * Replace `element` tag name by `tagName`. Attributes, innerHTML and parent\n * relationship is kept.\n */\nexport const replaceTagName = (element: Element, tagName: string): Element => {\n  const newElement = document.createElement(tagName);\n\n  newElement.innerHTML = element.innerHTML;\n\n  for (const { name } of element.attributes) {\n    const value = element.getAttribute(name);\n\n    if (value) {\n      newElement.setAttribute(name, value);\n    }\n  }\n\n  if (element.parentNode) {\n    element.parentNode.replaceChild(newElement, element);\n  }\n\n  return newElement;\n};\n","import { replaceTagName } from './replaceTagName';\nimport { traverseHtmlElements } from './traverseHtmlElements';\n\n/**\n * Replace FONT elements with SPAN elements if there is textContent (remove\n * otherwise).\n */\nexport const cleanHtmlFontElements = (rootNode: Node): void => {\n  traverseHtmlElements(rootNode, (element) => {\n    if (element.tagName === 'FONT') {\n      if (element.textContent) {\n        replaceTagName(element, 'span');\n      } else {\n        element.remove();\n      }\n    }\n\n    return true;\n  });\n};\n","/** If href starts with '#'. */\nexport const isHtmlFragmentHref = (href: string): boolean =>\n  href.startsWith('#');\n","/** Unwrap the given HTML element. */\nexport const unwrapHtmlElement = (element: Element): void => {\n  element.outerHTML = element.innerHTML;\n};\n","import { isHtmlFragmentHref } from './isHtmlFragmentHref';\nimport { traverseHtmlElements } from './traverseHtmlElements';\nimport { unwrapHtmlElement } from './unwrapHtmlElement';\n\n/** Remove fragment hrefs and spans without inner text. */\nexport const cleanHtmlLinkElements = (rootNode: Node): void => {\n  traverseHtmlElements(rootNode, (element) => {\n    if (element.tagName !== 'A') {\n      return true;\n    }\n\n    const href = element.getAttribute('href');\n\n    if (!href || isHtmlFragmentHref(href)) {\n      unwrapHtmlElement(element);\n    }\n    if (href && element.querySelector('img')) {\n      for (const span of element.querySelectorAll('span')) {\n        if (!span.textContent) {\n          unwrapHtmlElement(span);\n        }\n      }\n    }\n\n    return true;\n  });\n};\n","import { isHtmlText } from './isHtmlText';\nimport { traverseHtmlNode } from './traverseHtmlNode';\n\ntype Callback = (node: Text) => boolean;\n\nexport const traverseHtmlTexts = (rootNode: Node, callback: Callback): void => {\n  traverseHtmlNode(rootNode, (node) => {\n    if (!isHtmlText(node)) {\n      return true;\n    }\n\n    return callback(node);\n  });\n};\n","import {\n  CARRIAGE_RETURN,\n  LINE_FEED,\n  NO_BREAK_SPACE,\n  SPACE,\n} from '../constants';\nimport { traverseHtmlTexts } from './traverseHtmlTexts';\n\nexport const cleanHtmlTextNodes = (rootNode: Node): void => {\n  traverseHtmlTexts(rootNode, (textNode) => {\n    if (\n      /^\\n\\s*$/.test(textNode.data) &&\n      (textNode.previousElementSibling || textNode.nextElementSibling)\n    ) {\n      textNode.remove();\n\n      return true;\n    }\n\n    textNode.data = textNode.data.replaceAll(/\\n\\s*/g, '\\n');\n\n    if (\n      textNode.data.includes(CARRIAGE_RETURN) ||\n      textNode.data.includes(LINE_FEED) ||\n      textNode.data.includes(NO_BREAK_SPACE)\n    ) {\n      const hasSpace = textNode.data.includes(SPACE);\n      const hasNonWhitespace = /\\S/.test(textNode.data);\n      const hasLineFeed = textNode.data.includes(LINE_FEED);\n\n      if (!(hasSpace || hasNonWhitespace) && !hasLineFeed) {\n        if (textNode.data === NO_BREAK_SPACE) {\n          textNode.data = SPACE;\n\n          return true;\n        }\n\n        textNode.remove();\n\n        return true;\n      }\n      if (\n        textNode.previousSibling &&\n        textNode.previousSibling.nodeName === 'BR' &&\n        textNode.parentElement\n      ) {\n        textNode.previousSibling.remove();\n\n        const matches = textNode.data.match(/^[\\n\\r]+/);\n        const offset = matches ? matches[0].length : 0;\n\n        textNode.data = textNode.data\n          .slice(Math.max(0, offset))\n          .replaceAll(new RegExp(LINE_FEED, 'g'), SPACE)\n          .replaceAll(new RegExp(CARRIAGE_RETURN, 'g'), SPACE);\n        textNode.data = `\\n${textNode.data}`;\n      } else {\n        textNode.data = textNode.data\n          .replaceAll(new RegExp(LINE_FEED, 'g'), SPACE)\n          .replaceAll(new RegExp(CARRIAGE_RETURN, 'g'), SPACE);\n      }\n    }\n\n    return true;\n  });\n};\n","export const isHtmlTable = (element: Element) => element.nodeName === 'TABLE';\n","import { isHtmlBlockElement } from './isHtmlBlockElement';\nimport { isHtmlTable } from './isHtmlTable';\nimport { traverseHtmlElements } from './traverseHtmlElements';\n\n/**\n * Set HTML blocks mark styles to a new child span element if any. This allows\n * Plate to use block marks.\n */\nexport const copyBlockMarksToSpanChild = (rootNode: Node) => {\n  traverseHtmlElements(rootNode, (element) => {\n    const el = element as HTMLElement;\n\n    const styleAttribute = element.getAttribute('style');\n\n    if (!styleAttribute) return true;\n    if (isHtmlBlockElement(el) && !isHtmlTable(el)) {\n      const {\n        style: {\n          backgroundColor,\n          color,\n          fontFamily,\n          fontSize,\n          fontStyle,\n          fontWeight,\n          textDecoration,\n        },\n      } = el;\n\n      if (\n        backgroundColor ||\n        color ||\n        fontFamily ||\n        fontSize ||\n        fontStyle ||\n        fontWeight ||\n        textDecoration\n      ) {\n        const span = document.createElement('span');\n\n        if (!['inherit', 'initial'].includes(color)) {\n          span.style.color = color;\n        }\n\n        span.style.fontFamily = fontFamily;\n        span.style.fontSize = fontSize;\n\n        if (!['inherit', 'initial', 'normal'].includes(color)) {\n          span.style.fontStyle = fontStyle;\n        }\n        if (![400, 'normal'].includes(fontWeight)) {\n          span.style.fontWeight = fontWeight;\n        }\n\n        span.style.textDecoration = textDecoration;\n\n        span.innerHTML = el.innerHTML;\n        element.innerHTML = span.outerHTML;\n      }\n    }\n\n    return true;\n  });\n};\n","import { traverseHtmlElements } from './traverseHtmlElements';\n\n/**\n * Find the first HTML element that matches the given selector.\n *\n * @param rootNode\n * @param predicate\n */\nexport const findHtmlElement = (\n  rootNode: Node,\n  predicate: (node: HTMLElement) => boolean\n) => {\n  let res: Node | null = null;\n\n  traverseHtmlElements(rootNode, (node) => {\n    if (predicate(node as HTMLElement)) {\n      res = node;\n\n      return false;\n    }\n\n    return true;\n  });\n\n  return res;\n};\n\nexport const someHtmlElement = (\n  rootNode: Node,\n  predicate: (node: HTMLElement) => boolean\n) => {\n  return !!findHtmlElement(rootNode, predicate);\n};\n","const acceptNode = () => NodeFilter.FILTER_ACCEPT;\n\nexport const getHtmlComments = (node: Node): string[] => {\n  const comments: string[] = [];\n  const iterator = document.createNodeIterator(node, NodeFilter.SHOW_COMMENT, {\n    acceptNode,\n  });\n  let currentNode = iterator.nextNode();\n\n  while (currentNode) {\n    if (currentNode.nodeValue) {\n      comments.push(currentNode.nodeValue);\n    }\n\n    currentNode = iterator.nextNode();\n  }\n\n  return comments;\n};\n","export const isHtmlComment = (node: Node): node is Comment =>\n  node.nodeType === Node.COMMENT_NODE;\n","export const isOlSymbol = (symbol: string): boolean => {\n  return /[\\da-np-z]\\S/.test(symbol.toLowerCase());\n};\n","import { parseHtmlDocument } from './parseHtmlDocument';\n\nexport const parseHtmlElement = (html: string) => {\n  const { body } = parseHtmlDocument(html);\n\n  return body.firstElementChild as HTMLElement;\n};\n","import { ZERO_WIDTH_SPACE } from '../constants';\n\n/** Trim the html and remove zero width spaces, then wrap it with a body element. */\nexport const postCleanHtml = (html: string): string => {\n  const cleanHtml = html\n    .trim()\n    .replaceAll(new RegExp(ZERO_WIDTH_SPACE, 'g'), '');\n\n  return `<body>${cleanHtml}</body>`;\n};\n","/** Remove string before <html */\nconst removeBeforeHtml = (html: string): string => {\n  const index = html.indexOf('<html');\n\n  if (index === -1) {\n    return html;\n  }\n\n  return html.slice(Math.max(0, index));\n};\n\n/** Remove string after </html> */\nconst removeAfterHtml = (html: string): string => {\n  const index = html.lastIndexOf('</html>');\n\n  if (index === -1) {\n    return html;\n  }\n\n  return html.slice(0, Math.max(0, index + '</html>'.length));\n};\n\n/** Remove string before <html and after </html> */\nexport const removeHtmlSurroundings = (html: string): string => {\n  return removeBeforeHtml(removeAfterHtml(html));\n};\n","import { cleanHtmlCrLf } from './cleanHtmlCrLf';\nimport { removeHtmlSurroundings } from './removeHtmlSurroundings';\n\nconst cleaners = [removeHtmlSurroundings, cleanHtmlCrLf];\n\n/** Remove HTML surroundings and clean HTML from CR/LF */\nexport const preCleanHtml = (html: string): string => {\n  return cleaners.reduce((result, clean) => clean(result), html);\n};\n","import { isHtmlComment } from './isHtmlComment';\nimport { traverseHtmlNode } from './traverseHtmlNode';\n\ntype Callback = (node: Comment) => boolean;\n\n/** Traverse HTML comments. */\nexport const traverseHtmlComments = (\n  rootNode: Node,\n  callback: Callback\n): void => {\n  traverseHtmlNode(rootNode, (node) => {\n    if (!isHtmlComment(node)) {\n      return true;\n    }\n\n    return callback(node);\n  });\n};\n","import { isHtmlComment } from './isHtmlComment';\nimport { traverseHtmlComments } from './traverseHtmlComments';\n\n/** Removes HTML nodes between HTML comments. */\nexport const removeHtmlNodesBetweenComments = (\n  rootNode: Node,\n  start: string,\n  end: string\n): void => {\n  const isClosingComment = (node: Node) =>\n    isHtmlComment(node) && node.data === end;\n\n  traverseHtmlComments(rootNode, (comment) => {\n    if (comment.data === start) {\n      let node = comment.nextSibling;\n\n      comment.remove();\n\n      while (node && !isClosingComment(node)) {\n        const { nextSibling } = node;\n        node.remove();\n        node = nextSibling;\n      }\n\n      if (node && isClosingComment(node)) {\n        node.remove();\n      }\n    }\n\n    return true;\n  });\n};\n","import { useEffect } from 'react';\n\nimport type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../../../shared/types';\n\nimport {\n  BLUR_EDITOR_EVENT,\n  FOCUS_EDITOR_EVENT,\n} from '../../../shared/plugins/event-editor/constants';\n\nexport const useFocusEditorEvents = ({\n  editorRef,\n  onEditorBlur,\n  onEditorFocus,\n}: {\n  editorRef: PlateEditor<Value> | null;\n  onEditorBlur?: () => void;\n  onEditorFocus?: () => void;\n}) => {\n  useEffect(() => {\n    const onFocusEditor = (event: Event) => {\n      const id = (event as any).detail.id;\n\n      if (!!onEditorFocus && editorRef && editorRef.id === id) {\n        onEditorFocus();\n      }\n    };\n    const onBlurEditor = (event: Event) => {\n      const id = (event as any).detail.id;\n\n      if (!!onEditorBlur && editorRef && editorRef.id === id) {\n        onEditorBlur();\n      }\n    };\n\n    document.addEventListener(FOCUS_EDITOR_EVENT, onFocusEditor);\n    document.addEventListener(BLUR_EDITOR_EVENT, onBlurEditor);\n\n    return () => {\n      document.removeEventListener(FOCUS_EDITOR_EVENT, onFocusEditor);\n      document.removeEventListener(BLUR_EDITOR_EVENT, onBlurEditor);\n    };\n  }, [editorRef, onEditorBlur, onEditorFocus]);\n};\n","import type { Value } from '@udecode/slate';\n\nimport { focusEditorEdge, isEditorFocused } from '@udecode/slate-react';\nimport { withReact } from 'slate-react';\n\nimport type { PlateEditor } from '../../../shared/types';\n\nexport const withTReact = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E\n) => {\n  const e = withReact(editor as any) as any as E;\n  const { reset } = e;\n\n  e.reset = () => {\n    const isFocused = isEditorFocused(editor);\n\n    reset();\n\n    if (isFocused) {\n      focusEditorEdge(editor, { edge: 'start' });\n    }\n  };\n\n  return e;\n};\n","import { createPluginFactory } from '../../../shared/utils/createPluginFactory';\nimport { withTReact } from './withTReact';\n\nexport const KEY_REACT = 'react';\n\n/** @see {@link withReact} */\nexport const createReactPlugin = createPluginFactory({\n  key: KEY_REACT,\n  withOverrides: withTReact,\n});\n","import type { TEditor, Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../../shared/types/PlateEditor';\nimport type { PlateProps } from '../components';\n\nimport { resetEditor } from '../../shared/transforms';\nimport { setPlatePlugins } from '../utils/setPlatePlugins';\n\nconst shouldHaveBeenOverridden = (fnName: string) => () => {\n  console.warn(\n    `editor.${fnName} should have been overriden but was not. Please report this issue here: https://github.com/udecode/plate/issues`\n  );\n};\n\nexport interface WithPlateOptions<\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n> extends Pick<\n    PlateProps<V, E>,\n    'disableCorePlugins' | 'maxLength' | 'plugins'\n  > {\n  id?: any;\n}\n\n/**\n * Apply `withInlineVoid` and all plate plugins `withOverrides`. Overrides:\n *\n * - `id`: id of the editor.\n * - `key`: random key for the <Slate> component so each time the editor is\n *   created, the component resets.\n * - `options`: Plate options\n */\nexport const withPlate = <\n  V extends Value = Value,\n  E extends TEditor<V> = TEditor<V>,\n>(\n  e: E,\n  {\n    disableCorePlugins,\n    id,\n    maxLength,\n    plugins = [],\n  }: WithPlateOptions<V, E & PlateEditor<V>> = {}\n): E & PlateEditor<V> => {\n  let editor = e as any as E & PlateEditor<V>;\n\n  // Override incremental id generated by slate\n  editor.id = id ?? editor.id;\n  editor.prevSelection = null;\n  editor.isFallback = false;\n  editor.currentKeyboardEvent = null;\n\n  // Editor methods\n  editor.reset = () => resetEditor(editor);\n  editor.redecorate = () => shouldHaveBeenOverridden('redecorate');\n  editor.plate = {\n    get set() {\n      shouldHaveBeenOverridden('plate.set');\n\n      return null as any;\n    },\n  };\n\n  if (!editor.key) {\n    editor.key = Math.random();\n  }\n\n  setPlatePlugins<V>(editor, {\n    disableCorePlugins,\n    maxLength,\n    plugins: plugins as any,\n  });\n\n  // withOverrides\n  editor.plugins.forEach((plugin) => {\n    if (plugin.withOverrides) {\n      editor = plugin.withOverrides(editor, plugin) as any;\n    }\n  });\n\n  return editor;\n};\n","import type { TEditor, Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../../shared';\n\nimport {\n  type CreatePlateEditorOptions,\n  createPlateEditor,\n} from './createPlateEditor';\n\nexport const createPlateFallbackEditor = <\n  V extends Value = Value,\n  E extends TEditor<V> = TEditor<V>,\n>(\n  options: CreatePlateEditorOptions<V, E> = {}\n): E & PlateEditor<V> => {\n  const editor = createPlateEditor<V, E>(options);\n\n  editor.isFallback = true;\n\n  editor.apply = () => {\n    throw new Error(\n      'Cannot apply operations on the fallback editor. The fallback editor is used when a hook that depends on the Plate store was unable to locate a valid store. If you are using PlateController, use `useEditorMounted(id?: PlateId)` or `!editor.isFallback` to ensure that a valid Plate store is available before attempting to call operations on the editor.'\n    );\n  };\n\n  return editor;\n};\n","import type React from 'react';\n\nimport { type TReactEditor, isComposing } from '@udecode/slate-react';\n\nimport { createHotkey, sharedHotkeys } from '../../shared/utils/shared-hotkeys';\n\nconst createComposing =\n  (key: string) =>\n  (\n    editor: TReactEditor,\n    event: React.KeyboardEvent,\n    {\n      composing,\n    }: {\n      /** Ignore the event if composing. */\n      composing?: boolean;\n    } = {}\n  ) => {\n    if (!createHotkey(key)(event)) return false;\n    if (!!composing !== isComposing(editor)) return false;\n\n    return true;\n  };\n\nexport const Hotkeys = {\n  ...sharedHotkeys,\n  isTab: createComposing('tab'),\n  isUntab: createComposing('untab'),\n};\n","import React from 'react';\n\nimport type { Value } from '@udecode/slate';\n\nimport { DefaultElement } from 'slate-react';\n\nimport type { PlateEditor } from '../../shared/types/PlateEditor';\nimport type { RenderElement } from '../../shared/types/RenderElement';\nimport type { TEditableProps } from '../../shared/types/slate-react/TEditableProps';\n\nimport { pipeInjectProps } from '../../shared/utils/pipeInjectProps';\nimport { pluginRenderElement } from './pluginRenderElement';\n\n/** @see {@link RenderElement} */\nexport const pipeRenderElement = <V extends Value>(\n  editor: PlateEditor<V>,\n  renderElementProp?: TEditableProps['renderElement']\n): TEditableProps['renderElement'] => {\n  const renderElements: RenderElement[] = [];\n\n  editor.plugins.forEach((plugin) => {\n    if (plugin.isElement) {\n      renderElements.push(pluginRenderElement(editor, plugin));\n    }\n  });\n\n  return function render(nodeProps) {\n    const props = pipeInjectProps<V>(editor, nodeProps);\n\n    let element;\n\n    renderElements.some((renderElement) => {\n      element = renderElement(props as any);\n\n      return !!element;\n    });\n\n    if (element) return element;\n    if (renderElementProp) {\n      return renderElementProp(props);\n    }\n\n    return <DefaultElement {...props} />;\n  };\n};\n","import React from 'react';\n\nimport type { Value } from '@udecode/slate';\n\nimport { DefaultElement } from 'slate-react';\n\nimport type { PlateEditor } from '../../shared/types/PlateEditor';\nimport type { RenderElement } from '../../shared/types/RenderElement';\nimport type { PlatePlugin } from '../../shared/types/plugin/PlatePlugin';\n\nimport { getRenderNodeProps } from '../../shared/utils/getRenderNodeProps';\nimport { ElementProvider } from '../stores/element/useElementStore';\n\n/**\n * Get a `Editable.renderElement` handler for `options.type`. If the type is\n * equals to the slate element type, render `options.component`. Else, return\n * `undefined` so the pipeline can check the next plugin.\n */\nexport const pluginRenderElement = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    component: _component,\n    dangerouslyAllowAttributes,\n    key,\n    props,\n    type,\n  }: PlatePlugin<{}, V>\n): RenderElement =>\n  function render(nodeProps) {\n    const { children: _children, element } = nodeProps;\n\n    if (element.type === type) {\n      const Element = _component ?? DefaultElement;\n\n      const injectAboveComponents = editor.plugins.flatMap(\n        (o) => o.inject?.aboveComponent ?? []\n      );\n      const injectBelowComponents = editor.plugins.flatMap(\n        (o) => o.inject?.belowComponent ?? []\n      );\n\n      nodeProps = getRenderNodeProps({\n        attributes: element.attributes as any,\n        dangerouslyAllowAttributes,\n        nodeProps: nodeProps as any,\n        props,\n        type: type!,\n      }) as any;\n\n      let children = _children;\n\n      injectBelowComponents.forEach((withHOC) => {\n        const hoc = withHOC({ ...nodeProps, key } as any);\n\n        if (hoc) {\n          children = hoc({ ...nodeProps, children } as any);\n        }\n      });\n\n      let component: React.ReactNode = (\n        <Element {...nodeProps}>{children}</Element>\n      );\n\n      injectAboveComponents.forEach((withHOC) => {\n        const hoc = withHOC({ ...nodeProps, key } as any);\n\n        if (hoc) {\n          component = hoc({ ...nodeProps, children: component } as any);\n        }\n      });\n\n      return (\n        <ElementProvider element={element} scope={key}>\n          {component}\n        </ElementProvider>\n      );\n    }\n  };\n","import React from 'react';\n\nimport type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../../shared/types/PlateEditor';\nimport type { PlateRenderLeafProps } from '../../shared/types/PlateRenderLeafProps';\nimport type { RenderLeaf } from '../../shared/types/RenderLeaf';\nimport type { TEditableProps } from '../../shared/types/slate-react/TEditableProps';\n\nimport { DefaultLeaf } from '../../shared';\nimport { pipeInjectProps } from '../../shared/utils/pipeInjectProps';\nimport { pluginRenderLeaf } from './pluginRenderLeaf';\n\n/** @see {@link RenderLeaf} */\nexport const pipeRenderLeaf = <V extends Value>(\n  editor: PlateEditor<V>,\n  renderLeafProp?: TEditableProps['renderLeaf']\n): TEditableProps['renderLeaf'] => {\n  const renderLeafs: RenderLeaf[] = [];\n\n  editor.plugins.forEach((plugin) => {\n    if (plugin.isLeaf && plugin.key) {\n      renderLeafs.push(pluginRenderLeaf(editor, plugin));\n    }\n  });\n\n  return function render(nodeProps) {\n    const props = pipeInjectProps(editor, nodeProps) as PlateRenderLeafProps<V>;\n\n    renderLeafs.forEach((renderLeaf) => {\n      const newChildren = renderLeaf(props as any);\n\n      if (newChildren !== undefined) {\n        props.children = newChildren;\n      }\n    });\n\n    if (renderLeafProp) {\n      return renderLeafProp(props);\n    }\n\n    return <DefaultLeaf {...props} />;\n  };\n};\n","import React from 'react';\n\nimport type { Value } from '@udecode/slate';\n\nimport type { PlateRenderLeafProps } from '../types/PlateRenderLeafProps';\n\nexport function DefaultLeaf<V extends Value>({\n  attributes,\n  children,\n  editor,\n  leaf,\n  nodeProps,\n  text,\n  ...props\n}: PlateRenderLeafProps<V>) {\n  return (\n    <span {...attributes} {...props}>\n      {children}\n    </span>\n  );\n}\n","import type { DOMHandlers } from '../plugin';\n\nexport const DOM_HANDLERS: (keyof DOMHandlers)[] = [\n  // Clipboard Events\n  'onCopy',\n  'onCopyCapture',\n  'onCut',\n  'onCutCapture',\n  'onPaste',\n  'onPasteCapture',\n\n  // Composition Events\n  'onCompositionEnd',\n  'onCompositionEndCapture',\n  'onCompositionStart',\n  'onCompositionStartCapture',\n  'onCompositionUpdate',\n  'onCompositionUpdateCapture',\n\n  // Focus Events\n  'onFocus',\n  'onFocusCapture',\n  'onBlur',\n  'onBlurCapture',\n\n  // Form Events\n  'onDOMBeforeInput',\n  'onBeforeInput',\n  'onBeforeInputCapture',\n  'onInput',\n  'onInputCapture',\n  'onReset',\n  'onResetCapture',\n  'onSubmit',\n  'onSubmitCapture',\n  'onInvalid',\n  'onInvalidCapture',\n\n  // Image Events\n  'onLoad',\n  'onLoadCapture',\n\n  // Keyboard Events\n  'onKeyDown',\n  'onKeyDownCapture',\n  'onKeyPress',\n  'onKeyPressCapture',\n  'onKeyUp',\n  'onKeyUpCapture',\n\n  // Media Events\n  'onAbort',\n  'onAbortCapture',\n  'onCanPlay',\n  'onCanPlayCapture',\n  'onCanPlayThrough',\n  'onCanPlayThroughCapture',\n  'onDurationChange',\n  'onDurationChangeCapture',\n  'onEmptied',\n  'onEmptiedCapture',\n  'onEncrypted',\n  'onEncryptedCapture',\n  'onEnded',\n  'onEndedCapture',\n  'onLoadedData',\n  'onLoadedDataCapture',\n  'onLoadedMetadata',\n  'onLoadedMetadataCapture',\n  'onLoadStart',\n  'onLoadStartCapture',\n  'onPause',\n  'onPauseCapture',\n  'onPlay',\n  'onPlayCapture',\n  'onPlaying',\n  'onPlayingCapture',\n  'onProgress',\n  'onProgressCapture',\n  'onRateChange',\n  'onRateChangeCapture',\n  'onSeeked',\n  'onSeekedCapture',\n  'onSeeking',\n  'onSeekingCapture',\n  'onStalled',\n  'onStalledCapture',\n  'onSuspend',\n  'onSuspendCapture',\n  'onTimeUpdate',\n  'onTimeUpdateCapture',\n  'onVolumeChange',\n  'onVolumeChangeCapture',\n  'onWaiting',\n  'onWaitingCapture',\n\n  // MouseEvents\n  'onAuxClick',\n  'onAuxClickCapture',\n  'onClick',\n  'onClickCapture',\n  'onContextMenu',\n  'onContextMenuCapture',\n  'onDoubleClick',\n  'onDoubleClickCapture',\n  'onDrag',\n  'onDragCapture',\n  'onDragEnd',\n  'onDragEndCapture',\n  'onDragEnter',\n  'onDragEnterCapture',\n  'onDragExit',\n  'onDragExitCapture',\n  'onDragLeave',\n  'onDragLeaveCapture',\n  'onDragOver',\n  'onDragOverCapture',\n  'onDragStart',\n  'onDragStartCapture',\n  'onDrop',\n  'onDropCapture',\n  'onMouseDown',\n  'onMouseDownCapture',\n  'onMouseEnter',\n  'onMouseLeave',\n  'onMouseMove',\n  'onMouseMoveCapture',\n  'onMouseOut',\n  'onMouseOutCapture',\n  'onMouseOver',\n  'onMouseOverCapture',\n  'onMouseUp',\n  'onMouseUpCapture',\n\n  // Selection Events\n  'onSelect',\n  'onSelectCapture',\n\n  // Touch Events\n  'onTouchCancel',\n  'onTouchCancelCapture',\n  'onTouchEnd',\n  'onTouchEndCapture',\n  'onTouchMove',\n  'onTouchMoveCapture',\n  'onTouchStart',\n  'onTouchStartCapture',\n\n  // Pointer Events\n  'onPointerDown',\n  'onPointerDownCapture',\n  'onPointerMove',\n  'onPointerUp',\n  'onPointerUpCapture',\n  'onPointerCancel',\n  'onPointerCancelCapture',\n  'onPointerEnter',\n  'onPointerLeave',\n  'onPointerOver',\n  'onPointerOverCapture',\n  'onPointerOut',\n  'onPointerOutCapture',\n  'onGotPointerCapture',\n  'onGotPointerCaptureCapture',\n  'onLostPointerCapture',\n  'onLostPointerCaptureCapture',\n\n  // UI Events\n  'onScroll',\n  'onScrollCapture',\n\n  // Wheel Events\n  'onWheel',\n  'onWheelCapture',\n\n  // Animation Events\n  'onAnimationStart',\n  'onAnimationStartCapture',\n  'onAnimationEnd',\n  'onAnimationEndCapture',\n  'onAnimationIteration',\n  'onAnimationIterationCapture',\n\n  // Transition Events\n  'onTransitionEnd',\n  'onTransitionEndCapture',\n];\n","import React from 'react';\n\nimport type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../../shared/types/PlateEditor';\nimport type { RenderLeaf } from '../../shared/types/RenderLeaf';\nimport type { PlatePlugin } from '../../shared/types/plugin/PlatePlugin';\n\nimport { DefaultLeaf } from '../../shared/components/DefaultLeaf';\nimport { getRenderNodeProps } from '../../shared/utils/getRenderNodeProps';\n\n/**\n * Get a `Editable.renderLeaf` handler for `options.type`. If the type is equals\n * to the slate leaf type, render `options.component`. Else, return `children`.\n */\nexport const pluginRenderLeaf = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    component,\n    dangerouslyAllowAttributes,\n    key,\n    props,\n    type = key,\n  }: PlatePlugin<{}, V>\n): RenderLeaf =>\n  function render(nodeProps) {\n    const { children, leaf } = nodeProps;\n\n    if (leaf[type]) {\n      const Leaf = component ?? DefaultLeaf;\n\n      nodeProps = getRenderNodeProps({\n        attributes: leaf.attributes as any,\n        dangerouslyAllowAttributes,\n        nodeProps: nodeProps as any,\n        props,\n        type,\n      }) as any;\n\n      return <Leaf {...nodeProps}>{children}</Leaf>;\n    }\n\n    return children;\n  };\n","import React from 'react';\n\nimport type { JotaiStore } from 'jotai-x';\n\nimport { type Atom, atom } from 'jotai';\n\nimport type { PlateId } from '../plate';\n\nimport { createAtomStore } from '../../libs';\n\nexport const {\n  PlateControllerProvider: PlateController,\n  plateControllerStore,\n  usePlateControllerStore,\n} = createAtomStore(\n  {\n    activeId: atom(null as PlateId | null),\n    editorStores: atom({} as Record<PlateId, JotaiStore | null>),\n    primaryEditorIds: atom([] as PlateId[]),\n  },\n  {\n    name: 'plateController',\n  }\n);\n\nexport const usePlateControllerSelectors = () => usePlateControllerStore().get;\n\nexport const usePlateControllerActions = () => usePlateControllerStore().set;\n\nexport const usePlateControllerStates = () => usePlateControllerStore().use;\n\nexport const usePlateControllerExists = () =>\n  !!usePlateControllerStore().store({ warnIfNoStore: false });\n\n/**\n * Retrieve from PlateController the JotaiStore for the editor with a given ID,\n * or the active editor if no ID is provided, or the first primary editor if no\n * editor is active, or null.\n */\nexport const usePlateControllerEditorStore = (\n  idProp?: PlateId\n): JotaiStore | null => {\n  const storeAtom: Atom<JotaiStore | null> = React.useMemo(\n    () =>\n      atom((get) => {\n        const editorStores = get(plateControllerStore.atom.editorStores);\n\n        const forId = (id: PlateId | null): JotaiStore | null => {\n          if (!id) return null;\n\n          return editorStores[id] ?? null;\n        };\n\n        if (idProp) return forId(idProp);\n\n        const lookupOrder = [\n          get(plateControllerStore.atom.activeId),\n          ...get(plateControllerStore.atom.primaryEditorIds),\n        ];\n\n        for (const id of lookupOrder) {\n          const store = forId(id);\n\n          if (store) return store;\n        }\n\n        return null;\n      }),\n    [idProp]\n  );\n\n  return usePlateControllerSelectors().atom(storeAtom);\n};\n","import React from 'react';\n\nimport type { PlateChangeKey } from '../../../../shared';\n\nimport {\n  type PlateId,\n  type UsePlateEditorStoreOptions,\n  usePlateActions,\n} from '../createPlateStore';\n\nexport const useIncrementVersion = (\n  key: PlateChangeKey,\n  id?: PlateId,\n  options: UsePlateEditorStoreOptions = {}\n) => {\n  const previousVersionRef = React.useRef(1);\n\n  const set = usePlateActions(id, {\n    debugHookName: 'useIncrementVersion',\n    ...options,\n  })[key]();\n\n  return React.useCallback(() => {\n    const nextVersion = previousVersionRef.current + 1;\n    set(nextVersion);\n    previousVersionRef.current = nextVersion;\n  }, [set]);\n};\n","import React from 'react';\n\nimport type { PlateId, UsePlateEditorStoreOptions } from '../createPlateStore';\n\nimport { useIncrementVersion } from './useIncrementVersion';\n\nexport const useRedecorate = (\n  id?: PlateId,\n  options: UsePlateEditorStoreOptions = {}\n) => {\n  const updateDecorate = useIncrementVersion('versionDecorate', id, {\n    debugHookName: 'useRedecorate',\n    ...options,\n  });\n\n  return React.useCallback(() => {\n    updateDecorate();\n  }, [updateDecorate]);\n};\n","import React from 'react';\n\nimport { createPlateEditor } from '../../../utils';\nimport {\n  type PlateId,\n  type UsePlateEditorStoreOptions,\n  usePlateActions,\n} from '../createPlateStore';\nimport { useEditorRef } from '../selectors';\n\n/** Replace plate editor with the same id and plugins. Remounts `PlateContent`. */\nexport const useReplaceEditor = (\n  id?: PlateId,\n  options: UsePlateEditorStoreOptions = {}\n) => {\n  const editor = useEditorRef(id, {\n    debugHookName: 'useReplaceEditor',\n    ...options,\n  });\n\n  const setEditor = usePlateActions(id, {\n    debugHookName: 'useReplaceEditor',\n    ...options,\n  }).editor();\n\n  return React.useCallback(() => {\n    const newEditor = createPlateEditor({\n      // disable core plugins as it's already included\n      disableCorePlugins: true,\n      id: editor.id,\n      plugins: editor.plugins,\n    });\n\n    setEditor(newEditor);\n  }, [editor, setEditor]);\n};\n","import {\n  type PlateId,\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\nexport const useEditorMounted = (\n  id?: PlateId,\n  options: UsePlateEditorStoreOptions = {}\n): boolean => {\n  return !!usePlateSelectors(id, {\n    debugHookName: 'useEditorMounted',\n    ...options,\n  }).isMounted();\n};\n","import {\n  type PlateId,\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\n/**\n * Whether the editor is read-only. You can also use `useReadOnly` from\n * `slate-react` in node components.\n */\nexport const useEditorReadOnly = (\n  id?: PlateId,\n  options: UsePlateEditorStoreOptions = {}\n): boolean => {\n  return !!usePlateSelectors(id, {\n    debugHookName: 'useEditorReadOnly',\n    ...options,\n  }).readOnly();\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../../../../shared/types';\n\nimport {\n  type PlateId,\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\n/** Get editor ref which is never updated. */\nexport const useEditorRef = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  id?: PlateId,\n  options: UsePlateEditorStoreOptions = {}\n): E =>\n  usePlateSelectors(id, {\n    debugHookName: 'useEditorRef',\n    ...options,\n  }).editor() as any;\n","import {\n  type PlateId,\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\n/** Get the editor selection (deeply memoized). */\nexport const useEditorSelection = (\n  id?: PlateId,\n  options: UsePlateEditorStoreOptions = {}\n) =>\n  usePlateSelectors(id, {\n    debugHookName: 'useEditorSelection',\n    ...options,\n  }).trackedSelection().selection;\n","import React from 'react';\n\nimport type { Value } from '@udecode/slate';\n\nimport { selectAtom } from 'jotai/utils';\n\nimport type { PlateEditor } from '../../../../shared';\n\nimport {\n  type PlateId,\n  type UsePlateEditorStoreOptions,\n  plateStore,\n  usePlateSelectors,\n} from '../createPlateStore';\n\nexport interface UseEditorSelectorOptions<T>\n  extends UsePlateEditorStoreOptions {\n  equalityFn?: (a: T, b: T) => boolean;\n  id?: PlateId;\n}\n\nexport const useEditorSelector = <\n  T,\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  selector: (editor: E, prev?: T) => T,\n  deps: React.DependencyList,\n  {\n    equalityFn = (a: T, b: T) => a === b,\n    id,\n    ...storeOptions\n  }: UseEditorSelectorOptions<T> = {}\n): T => {\n  const selectorAtom = React.useMemo(\n    () =>\n      selectAtom<{ editor: E }, T>(\n        plateStore.atom.trackedEditor,\n        ({ editor }, prev) => selector(editor, prev),\n        equalityFn\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps\n  );\n\n  return usePlateSelectors(id, {\n    debugHookName: 'useEditorSelector',\n    ...storeOptions,\n  }).atom(selectorAtom);\n};\n","import type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../../../../shared/types';\n\nimport {\n  type PlateId,\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\n/** Get editor state which is updated on editor change. */\nexport const useEditorState = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  id?: PlateId,\n  options: UsePlateEditorStoreOptions = {}\n): E => {\n  return usePlateSelectors(id, {\n    debugHookName: 'useEditorState',\n    ...options,\n  }).trackedEditor().editor;\n};\n","import {\n  type PlateId,\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\n/** Version incremented on each editor change. */\nexport const useEditorVersion = (\n  id?: PlateId,\n  options: UsePlateEditorStoreOptions = {}\n) => {\n  return usePlateSelectors(id, {\n    debugHookName: 'useEditorVersion',\n    ...options,\n  }).versionEditor();\n};\n","import {\n  type PlateId,\n  type UsePlateEditorStoreOptions,\n  usePlateSelectors,\n} from '../createPlateStore';\n\n/** Version incremented on selection change. */\nexport const useSelectionVersion = (\n  id?: PlateId,\n  options: UsePlateEditorStoreOptions = {}\n) => {\n  return usePlateSelectors(id, {\n    debugHookName: 'useSelectionVersion',\n    ...options,\n  }).versionSelection();\n};\n","import { useEventEditorSelectors } from '../../../../shared/plugins/event-editor/eventEditorStore';\nimport { PLATE_SCOPE, type PlateId, usePlateSelectors } from '../../plate';\n\n/** Get last event editor id: focus, blur or last. */\nexport const useEventPlateId = (id?: PlateId) => {\n  const focus = useEventEditorSelectors.focus();\n  const blur = useEventEditorSelectors.blur();\n  const last = useEventEditorSelectors.last();\n  const providerId = usePlateSelectors().id();\n\n  if (id) return id;\n  if (focus) return focus;\n  if (blur) return blur;\n\n  return last ?? providerId ?? PLATE_SCOPE;\n};\n","import React from 'react';\n\nimport type { WithPlatePlugin } from '../../shared/types/plugin/PlatePlugin';\n\nimport {\n  type PlateId,\n  useEditorRef,\n  usePlateActions,\n  usePlateSelectors,\n} from '../stores';\n\nexport function EditorRefPluginEffect({\n  id,\n  plugin,\n}: {\n  id?: PlateId;\n  plugin: WithPlatePlugin;\n}) {\n  const editor = useEditorRef(id);\n\n  plugin.useHooks?.(editor, plugin);\n\n  return null;\n}\n\nexport function EditorRefEffect({ id }: { id?: PlateId }) {\n  const setIsMounted = usePlateActions(id).isMounted();\n  const plugins = usePlateSelectors(id).plugins();\n  const editorState = useEditorRef(id);\n  const editorRef = usePlateSelectors(id).editorRef();\n\n  React.useEffect(() => {\n    setIsMounted(true);\n\n    return () => {\n      setIsMounted(false);\n    };\n  }, [setIsMounted]);\n\n  /**\n   * Pass `editorState` to `editorRef` when the editor mounts. Since the editor\n   * instance is mutable, we don't need to update it on every change, although\n   * consumers will need to manually trigger a re-render inside `onChange` if\n   * they want to use `editorRef` with `useState`.\n   */\n  React.useEffect(() => {\n    if (typeof editorRef === 'function') {\n      editorRef(editorState);\n\n      return () => editorRef(null);\n    }\n    if (editorRef) {\n      editorRef.current = editorState;\n\n      return () => {\n        editorRef.current = null;\n      };\n    }\n  }, [editorRef, editorState]);\n\n  return (\n    <>\n      {plugins.map((plugin) => (\n        <EditorRefPluginEffect id={id} key={plugin.key} plugin={plugin} />\n      ))}\n    </>\n  );\n}\n","/* eslint-disable react/display-name */\nimport React from 'react';\n\nimport { Range, type Selection } from 'slate';\nimport { useSlate } from 'slate-react';\n\nimport { type PlateId, useIncrementVersion } from '../stores';\n\nexport const EditorStateEffect = React.memo(({ id }: { id?: PlateId }) => {\n  const editorState = useSlate();\n  const updateVersionEditor = useIncrementVersion('versionEditor', id);\n\n  React.useEffect(() => {\n    updateVersionEditor();\n  });\n\n  const updateVersionSelection = useIncrementVersion('versionSelection', id);\n  const prevSelectionRef = React.useRef(editorState.selection);\n\n  const sameSelection = isSelectionEqual(\n    prevSelectionRef.current,\n    editorState.selection\n  );\n\n  React.useEffect(() => {\n    if (!sameSelection) {\n      updateVersionSelection();\n    }\n\n    prevSelectionRef.current = editorState.selection;\n  }, [editorState.selection, sameSelection, updateVersionSelection]);\n\n  return null;\n});\n\nconst isSelectionEqual = (a: Selection, b: Selection) => {\n  if (!a && !b) return true;\n  if (!a || !b) return false;\n\n  return Range.equals(a, b);\n};\n","import React from 'react';\n\nimport { type Value, normalizeEditor } from '@udecode/slate';\nimport { nanoid } from 'nanoid/non-secure';\n\nimport type {\n  PlateEditor,\n  PlatePlugin,\n  PlateStoreState,\n  TEditableProps,\n} from '../../shared/types';\n\nimport { normalizeInitialValue } from '../../shared';\nimport { PlateStoreProvider } from '../stores';\nimport { createPlateEditor } from '../utils';\nimport { PlateEffects } from './PlateEffects';\n\nexport interface PlateProps<\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n> extends Partial<\n    Pick<\n      PlateStoreState<V, E>,\n      | 'editor'\n      | 'id'\n      | 'onChange'\n      | 'onSelectionChange'\n      | 'onValueChange'\n      | 'primary'\n      | 'readOnly'\n      | 'value'\n    >\n  > {\n  children: React.ReactNode;\n  decorate?: TEditableProps['decorate'];\n\n  /**\n   * If `true`, disable all the core plugins. If an object, disable the core\n   * plugin properties that are `true` in the object.\n   */\n  disableCorePlugins?:\n    | {\n        deserializeAst?: boolean;\n        deserializeHtml?: boolean;\n        editorProtocol?: boolean;\n        eventEditor?: boolean;\n        history?: boolean;\n        inlineVoid?: boolean;\n        insertData?: boolean;\n        length?: boolean;\n        nodeFactory?: boolean;\n        react?: boolean;\n        selection?: boolean;\n      }\n    | boolean;\n\n  /** Access the editor object using a React ref. */\n  editorRef?: React.ForwardedRef<E>;\n\n  /**\n   * Initial value of the editor.\n   *\n   * @default editor.childrenFactory()\n   */\n  initialValue?: PlateStoreState<V>['value'];\n\n  /** Specifies the maximum number of characters allowed in the editor. */\n  maxLength?: number;\n\n  /**\n   * When `true`, it will normalize the initial value passed to the `editor`\n   * once it gets created. This is useful when adding normalization rules on\n   * already existing content.\n   *\n   * @default false\n   */\n  normalizeInitialValue?: boolean;\n\n  plugins?: PlatePlugin[];\n  renderElement?: TEditableProps['renderElement'];\n  renderLeaf?: TEditableProps['renderLeaf'];\n}\n\nfunction PlateInner<\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>({\n  children,\n  decorate,\n  disableCorePlugins,\n  editor: editorProp,\n  editorRef,\n  id: idProp,\n  initialValue,\n  maxLength,\n  normalizeInitialValue: shouldNormalizeInitialValue,\n  onChange,\n  onSelectionChange,\n  onValueChange,\n  plugins: pluginsProp,\n  primary,\n  readOnly,\n  renderElement,\n  renderLeaf,\n  value: valueProp,\n}: PlateProps<V, E>) {\n  const [id] = React.useState(() => editorProp?.id ?? idProp ?? nanoid());\n\n  const editor: E = React.useMemo(\n    () =>\n      editorProp ??\n      createPlateEditor({\n        disableCorePlugins,\n        id,\n        maxLength,\n        plugins: pluginsProp as any,\n      }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const value = React.useMemo(\n    () => {\n      let currValue = initialValue ?? valueProp;\n\n      if (!currValue) {\n        currValue =\n          editor.children.length > 0\n            ? editor.children\n            : (editor.childrenFactory() as V);\n      }\n\n      const normalizedValue = normalizeInitialValue(editor, currValue);\n\n      if (normalizedValue) {\n        currValue = normalizedValue;\n      }\n\n      editor.children = currValue;\n\n      if (shouldNormalizeInitialValue) {\n        normalizeEditor(editor, { force: true });\n      }\n\n      return editor.children;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  return (\n    <PlateStoreProvider\n      decorate={decorate}\n      editor={editor as any}\n      editorRef={editorRef as PlateStoreState['editorRef']}\n      id={id}\n      onChange={onChange as PlateStoreState['onChange']}\n      onSelectionChange={\n        onSelectionChange as PlateStoreState['onSelectionChange']\n      }\n      onValueChange={onValueChange as PlateStoreState['onValueChange']}\n      plugins={editor.plugins as any}\n      primary={primary}\n      rawPlugins={pluginsProp}\n      readOnly={readOnly}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scope={id}\n      value={value}\n    >\n      <PlateEffects\n        disableCorePlugins={disableCorePlugins}\n        id={id}\n        plugins={pluginsProp}\n      >\n        {children}\n      </PlateEffects>\n    </PlateStoreProvider>\n  );\n}\n\nexport function Plate<\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(props: PlateProps<V, E>) {\n  const { id } = props;\n\n  return <PlateInner key={id?.toString()} {...props} />;\n}\n","import React from 'react';\n\nimport type { Value } from '@udecode/slate';\n\nimport type { PlateEditor } from '../../shared';\n\nimport { type UsePlateEffectsProps, usePlateEffects } from '../hooks';\n\nexport interface PlateEffectsProps<\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n> extends UsePlateEffectsProps<V, E> {\n  children: React.ReactNode;\n}\n\nexport function PlateEffects<\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>({ children, ...props }: PlateEffectsProps<V, E>) {\n  usePlateEffects<V, E>(props);\n\n  return <>{children}</>;\n}\n","import React from 'react';\n\nimport { isDefined } from '@udecode/utils';\nimport omit from 'lodash/omit.js';\nimport { useDeepCompareMemo } from 'use-deep-compare';\n\nimport type { TEditableProps } from '../../shared/types/slate-react/TEditableProps';\n\nimport { DOM_HANDLERS } from '../../shared/types/misc/dom-attributes';\nimport { pipeDecorate } from '../../shared/utils/pipeDecorate';\nimport { pipeHandler } from '../../shared/utils/pipeHandler';\nimport { useEditorRef, usePlateSelectors } from '../stores';\nimport { pipeRenderElement } from '../utils/pipeRenderElement';\nimport { pipeRenderLeaf } from '../utils/pipeRenderLeaf';\n\nexport const useEditableProps = (\n  editableProps: TEditableProps = {}\n): TEditableProps => {\n  const { id } = editableProps;\n\n  const editor = useEditorRef(id);\n  const selectors = usePlateSelectors(id);\n  const versionDecorate = selectors.versionDecorate();\n  const readOnly = selectors.readOnly();\n  const storeDecorate = selectors.decorate();\n  const storeRenderLeaf = selectors.renderLeaf();\n  const storeRenderElement = selectors.renderElement();\n\n  const decorateMemo = React.useMemo(() => {\n    return pipeDecorate(editor, storeDecorate ?? editableProps?.decorate);\n  }, [editableProps?.decorate, editor, storeDecorate]);\n\n  const decorate: typeof decorateMemo = React.useMemo(() => {\n    if (!versionDecorate || !decorateMemo) return;\n\n    return (entry) => decorateMemo(entry);\n  }, [decorateMemo, versionDecorate]);\n\n  const renderElement = React.useMemo(() => {\n    return pipeRenderElement(\n      editor,\n      storeRenderElement ?? editableProps?.renderElement\n    );\n  }, [editableProps?.renderElement, editor, storeRenderElement]);\n\n  const renderLeaf = React.useMemo(() => {\n    return pipeRenderLeaf(editor, storeRenderLeaf ?? editableProps?.renderLeaf);\n  }, [editableProps?.renderLeaf, editor, storeRenderLeaf]);\n\n  const props: TEditableProps = useDeepCompareMemo(() => {\n    const _props: TEditableProps = {\n      decorate,\n      renderElement,\n      renderLeaf,\n    };\n\n    if (isDefined(readOnly)) {\n      _props.readOnly = readOnly!;\n    }\n\n    DOM_HANDLERS.forEach((handlerKey) => {\n      const handler = pipeHandler(editor, {\n        editableProps,\n        handlerKey,\n      }) as any;\n\n      if (handler) {\n        _props[handlerKey] = handler;\n      }\n    });\n\n    return _props;\n  }, [decorate, editableProps, renderElement, renderLeaf, readOnly]);\n\n  return useDeepCompareMemo(\n    () => ({\n      ...omit(editableProps, [...DOM_HANDLERS, 'renderElement', 'renderLeaf']),\n      ...props,\n    }),\n    [editableProps, props]\n  );\n};\n","import React from 'react';\n\nimport type { Value } from '@udecode/slate';\n\nimport { isDefined } from '@udecode/utils';\n\nimport type { PlateEditor } from '../../shared';\nimport type { PlateProps } from '../components';\n\nimport { useEditorRef, usePlateStates } from '../stores';\nimport { setPlatePlugins } from '../utils';\n\nexport type UsePlateEffectsProps<\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n> = Pick<PlateProps<V, E>, 'disableCorePlugins' | 'id' | 'plugins'>;\n\nexport const usePlateEffects = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>({\n  disableCorePlugins,\n  id,\n  plugins: pluginsProp,\n}: UsePlateEffectsProps<V, E>) => {\n  const editor = useEditorRef<V, E>(id);\n\n  const states = usePlateStates(id);\n  const [rawPlugins, setRawPlugins] = states.rawPlugins();\n  const [, setPlugins] = states.plugins();\n\n  React.useEffect(() => {\n    if (isDefined(pluginsProp) && pluginsProp !== rawPlugins) {\n      setRawPlugins(rawPlugins);\n\n      setPlatePlugins<V, E>(editor, {\n        disableCorePlugins,\n        plugins: pluginsProp,\n      });\n      setPlugins(editor.plugins as any);\n    }\n  }, [\n    disableCorePlugins,\n    editor,\n    rawPlugins,\n    pluginsProp,\n    setPlugins,\n    setRawPlugins,\n  ]);\n};\n","import React from 'react';\n\nimport type { Value } from '@udecode/slate';\nimport type { SlateProps } from '@udecode/slate-react';\n\nimport { pipeOnChange } from '../../shared/utils/pipeOnChange';\nimport {\n  type PlateId,\n  useEditorRef,\n  usePlateActions,\n  usePlateSelectors,\n} from '../stores';\n\n/** Get Slate props stored in a global store. */\nexport const useSlateProps = <V extends Value>({\n  id,\n}: {\n  id?: PlateId;\n}): Omit<SlateProps, 'children'> => {\n  const editor = useEditorRef(id);\n  const value = usePlateSelectors(id).value();\n  const setValue = usePlateActions(id).value();\n  const onChangeProp = usePlateSelectors(id).onChange();\n  const onValueChangeProp = usePlateSelectors(id).onValueChange();\n  const onSelectionChangeProp = usePlateSelectors(id).onSelectionChange();\n\n  const onChange = React.useCallback(\n    (newValue: V) => {\n      const eventIsHandled = pipeOnChange(editor)(newValue);\n\n      if (!eventIsHandled) {\n        onChangeProp?.(newValue);\n      }\n\n      setValue(newValue);\n    },\n    [editor, setValue, onChangeProp]\n  );\n\n  const onValueChange = React.useMemo(\n    () => onValueChangeProp,\n    [onValueChangeProp]\n  );\n\n  const onSelectionChange = React.useMemo(\n    () => onSelectionChangeProp,\n    [onSelectionChangeProp]\n  );\n\n  return React.useMemo(() => {\n    return {\n      editor,\n      initialValue: value,\n      key: editor.key,\n      onChange,\n      onSelectionChange,\n      onValueChange,\n      value,\n    };\n  }, [editor, onChange, onSelectionChange, onValueChange, value]);\n};\n","import React from 'react';\n\nimport { Editable } from 'slate-react';\n\nimport type { TEditableProps } from '../../shared/types/slate-react/TEditableProps';\n\nimport { useEditableProps } from '../hooks';\nimport { useEditorRef } from '../stores';\nimport { EditorMethodsEffect } from './EditorMethodsEffect';\nimport { EditorRefEffect } from './EditorRefEffect';\nimport { EditorStateEffect } from './EditorStateEffect';\nimport { PlateControllerEffect } from './PlateControllerEffect';\nimport { PlateSlate } from './PlateSlate';\n\nexport type PlateContentProps = {\n  /** Renders the editable content. */\n  renderEditable?: (editable: React.ReactElement) => React.ReactNode;\n} & TEditableProps;\n\n/**\n * Editable with plugins.\n *\n * - Decorate prop\n * - DOM handler props\n * - ReadOnly prop\n * - RenderAfterEditable\n * - RenderBeforeEditable\n * - RenderElement prop\n * - RenderLeaf prop\n * - UseHooks\n */\nconst PlateContent = React.forwardRef(\n  ({ renderEditable, ...props }: PlateContentProps, ref) => {\n    const { id } = props;\n\n    const editor = useEditorRef(id);\n\n    if (!editor) {\n      throw new Error(\n        'Editor not found. Please ensure that PlateContent is rendered below Plate.'\n      );\n    }\n\n    const editableProps = useEditableProps(props);\n\n    const editable = <Editable ref={ref} {...(editableProps as any)} />;\n\n    let afterEditable: React.ReactNode = null;\n    let beforeEditable: React.ReactNode = null;\n\n    editor.plugins.forEach((plugin) => {\n      const {\n        renderAfterEditable: RenderAfterEditable,\n        renderBeforeEditable: RenderBeforeEditable,\n      } = plugin;\n\n      if (RenderAfterEditable) {\n        afterEditable = (\n          <>\n            {afterEditable}\n            <RenderAfterEditable {...editableProps} />\n          </>\n        );\n      }\n      if (RenderBeforeEditable) {\n        beforeEditable = (\n          <>\n            {beforeEditable}\n            <RenderBeforeEditable {...editableProps} />\n          </>\n        );\n      }\n    });\n\n    let aboveEditable: React.ReactNode = (\n      <>\n        {beforeEditable}\n\n        {renderEditable ? renderEditable(editable) : editable}\n\n        <EditorMethodsEffect id={id} />\n        <EditorStateEffect id={id} />\n        <EditorRefEffect id={id} />\n        <PlateControllerEffect id={id} />\n\n        {afterEditable}\n      </>\n    );\n\n    editor.plugins.forEach((plugin) => {\n      const { renderAboveEditable: RenderAboveEditable } = plugin;\n\n      if (RenderAboveEditable)\n        aboveEditable = (\n          <RenderAboveEditable>{aboveEditable}</RenderAboveEditable>\n        );\n    });\n\n    return <PlateSlate id={id}>{aboveEditable}</PlateSlate>;\n  }\n);\nPlateContent.displayName = 'PlateContent';\n\nexport { PlateContent };\n","import React from 'react';\n\nimport { focusAtom } from 'jotai-optics';\nimport { useFocused } from 'slate-react';\n\nimport {\n  plateControllerStore,\n  usePlateControllerActions,\n  usePlateId,\n  usePlateSelectors,\n  usePlateStore,\n} from '../stores';\n\nexport interface PlateControllerEffectProps {\n  id?: string;\n}\n\nexport const PlateControllerEffect = ({\n  id: idProp,\n}: PlateControllerEffectProps) => {\n  const idFromStore = usePlateId();\n  const id = idProp ?? idFromStore;\n\n  const currentStoreAtom = React.useMemo(\n    () =>\n      focusAtom(plateControllerStore.atom.editorStores, (optic) =>\n        optic.prop(id)\n      ),\n    [id]\n  );\n  const setCurrentStore = usePlateControllerActions().atom(currentStoreAtom, {\n    warnIfNoStore: false,\n  });\n  const store = usePlateStore(id).store();\n\n  const primary = usePlateSelectors(id).primary();\n  const setPrimaryEditorIds = usePlateControllerActions().primaryEditorIds({\n    warnIfNoStore: false,\n  });\n\n  const focused = useFocused();\n  const setActiveId = usePlateControllerActions().activeId({\n    warnIfNoStore: false,\n  });\n\n  React.useEffect(() => {\n    setCurrentStore(store ?? null);\n\n    return () => {\n      setCurrentStore(null);\n      setActiveId((activeId) => (activeId === id ? null : activeId));\n    };\n  }, [store, setCurrentStore, setActiveId, id]);\n\n  React.useEffect(() => {\n    if (primary) {\n      setPrimaryEditorIds((ids) => [...ids, id]);\n\n      return () => {\n        setPrimaryEditorIds((ids) => ids.filter((i) => i !== id));\n      };\n    }\n  }, [id, primary, setPrimaryEditorIds]);\n\n  React.useEffect(() => {\n    if (id && focused) {\n      setActiveId(id);\n    }\n  }, [id, focused, setActiveId]);\n\n  return null;\n};\n","import React from 'react';\n\nimport { Slate } from 'slate-react';\n\nimport { useSlateProps } from '../hooks';\nimport { type PlateId, useEditorRef } from '../stores/plate';\n\n/**\n * Slate with plugins.\n *\n * - OnChange prop\n * - RenderAboveSlate\n */\nexport function PlateSlate({\n  children,\n  id,\n}: {\n  children: React.ReactNode;\n  id?: PlateId;\n}) {\n  const slateProps = useSlateProps({ id });\n\n  const editor = useEditorRef(id);\n\n  let aboveSlate: React.ReactElement | null = (\n    <Slate {...(slateProps as any)}>{children}</Slate>\n  );\n\n  editor.plugins?.forEach((plugin) => {\n    const { renderAboveSlate: RenderAboveSlate } = plugin;\n\n    if (RenderAboveSlate)\n      aboveSlate = <RenderAboveSlate>{aboveSlate}</RenderAboveSlate>;\n  });\n\n  return aboveSlate;\n}\n","import React from 'react';\n\nimport type { Value } from '@udecode/slate';\n\nimport { createPlateEditor } from '../utils/createPlateEditor';\nimport { Plate, type PlateProps } from './Plate';\nimport { PlateContent, type PlateContentProps } from './PlateContent';\n\nexport function PlateTest<V extends Value>({\n  editableProps,\n  normalizeInitialValue,\n  variant = 'wordProcessor',\n  ...props\n}: {\n  editableProps?: PlateContentProps;\n  variant?: 'comment' | 'wordProcessor';\n} & PlateProps<V>) {\n  const { editor: _editor, id, plugins } = props;\n\n  let editor = _editor;\n\n  if (editor && !editor.plugins) {\n    editor = createPlateEditor({\n      editor,\n      id,\n      normalizeInitialValue,\n      plugins,\n    });\n  }\n\n  return (\n    <Plate {...props} editor={editor}>\n      <PlateContent\n        autoFocus\n        data-testid=\"slate-content-editable\"\n        data-variant={variant}\n        {...editableProps}\n      />\n    </Plate>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,aAAW;;;AC+FX,IAAM,qBAAgD;AAAA,EAC3D;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;;;ACtGA,SAAS,YAAY;AAErB,SAAS,uBAAuB;;;ACIzB,IAAM,gBAAgB;AAI7B,IAAM,eAA4C;AAAA,EAChD,SAAS;AACX;AAEO,IAAM,EAAE,iBAAiB,gBAAgB,IAAI;AAAA,EAClD;AAAA,EACA,EAAE,MAAM,UAAU;AACpB;;;ACTO,IAAM,aAAa,CACxB,YAAY,kBACN;AACN,QAAM,QAAQ,gBAAgB,SAAS,EAAE,IAAI,QAAQ;AAErD,MAAI,CAAC,OAAO;AACV,YAAQ;AAAA,MACN;AAAA,IACF;AAEA,WAAO,CAAC;AAAA,EACV;AAEA,SAAO;AACT;;;ACtBA,SAAS,cAAc;;;ACKvB,SAAS,0BAA0B;;;ACS5B,IAAM,mBAAmB,mBAAmB,cAAc,EAAE;AAAA,EACjE,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AACR,CAAqB;AAEd,IAAM,qBAAqB,iBAAiB;AAE5C,IAAM,uBAAuB,iBAAiB;AAE9C,IAAM,0BAA0B,iBAAiB;;;ACxBxD,OAAOC,YAAW;AAKlB,SAAS,QAAAC,OAAM,mBAAmB;;;ACLlC,SAAS,iBAAiB,kBAAkB;;;ACA5C;AAAA,EAGE;AAAA,EACA;AAAA,OACK;;;ACHP,OAAO,eAAe;;;ACAtB,OAAO,kBAAkB;AAWlB,IAAM,uBAAuB,CAKlC,QACA,gBAAqC,CAAC,GACtC,SAAS,UACyB;AArBpC;AAsBE,MAAI,cAAc,OAAO,GAAG,GAAG;AAC7B,UAII,mBAAc,OAAO,GAAG,GAH1B;AAAA,eAAS;AAAA,MACT,MAAM;AAAA,IAzBZ,IA2BQ,IADC,4BACD,IADC;AAAA,MAFH;AAAA,MACA;AAAA;AAKF,aAAS,aAAa,iBAAiB,MAAM;AAE7C,QAAI,CAAC,QAAQ;AAEX,uEAAwB,QAAQ,CAAC,eAAe;AAC9C,YAAI,CAAC,OAAO;AAAS,iBAAO,UAAU,CAAC;AAEvC,cAAM,QAAQ,OAAO,QAAQ,KAAK,CAAC,MAAM,EAAE,QAAQ,WAAW,GAAG;AAEjE,YAAI,CAAC;AAAO,iBAAO,QAAQ,KAAK,UAAU;AAAA,MAC5C;AAAA,IACF;AAAA,EACF;AACA,MAAI,OAAO,SAAS;AAElB,WAAO,UAAU,OAAO,QAAQ;AAAA,MAAI,CAAC,MACnC,qBAA+B,GAAG,eAAe,IAAI;AAAA,IACvD;AAAA,EACF;AAEA,QAAM,EAAE,KAAK,IAAI;AAEjB,MAAI,MAAM;AACR,QAAI,OAAO,kBAAkB,QAAW;AACtC,aAAO,gBAAgB;AAAA,IACzB;AAIA,QAAK,OAAO,gBAA2B,GAAG;AAExC,aAAO,OAAO,CAAC,QAAQ,MAAM;AAC3B,cAAM,aAAa,iBAAE,KAAK,OAAO,OAAQ,KAAK,QAAQ,CAAC;AAEvD,eAAO;AAAA,UACL,qBAAqB,YAAmB,aAAa;AAAA,UACrD;AAAA,QACF;AAAA,MACF;AACA,MAAC,OAAO;AAAA,IACV;AAAA,EACF,YAAW,mBAAc,OAAO,GAAG,MAAxB,mBAA2B,MAAM;AAE1C,WAAO,OAAO,cAAc,OAAO,GAAG,EAAE;AAAA,EAC1C;AAEA,SAAO;AACT;;;AD5DO,IAAM,gBAAgB,CAI3B,SACA;AAAA,EACE;AAAA,EACA;AACF,IAMI,CAAC,MACkC;AACvC,MAAI,mBAAkC,CAAC;AAEvC,MAAI,eAAe;AACjB,uBAAmB,UAAU,aAAa;AAAA,EAC5C;AACA,MAAI,YAAY;AACd,WAAO,KAAK,UAAU,EAAE,QAAQ,CAAC,QAAQ;AACvC,UAAI,CAAC,iBAAiB,GAAG;AAAG,yBAAiB,GAAG,IAAI,CAAC;AAErD,uBAAiB,GAAG,EAAE,YAAY,WAAW,GAAG;AAAA,IAClD,CAAC;AAAA,EACH;AACA,MAAI,OAAO,KAAK,gBAAgB,EAAE,SAAS,GAAG;AAC5C,WAAO,QAAQ,IAAI,CAAC,WAAW;AAC7B,aAAO,qBAAqB,QAAe,gBAAuB;AAAA,IACpE,CAAC;AAAA,EACH;AAEA,SAAO;AACT;;;AElDA;AAAA,EAEE;AAAA,OACK;AAKA,IAAM,sBAAsB,CACjC,QACA,YACG;AACH,sBAAiC,QAAQ;AAAA,IACvC,IAAI,CAAC;AAAA,IACL,OAAO,OAAO,gBAAgB;AAAA,KAC3B,QACG;AACV;;;ACbO,IAAM,cAAc,CAAkB,WAA2B;AACtE,sBAAoB,MAAM;AAE1B,SAAO,QAAQ,QAAQ,CAAC;AACxB,SAAO,QAAQ,QAAQ,CAAC;AACxB,SAAO,aAAa,CAAC;AACvB;;;ACZA;AAAA,EAGE;AAAA,EACA;AAAA,OACK;;;ACLA,IAAM,kBAAkB;;;ACUxB,IAAM,kBAAkB,CAK7B,WACgD;AAhBlD;AAiBE,UACG,sCAAQ,iBAAR,YAAwE,CAAC;AAE9E;;;ACRO,IAAM,YAAY,CAKvB,QACA,QAC0B;AAnB5B;AAmB+B,+BAAyB,MAAM,EAAE,GAAG,MAApC,YAAyC,EAAE,IAAI;AAAA;;;ACZvE,IAAM,gBAAgB,CAC3B,QACA,QACQ;AAVV;AAUa,+BAAiB,QAAQ,GAAG,EAAE,SAA9B,YAAsC,QAAtC,YAA6C;AAAA;;;AJoBnD,IAAM,iBAAiB,CAC5B,QACA,SACA,uBACG;AAlCL;AAmCE,QAAM,EAAE,YAAY,eAAe,cAAc,QAAQ,eAAe,EAAE,IACxE;AAEF,QAAM,MAAK,8DAAoB,OAApB,YAA0B,OAAO;AAE5C,MAAI,CAAC,cAAc,CAAC;AAAI;AAExB,QAAM,WAAW,SAAS,QAAQ,iCAC7B,qBAD6B;AAAA,IAEhC,OAAO;AAAA,MACL,MAAM;AAAA,IACR;AAAA,EACF,EAAC;AAED,MAAI,YAAY,eAAe;AAAc;AAE7C;AAAA,IACE;AAAA,IACA;AAAA,MACE,MAAM,WAAW,eAAe;AAAA,IAClC;AAAA,IACA,EAAE,GAAc;AAAA,EAClB;AACF;;;AKxDA,SAAS,aAAAC,kBAAiB;;;ACF1B,OAAO,eAAe;;;ACoBf,IAAM,sBACX,CAKE,kBAEF,CACE,UACA,gBAAuC,CAAC,MACH;AACrC,gBAAc,cAAc,GAAG,IAAI;AAEnC,SAAO;AAAA,IACL,mBAAK;AAAA,IACL;AAAA,EACF;AACF;;;ADlCK,IAAM,sBAAsB;AAM5B,IAAM,6BAA6B,oBAAoB;AAAA,EAC5D,QAAQ;AAAA,IACN,YAAY;AAAA,MACV,QAAQ;AAAA,MACR,aAAa,CAAC,EAAE,KAAK,MAAM;AACzB,cAAM,UAAU,mBAAmB,OAAO,KAAK,IAAI,CAAC;AACpD,YAAI;AAEJ,YAAI;AACF,mBAAS,KAAK,MAAM,OAAO;AAAA,QAC7B,SAAS,OAAO;AAAA,QAEhB;AAEA,eAAO,UAAU,MAAM;AAAA,MACzB;AAAA,IACF;AAAA,EACF;AAAA,EACA,KAAK;AACP,CAAC;;;AE7BD;AAAA,EAKE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAMP,IAAM,gBAAgB,CACpB,QACA,UAAkC,CAAC,MAEnC,aAAmB,QAAQ,iCACtB,UADsB;AAAA,EAEzB,OAAO;AACT,EAAC;AAEH,IAAM,0BAA0B,CAC9B,QACA,YACG;AA5BL;AA6BE,QAAM,EAAE,UAAU,IAAI;AAEtB,MAAI,CAAC;AAAW,WAAO;AAEvB,QAAM,QAAO,mBAAc,QAAQ,OAAO,MAA7B,mBAAiC;AAE9C,MAAI,CAAC;AAAM,WAAO;AAElB,SACE,aAAa,QAAQ,UAAU,OAAO,IAAI,KACzC,WAAW,OAAO,SAAS,KAC1B,aAAa,QAAQ,UAAU,QAAQ,IAAI;AAEjD;AAEA,IAAM,sBAAsB,CAA0B,WAAuB;AAC3E,QAAM,QAAQ,SAAS,MAAM;AAE7B,MAAI,CAAC;AAAO;AAGZ,SAAO,KAAK,KAAK,EAAE,QAAQ,CAAC,QAAQ;AAClC,qBAAiB,QAAQ,GAAG;AAAA,EAC9B,CAAC;AACH;AAEO,IAAM,sBAAsB;AAE5B,IAAM,qBAAqB,CAIhC,WACG;AACH,QAAM,EAAE,gBAAgB,eAAe,eAAe,IAAI;AAE1D,QAAM,aAAa,MAAM;AACvB,QAAI,wBAAwB,MAAM,GAAG;AACnC,0BAAoB,MAAM;AAAA,IAC5B;AAAA,EACF;AAEA,SAAO,iBAAiB,CAAC,SAAS;AAChC,mBAAe,IAAI;AAEnB,eAAW;AAAA,EACb;AAEA,SAAO,gBAAgB,CAAC,SAAS;AAC/B,kBAAc,IAAI;AAElB,eAAW;AAAA,EACb;AAEA,SAAO,iBAAiB,CAAC,cAAc;AACrC,mBAAe,SAAS;AAExB,eAAW;AAAA,EACb;AAEA,SAAO;AACT;AAEO,IAAM,6BAA6B,oBAAoB;AAAA,EAC5D,KAAK;AAAA,EACL,eAAe;AACjB,CAAC;;;AC7FD,SAAS,mBAAmB;AAIrB,IAAM,cAAc;AAEpB,IAAM,eAAe,CAK1B,WACG,YAAY,MAAa;AAGvB,IAAM,sBAAsB,oBAAoB;AAAA,EACrD,KAAK;AAAA,EACL,eAAe;AACjB,CAAC;;;ACdM,IAAM,kBAAkB;AAMxB,IAAM,iBAAiB,CAI5B,WACG;AACH,QAAM,EAAE,UAAU,QAAQ,aAAa,IAAI;AAE3C,QAAM,YAAsB,CAAC;AAC7B,QAAM,cAAwB,CAAC;AAC/B,QAAM,oBAA8B,CAAC;AAErC,SAAO,QAAQ,QAAQ,CAAC,WAAW;AACjC,QAAI,OAAO,UAAU;AACnB,kBAAY,KAAK,OAAO,IAAI;AAAA,IAC9B;AACA,QAAI,OAAO,QAAQ;AACjB,gBAAU,KAAK,OAAO,IAAI;AAAA,IAC5B;AACA,QAAI,OAAO,gBAAgB;AACzB,wBAAkB,KAAK,OAAO,IAAI;AAAA,IACpC;AAAA,EACF,CAAC;AAED,SAAO,WAAW,CAAC,YAAY;AAC7B,WAAO,YAAY,SAAS,QAAQ,IAAI,IAAI,OAAO,SAAS,OAAO;AAAA,EACrE;AAEA,SAAO,SAAS,CAAC,YAAY;AAC3B,WAAO,UAAU,SAAS,QAAQ,IAAI,IAAI,OAAO,OAAO,OAAO;AAAA,EACjE;AAEA,SAAO,eAAe,CAAC,YAAY;AACjC,WAAO,kBAAkB,SAAS,QAAQ,IAAI,IAC1C,OACA,aAAa,OAAO;AAAA,EAC1B;AAEA,SAAO;AACT;AAGO,IAAM,yBAAyB,oBAAoB;AAAA,EACxD,KAAK;AAAA,EACL,eAAe;AACjB,CAAC;;;ACtCM,IAAM,qBAAqB,CAKhC,QACA,WAC8B;AAC9B,QAAM,kBAA6C,CAAC;AAEpD,GAAC,GAAG,OAAO,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,MAAM;AA7B/C;AA8BI,UAAM,kBAAiB,OAAE,OAAO,iBAAT,mBACrB,OAAO;AAGT,QAAI;AAAgB,sBAAgB,KAAK,cAAc;AAAA,EACzD,CAAC;AAED,SAAO,CAAC,QAAmC,GAAG,eAAe;AAC/D;;;AC9BO,IAAM,sBAAsB,CAKjC,SACA,EAAE,MAAM,aAAa,MAErB,QAAQ,MAAM,CAAC,MAAM;AAhBvB;AAiBI,QAAM,SAAQ,aAAE,WAAF,mBAAU,eAAV,mBAAsB;AAEpC,SACE,CAAC,SACD,MAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,CAAC;AAEL,CAAC;;;AC1BH;AAAA,EAGE;AAAA,OACK;AAOA,IAAM,qBAAqB,CAChC,QACA,iBACA,OAIG;AAJH,eACE;AAAA;AAAA,EAfJ,IAcE,IAEK,oBAFL,IAEK;AAAA,IADH;AAAA;AAIF,qBAAmB,QAAQ,MAAM;AAC/B,oBAAgB,KAAK,CAAC,MAAM;AApBhC,UAAAC,KAAAC,KAAA;AAqBM,eAAO,MAAAA,OAAAD,MAAA,EAAE,WAAF,gBAAAA,IAAU,eAAV,gBAAAC,IAAsB,cAAtB,wBAAAA,KAAkC,UAAU,cAAa;AAAA,IAClE,CAAC;AAED,WAAO,eAAe,QAAQ;AAAA,EAChC,CAAC;AACH;;;ACnBO,IAAM,oBAAoB,CAC/B,SACA,EAAE,MAAM,aAAa,MAClB;AACH,UAAQ,QAAQ,CAAC,MAAM;AAXzB;AAYI,UAAM,iBAAgB,aAAE,WAAF,mBAAU,eAAV,mBAAsB;AAE5C,QAAI,CAAC;AAAe;AAEpB,WAAO,cAAc,MAAM,EAAE,aAAa,CAAC;AAAA,EAC7C,CAAC;AAED,SAAO;AACT;;;ACbO,IAAM,wBAAwB,CAInC,SACA,OAIG;AAJH,eACE;AAAA;AAAA,EAbJ,IAYE,IAEK,oBAFL,IAEK;AAAA,IADH;AAAA;AAIF,UAAQ,QAAQ,CAAC,MAAM;AAjBzB,QAAAC,KAAAC;AAkBI,UAAM,qBAAoBA,OAAAD,MAAA,EAAE,WAAF,gBAAAA,IAAU,eAAV,gBAAAC,IAAsB;AAEhD,QAAI,CAAC;AAAmB;AAExB,eAAW,kBAAkB,UAAU,OAAO;AAAA,EAChD,CAAC;AAED,SAAO;AACT;;;ACfO,IAAM,iBAAiB,CAI5B,WACG;AACH,QAAM,EAAE,WAAW,IAAI;AAEvB,SAAO,aAAa,CAAC,iBAAiB;AACpC,UAAM,WAAW,CAAC,GAAG,OAAO,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC,WAAW;AAC9D,YAAM,oBAAoB,OAAO,OAAO;AAExC,UAAI,CAAC;AAAmB,eAAO;AAE/B,YAAM,kBAAkB,mBAA0B,QAAQ,MAAM;AAChE,YAAM,EAAE,QAAQ,YAAY,IAAI;AAEhC,UAAI,CAAC;AAAQ,eAAO;AAEpB,UAAI,OAAO,aAAa,QAAQ,MAAM;AAEtC,UAAI,CAAC;AAAM;AACX,UACE,CAAC,oBAA2B,iBAAiB;AAAA,QAC3C;AAAA,QACA;AAAA,MACF,CAAC,GACD;AACA,eAAO;AAAA,MACT;AAEA,aAAO,kBAAkB,iBAAiB;AAAA,QACxC;AAAA,QACA;AAAA,MACF,CAAC;AAED,UAAI,WAAW,2CAAc;AAAA,QAC3B;AAAA,QACA;AAAA,MACF;AAEA,UAAI,EAAC,qCAAU;AAAQ,eAAO;AAE9B,iBAAW,sBAAsB,iBAAiB;AAAA,QAChD;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAED,UAAI,SAAS,WAAW;AAAG,eAAO;AAElC,yBAAmB,QAAQ,iBAAiB;AAAA,QAC1C;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAED,aAAO;AAAA,IACT,CAAC;AAED,QAAI;AAAU;AAEd,eAAW,YAAY;AAAA,EACzB;AAEA,SAAO;AACT;AAEO,IAAM,kBAAkB;AAExB,IAAM,yBAAyB,oBAAoB;AAAA,EACxD,KAAK;AAAA,EACL,eAAe;AACjB,CAAC;;;ACpFD,SAAS,iBAAiB,sBAAAC,2BAA0B;AAU7C,IAAM,aAAa;AAEnB,IAAM,aAAyC,CAAC,QAAQ,EAAE,QAAQ,MAAM;AAC7E,QAAM,EAAE,MAAM,IAAI;AAElB,SAAO,QAAQ,CAAC,cAAc;AAC5B,IAAAC,oBAAmB,QAAQ,MAAM;AAC/B,YAAM,SAAS;AAEf,UAAI,QAAQ,WAAW;AACrB,cAAM,SAAS,gBAAgB,QAAQ,CAAC,CAAC,EAAE;AAG3C,YAAI,SAAS,QAAQ,WAAW;AAC9B,gBAAM,iBAAiB,SAAS,QAAQ;AAExC,iBAAO,OAAO;AAAA,YACZ,UAAU;AAAA,YACV,SAAS;AAAA,YACT,MAAM;AAAA,UACR,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAEA,SAAO;AACT;AAEO,IAAM,qBAAqB,oBAAkC;AAAA,EAClE,KAAK;AAAA,EACL,eAAe;AACjB,CAAC;;;ACxCD;AAAA,EAKE;AAAA,EACA;AAAA,OACK;AAkBA,IAAM,mBAAmB,CAAkB;AAAA,EAChD;AAAA,EACA;AAAA,EACA,OAAO,CAAC;AAAA,EACR;AAAA,EACA;AACF,MAAkC;AAChC,QAAM,QAAuB,CAAC,MAAM,IAAI;AAExC,MAAI,UAAa,OAAO,KAAK,GAAG;AAC9B,QAAI,kBAAkB,UAAU;AAC9B,YAAM,MAAM,OAAO,CAAC;AAAA,IACtB,OAAO;AACL,YAAM,MAAM,MAAM;AAAA,IACpB;AAAA,EACF;AACA,MAAI,CAAC,WAAW,IAAI;AAAG;AAEvB,OAAK,SAAS,QAAQ,CAAC,OAAO,UAAU;AACtC,qBAAiB;AAAA,MACf;AAAA,MACA,MAAM;AAAA,MACN,MAAM,KAAK,OAAO,CAAC,KAAK,CAAC;AAAA,MACzB;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH;;;ACpDA,OAAOC,mBAAkB;;;ACAzB,OAAOC,mBAAkB;AACzB,OAAO,WAAW;AAClB,OAAO,WAAW;AAClB,OAAO,YAAY;AAMZ,IAAM,mBAAmB,CAK9B,QACA,YACM;AACN,QAAM,SAAS,mBAAK;AAEpB,QAAM,EAAE,KAAK,IAAI;AAEjB,MAAI,MAAM;AACR,WAAO,OAAO;AAEd,UAAM,EAAE,SAAS,cAAc,IAAI;AAEnC,UAAM,aAAa;AAAA,MACjB;AAAA,MACAC,cAAa,KAAK,QAAQ,MAAM,GAAG,MAAM;AAAA,IAC3C;AAGA,QAAI,iBAAiB,WAAW,SAAS;AACvC,YAAM,SAAS;AAAA,QACb,MAAM,eAAe,KAAK;AAAA,QAC1B,MAAM,WAAW,SAAS,KAAK;AAAA,MACjC;AAEA,iBAAW,UAAU,OAAO,MAAM;AAAA,IACpC;AAEA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;;;ACtCO,IAAM,mBAAmB,CAK9B,WAC6B;AAC7B,MAAI,OAAO,SAAS;AAAW,WAAO,OAAO,OAAO;AACpD,MAAI,CAAC,OAAO;AAAS,WAAO,UAAU,CAAC;AACvC,MAAI,CAAC,OAAO;AAAQ,WAAO,SAAS,CAAC;AACrC,MAAI,CAAC,OAAO;AAAQ,WAAO,SAAS,CAAC;AAErC,SAAO;AACT;;;AFXO,IAAM,qBAAqB,CAChC,QACA,YACG;AACH,MAAI,CAAC;AAAS;AAEd,UAAQ,QAAQ,CAAC,WAAW;AAC1B,QAAI,IAAI,iBAAiB,MAAM;AAE/B,QAAI,iBAAoB,QAAQ,CAAC;AAEjC,QAAI,EAAE,YAAY;AAAO;AACzB,QAAI,OAAO,aAAa,EAAE,GAAG,GAAG;AAC9B,YAAM,QAAQ,OAAO,QAAQ,QAAQ,OAAO,aAAa,EAAE,GAAG,CAAC;AAE/D,YAAM,eAAeC,cAAa,GAAG,OAAO,aAAa,EAAE,GAAG,CAAC;AAE/D,UAAI,SAAS,GAAG;AACd,eAAO,QAAQ,KAAK,IAAI;AAAA,MAC1B;AAEA,aAAO,aAAa,EAAE,GAAG,IAAI;AAAA,IAC/B,OAAO;AACL,aAAO,QAAQ,KAAK,CAAC;AACrB,aAAO,aAAa,EAAE,GAAG,IAAI;AAAA,IAC/B;AAEA,uBAAmB,QAAQ,EAAE,OAAQ;AAAA,EACvC,CAAC;AACH;;;AGtCA,OAAOC,gBAAe;AAKf,IAAM,iBAAiB,CAC5B,QACA,SACG;AACH,QAAM,QAAQA,WAAkB,IAAI;AAEpC,QAAM,QAAQ,OAAO,OAAO,OAAO,YAAY,EAAE,OAAO,CAAC,WAAW;AAClE,WAAO,MAAM,SAAS,OAAO,IAAI;AAAA,EACnC,CAAC;AAED,SAAO,MAAM,IAAI,CAAC,MAAM,EAAE,GAAG;AAC/B;;;ACXO,IAAM,eAAe,CAC1B,QACA,SACuB;AACvB,SAAO,eAAkB,QAAQ,IAAI,EAAE,CAAC;AAC1C;;;ACLO,IAAM,uBAAuB,CAClC,QACA,QACA;AAVF;AAUK,+BAAiB,QAAQ,GAAG,EAAE,WAA9B,mBAAsC,UAAtC,YAA+C,CAAC;AAAA;;;ACH9C,IAAM,mBAAmB,CAK9B,QACA,QACG;AAdL;AAcQ,yBAAmB,QAAQ,GAAG,EAAE,YAAhC,YAA4C,CAAC;AAAA;;;ACP9C,IAAM,iBAAiB,CAC5B,QACA,SACG,KAAK,IAAI,CAAC,QAAQ,cAAc,QAAQ,GAAG,CAAC;;;ACJ1C,IAAM,aAAa,CAIxB,WACuC;AAXzC;AAYE,UAAQ,sCAAQ,YAAR,YAA0D,CAAC;AACrE;;;ACVA,SAAS,YAAY;AACrB,OAAO,UAAU;;;ACHV,IAAM,gBAAgB,CAAC,SAAiB,SAAS,IAAI;;;ADerD,IAAM,qBAAqB,CAAkB;AAAA,EAClD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAI4E;AA1B5E;AA2BE,MAAI,WAAsB,CAAC;AAE3B,MAAI,OAAO;AACT,gBACG,YAAO,UAAU,aAAa,MAAM,SAAgB,IAAI,UAAxD,YAAkE,CAAC;AAAA,EACxE;AACA,MAAI,CAAC,SAAS,aAAa,YAAY;AAQrC,aAAS,YAAY,KAAK,YAAY,kEAA8B,CAAC,CAAC;AAAA,EACxE;AAEA,cAAY,kCAAK,YAAc;AAE/B,MAAI,UAAU,WAAW;AAEvB,WAAO,KAAK,UAAU,SAAS,EAAE,QAAQ,CAAC,QAAQ;AAhDtD,UAAAC,KAAA;AAiDM,YAAIA,MAAA,UAAU,cAAV,gBAAAA,IAAsB,UAAS,QAAW;AAC5C,cAAO,UAAU,cAAjB,wBAA6B;AAAA,MAC/B;AAAA,IACF,CAAC;AAAA,EACH;AAEA,QAAM,EAAE,UAAU,IAAI;AAEtB,SAAO,iCAAK,YAAL,EAAgB,WAAW,KAAK,cAAc,IAAI,GAAG,SAAS,EAAE;AACzE;;;AE7CO,IAAM,yBAAyB,CAKpC,QACA,QACA,mBACG;AArBL;AAsBE,QAAM,cAAa,YAAO,OAAO,UAAd,mBAAqB;AAExC,MAAI,CAAC;AAAY;AAEjB,QAAM,OAAO,eAAe,QAAQ,UAAU;AAE9C,QAAM,WAAoD,CAAC;AAE3D,OAAK,QAAQ,CAAC,QAAQ;AACpB,aAAS,GAAG,IAAI;AAAA,EAClB,CAAC;AAED,SAAO;AAAA,IACL,QAAQ;AAAA,MACN,cAAc;AAAA,IAChB;AAAA,EACF;AACF;;;ACrCA,OAAOC,YAAW;AAQX,IAAM,mBAAmB,CAC9B,YACG;AACH,mBAAiB,iCAAK,UAAL,EAAc,OAAOC,OAAM,EAAC;AAC/C;;;ACJO,IAAM,aAAa,CAKxB,WAEC;AAAA,EACC,QAAQ,CAAC;AAAA,EACT,QAAQ,CAAC;AAAA,EACT,KAAK;AAAA,EACL,SAAS,CAAC;AAAA,EACV,MAAM;AAAA,GACH;;;ACvBP;AAAA,EAKE;AAAA,EACA;AAAA,OACK;AAOP,IAAM,eACJ,CAAkB,WAClB,CAAC,SACC,OAAO,IAAI,KAAM,UAAU,IAAI,KAAK,OAAO,SAAS,IAAI;AAE5D,IAAM,gBAAgB,CAAC,SAAiB,OAAoB;AAAA,EAC1D,UAAU,CAAC;AAAA,EACX;AACF;AAEA,IAAM,yBAAyB,CAC7B,aACA,aACY;AACZ,SAAO,YAAY,KAAK,CAAC,YAAY,OAAO,QAAQ;AAClD,UAAM,iBAAiB,IAAI,QAAQ,CAAC;AAEpC,QAAI,UAAU,GAAG;AACf,aAAO,SAAS,UAAU,MAAM,SAAS,cAAc;AAAA,IACzD;AAEA,WAAO;AAAA,EACT,CAAC;AACH;AAMA,IAAM,8BAA8B,CAClC,aACA,UACA,qBACQ;AACR,QAAM,oBAAoB,uBAAuB,aAAa,QAAQ;AAEtE,QAAM,EAAE,SAAS,IAAI,YAAY;AAAA,IAC/B,CAAC,MAAM,SAAS;AACd,UAAI,qBAAqB,SAAS,IAAI,GAAG;AACvC,YAAI,QAAQ,KAAK;AAEjB,YAAI,CAAC,OAAO;AACV,kBAAQ,iBAAiB;AACzB,eAAK,iBAAiB;AACtB,eAAK,SAAS,KAAK,KAAK;AAAA,QAC1B;AAEA,QAAC,MAAM,SAAiB,KAAK,IAAI;AAAA,MACnC,OAAO;AACL,aAAK,SAAS,KAAK,IAAI;AACvB,aAAK,iBAAiB;AAAA,MACxB;AAEA,aAAO;AAAA,IACT;AAAA,IACA;AAAA,MACE,UAAU,CAAC;AAAA,MACX,gBAAgB;AAAA,IAClB;AAAA,EACF;AAEA,SAAO;AACT;AAMA,IAAM,yBAAyB,CAC7B,gBACQ;AACR,MAAI,YAAY,WAAW,GAAG;AAC5B,WAAO,CAAC,EAAE,MAAM,GAAG,CAAM;AAAA,EAC3B;AAEA,SAAO;AACT;AAEA,IAAM,YAAY,CAChB,aACA,UACA,qBACQ;AACR,gBAAc,uBAAuB,WAAW;AAChD,gBAAc;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,gBAAc,YAAY,IAAI,CAAC,SAAS;AACtC,QAAI,UAAU,IAAI,GAAG;AACnB,aAAO,iCACF,OADE;AAAA,QAEL,UAAU,UAAU,KAAK,UAAiB,UAAU,gBAAgB;AAAA,MACtE;AAAA,IACF;AAEA,WAAO;AAAA,EACT,CAAC;AAED,SAAO;AACT;AAGO,IAAM,yCAAyC,CACpD,QACA,EAAE,YAAY,MACO;AACrB,QAAM,WAAW,aAAgB,MAAM;AACvC,QAAM,cAAc,cAAc,QAAQ,eAAe;AACzD,QAAM,mBAAmB,cAAc,WAAW;AAElD,SAAO,UAAU,aAAa,UAAU,gBAAuB;AACjE;;;AC9HA,OAAOC,gBAAe;AACtB,OAAO,aAAa;AAKb,IAAM,wBAAwB,CACnC,QACA,UACG;AACH,MAAI,kBAAkBA,WAAU,KAAK;AAErC,SAAO,QAAQ,QAAQ,CAAC,MAAM;AAdhC;AAeI,UAAM,oBAAmB,OAAE,0BAAF,2BAA0B;AAEnD,QAAI,kBAAkB;AAEpB,wBAAkB;AAAA,IACpB;AAAA,EACF,CAAC;AAED,MAAI,CAAC,QAAQ,OAAO,eAAe,GAAG;AACpC,WAAO;AAAA,EACT;AACF;;;ACjBO,IAAM,eAAe,CAC1B,QACA,iBAC+B;AAC/B,QAAM,YAAY,OAAO,QAAQ;AAAA,IAC/B,CAAC,WAAQ;AAdb;AAcgB,gCAAO,aAAP,gCAAkB,QAAQ,YAA1B,YAAqC,CAAC;AAAA;AAAA,EACpD;AAEA,MAAI,cAAc;AAChB,cAAU,KAAK,YAAY;AAAA,EAC7B;AACA,MAAI,UAAU,WAAW;AAAG;AAE5B,SAAO,CAAC,UAAU;AAChB,QAAI,SAAkB,CAAC;AAEvB,UAAM,YAAY,CAAC,cAAwB;AACzC,UAAI,uCAAW;AAAQ,iBAAS,CAAC,GAAG,QAAQ,GAAG,SAAS;AAAA,IAC1D;AAEA,cAAU,QAAQ,CAAC,aAAa;AAC9B,gBAAU,SAAS,KAAK,CAAC;AAAA,IAC3B,CAAC;AAED,WAAO;AAAA,EACT;AACF;;;ACxBO,IAAM,kCAAkC,CAC7C,aAC2C;AAC3C,MAAI,qBAAqB;AAEzB,SAAO,iCACF,WADE;AAAA,IAEL,SAAS,SAAS;AAAA,IAClB,YAAY,SAAS;AAAA,IACrB,eAAe,SAAS;AAAA,IACxB,kBAAkB,SAAS;AAAA,IAC3B,YAAY,SAAS;AAAA,IACrB,oBAAoB,MAAM,SAAS;AAAA,IACnC,sBAAsB,MAAM;AAAA,IAC5B,WAAW,SAAS;AAAA,IACpB,aAAa;AAAA,IACb,SAAS,MAAM;AACb,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAAA,IACA,gBAAgB,MAAM,SAAS,eAAe;AAAA,IAC9C,iBAAiB,MAAM;AACrB,2BAAqB;AACrB,eAAS,gBAAgB;AAAA,IAC3B;AAAA,IACA,QAAQ,SAAS;AAAA,IACjB,WAAW,SAAS;AAAA,IACpB,MAAM,SAAS;AAAA,EACjB;AACF;AAGO,IAAM,iBAAiB,CAG5B,OACA,YACG;AACH,MAAI,CAAC,SAAS;AACZ,WAAO;AAAA,EACT;AAIA,QAAM,4BAA4B,QAAQ,KAAK;AAE/C,MAAI,6BAA6B,MAAM;AACrC,WAAO;AAAA,EACT;AAEA,SAAO,MAAM,qBAAqB;AACpC;AAYO,IAAM,cAAc,CACzB,QACA;AAAA,EACE;AAAA,EACA;AACF,MACuC;AACvC,MAAI,kBAAyD,CAAC;AAC9D,oBAAkB,OAAO,QAAQ;AAAA,IAC/B,CAAC,WAAQ;AApFb;AAoFgB,sCAAO,aAAP,mBAAkB,gBAAlB,4BAAgC,QAAQ,YAAxC,YAAmD,CAAC;AAAA;AAAA,EAClE;AAEA,QAAM,eAAe,+CAAgB;AAIrC,MAAI,gBAAgB,WAAW,KAAK,CAAC;AAAc;AAEnD,SAAO,CAAC,UAAe;AACrB,UAAM,aAAa,iBAAiB;AACpC,UAAM,eAAe,aACjB,gCAAgC,KAAK,IACrC;AAEJ,UAAM,iBAAiB,gBAAgB;AAAA,MAAK,CAAC,YAC3C,eAAe,cAAc,OAAO;AAAA,IACtC;AAEA,QAAI;AAAgB,aAAO;AAE3B,WAAO,eAAe,cAAc,YAAY;AAAA,EAClD;AACF;;;ACzGA;AAAA,EAIE,aAAAC;AAAA,OACK;AACP,SAAyB,iBAAiB;AAC1C,SAAS,QAAAC,aAAY;AAgCd,IAAM,oBAAoB,CAC/B,QACA,EAAE,QAAQ,EAAE,MAAM,GAAG,IAAI,GACzB,cACyC;AA7C3C;AA8CE,QAAM,EAAE,WAAW,SAAS,OAAO,KAAK,IAAI;AAE5C,QAAM,OAAO,4BAAW;AAExB,MAAI,CAAC;AAAM;AACX,MAAI,CAAC;AAAO;AAEZ,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA,UAAU;AAAA,IACV;AAAA,IACA,WAAW;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AAEJ,QAAM,cAAc,+BAAQ,OAAO;AAEnC,MACE,CAAC,eACD,cACAC,WAAU,IAAI,KACd,KAAK,QACL,CAAC,WAAW,SAAS,KAAK,IAAI,GAC9B;AACA;AAAA,EACF;AAEA,QAAM,YAAY,KAAK,OAAQ;AAG/B,MACE,CAAC,gBACA,CAAC,UAAU,SAAS,KAClB,mBAAmB,CAAC,gBAAgB,SAAS,SAAS,KACvD,cAAc,mBAChB;AACA;AAAA,EACF;AAEA,QAAM,mBAAwC,iCAAK,YAAL,EAAgB,UAAU;AACxE,QAAM,SAAQ,8DAAqB,sBAArB,YAA0C;AACxD,mBAAiB,QAAQ;AAEzB,MAAI,MAAgC,CAAC;AAErC,MAAI,SAAS;AACX,QAAI,YAAYC,MAAK,WAAW,SAAS,OAAO,IAAI,SAAS,EAAE;AAAA,EACjE;AACA,OAAI,yCAAa,eAAc,oBAAoB;AACjD,QAAI,aACF,8DAAqB,sBAArB,YACAA,MAAK,WAAW,yCAAa,MAAM;AAAA,EACvC;AACA,MAAI,UAAU;AACZ,QAAI,SAAQ,sDAAiB,sBAAjB,YAAsC,iCAC7C,QAD6C;AAAA,MAEhD,CAAC,QAAkB,GAAG;AAAA,IACxB;AAAA,EACF;AACA,MAAI,gBAAgB;AAClB,WAAM,oBAAe,kBAAkB,GAAG,MAApC,YAAyC;AAAA,EACjD;AAEA,SAAO;AACT;;;AC7GO,IAAM,kBAAkB,CAC7B,QACA,cACG;AACH,SAAO,QAAQ,QAAQ,CAAC,WAAW;AACjC,QAAI,OAAO,OAAO,OAAO;AACvB,YAAM,QAAQ,kBAAkB,QAAQ,QAAQ,SAAS;AAEzD,UAAI,OAAO;AACT,oBAAY,kCACP,YACA;AAAA,MAEP;AAAA,IACF;AAAA,EACF,CAAC;AAED,SAAO,iCAAK,YAAL,EAAgB,OAAO;AAChC;;;ACrBO,IAAM,eAAe,CAAkB,WAA2B;AACvE,QAAM,YAAY,OAAO,QAAQ;AAAA,IAC/B,CAAC,WAAQ;AANb;AAMgB,sCAAO,aAAP,mBAAiB,aAAjB,4BAA4B,QAAQ,YAApC,YAA+C,CAAC;AAAA;AAAA,EAC9D;AAEA,SAAO,CAAC,UAAa;AACnB,WAAO,UAAU,KAAK,CAAC,YAAY;AACjC,UAAI,CAAC,SAAS;AACZ,eAAO;AAAA,MACT;AAIA,YAAM,4BAA4B,QAAQ,KAAK;AAE/C,UAAI,6BAA6B,MAAM;AACrC,eAAO;AAAA,MACT;AAEA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AACF;;;ACxBA,SAAS,gBAAgB;AACzB,SAAS,mBAAmB;AAE5B,SAAS,gBAAgB;AAGzB,IAAM,UAAU;AAAA,EACd,MAAM;AAAA,EACN,SAAS,CAAC,QAAQ,QAAQ,SAAS,MAAM,aAAa,OAAO;AAAA,EAC7D,gBAAgB;AAAA,EAChB,eAAe;AAAA,EACf,gBAAgB;AAAA,EAChB,eAAe;AAAA,EACf,iBAAiB;AAAA,EACjB,QAAQ;AAAA,EACR,cAAc;AAAA,EACd,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,iBAAiB;AAAA,EACjB,YAAY;AAAA,EACZ,KAAK;AAAA,EACL,MAAM;AAAA,EACN,OAAO;AACT;AAEA,IAAM,gBAAgB;AAAA,EACpB,gBAAgB,CAAC,kBAAkB,QAAQ;AAAA,EAC3C,eAAe,CAAC,eAAe,QAAQ;AAAA,EACvC,oBAAoB;AAAA,EACpB,mBAAmB,CAAC,qBAAqB,QAAQ;AAAA,EACjD,oBAAoB;AAAA,EACpB,mBAAmB;AAAA,EACnB,oBAAoB;AAAA,EACpB,mBAAmB;AAAA,EACnB,kBAAkB;AAAA,EAClB,iBAAiB;AAAA,EACjB,kBAAkB;AAAA,EAClB,iBAAiB;AAAA,EACjB,MAAM;AAAA,EACN,oBAAoB;AACtB;AAEA,IAAM,kBAAkB;AAAA,EACtB,oBAAoB;AAAA,EACpB,mBAAmB;AAAA,EACnB,MAAM,CAAC,UAAU,cAAc;AACjC;AAIO,IAAM,eAAe,CAAC,QAAgB;AAC3C,QAAM,UAAW,QAAgB,GAAG;AACpC,QAAM,QAAS,cAAsB,GAAG;AACxC,QAAM,UAAW,gBAAwB,GAAG;AAC5C,QAAM,YAAY,WAAW,YAAY,OAAO;AAChD,QAAM,UAAU,SAAS,YAAY,KAAK;AAC1C,QAAM,YAAY,WAAW,YAAY,OAAO;AAEhD,SAAO,CAAC,UAA+B;AACrC,QAAI,uCAAY;AAAQ,aAAO;AAC/B,QAAI,aAAY,mCAAU;AAAQ,aAAO;AACzC,QAAI,CAAC,aAAY,uCAAY;AAAQ,aAAO;AAE5C,WAAO;AAAA,EACT;AACF;AAEO,IAAM,gBAAgB;AAAA,EAC3B,QAAQ,aAAa,MAAM;AAAA,EAC3B,WAAW,aAAa,SAAS;AAAA,EACjC,kBAAkB,aAAa,gBAAgB;AAAA,EAC/C,iBAAiB,aAAa,eAAe;AAAA,EAC7C,sBAAsB,aAAa,oBAAoB;AAAA,EACvD,qBAAqB,aAAa,mBAAmB;AAAA,EACrD,sBAAsB,aAAa,oBAAoB;AAAA,EACvD,qBAAqB,aAAa,mBAAmB;AAAA,EACrD,kBAAkB,aAAa,gBAAgB;AAAA,EAC/C,iBAAiB,aAAa,eAAe;AAAA,EAC7C,sBAAsB,aAAa,oBAAoB;AAAA,EACvD,qBAAqB,aAAa,mBAAmB;AAAA,EACrD,UAAU,aAAa,QAAQ;AAAA,EAC/B,gBAAgB,aAAa,cAAc;AAAA,EAC3C,eAAe,aAAa,aAAa;AAAA,EACzC,oBAAoB,aAAa,kBAAkB;AAAA,EACnD,mBAAmB,aAAa,iBAAiB;AAAA,EACjD,oBAAoB,aAAa,kBAAkB;AAAA,EACnD,mBAAmB,aAAa,iBAAiB;AAAA,EACjD,QAAQ,aAAa,MAAM;AAAA,EAC3B,aAAa,aAAa,iBAAiB;AAAA,EAC3C,cAAc,aAAa,YAAY;AAAA,EACvC,sBAAsB,aAAa,oBAAoB;AAAA,EACvD,QAAQ,aAAa,MAAM;AAC7B;;;AC9FA,OAAO,WAAW;AAOX,IAAM,UAAU,CACrB,KACA,WACA,UACA,WAEA,MAAM,WAAyC,CAAC,OAAO,iBACrD,oCAAC,sCAAS,WAAT,EAA2B,KAAK,WAC/B,oCAAC,4CAAc,QAAd,EAAqB,KAAK,eAAc,CAC3C,CACD;;;ACbI,IAAM,mBAAmB;AAEzB,IAAM,0BAA0B,oBAAoB;AAAA,EACzD,KAAK;AAAA,EACL,eAAe,CAAC,WAAW;AACzB,WAAO,eAAe,CAAC,SAAU;AAAA,MAC/B,UAAU,CAAC,EAAE,MAAM,GAAG,CAAC;AAAA,MACvB,MAAM,cAAc,QAAQ,eAAe;AAAA,OACxC;AAEL,WAAO,kBAAkB,MAAM,CAAC,OAAO,aAAa,CAAC;AAErD,WAAO;AAAA,EACT;AACF,CAAC;;;ACdM,IAAM,qBAAqB;AAE3B,IAAM,4BAA4B,oBAAoB;AAAA,EAC3D,UAAU;AAAA,IACR,WAAW,CAAC,WAAW,CAAC,MAAM;AAG5B,QAAE,QAAQ;AACV,aAAO,uBAAuB;AAAA,IAChC;AAAA,EACF;AAAA,EACA,KAAK;AAAA,EACL,eAAe,CAAC,WAAW;AACzB,UAAM,EAAE,MAAM,IAAI;AAElB,WAAO,QAAQ,CAAC,cAAc;AAC5B,UAAI,UAAU,SAAS,iBAAiB;AACtC,cAAM,EAAE,WAAW,IAAI;AAEvB,eAAO,gBAAgB;AAEvB,cAAM,SAAS;AAEf,eAAO,uBAAuB;AAE9B;AAAA,MACF;AAEA,YAAM,SAAS;AAAA,IACjB;AAEA,WAAO;AAAA,EACT;AACF,CAAC;;;ACrCM,IAAM,qBAAqB;AAE3B,IAAM,oBAAoB;;;ACE1B,IAAM,mBAAmB;AAEzB,IAAM,0BAA0B,oBAAoB;AAAA,EACzD,UAAU;AAAA,IACR,QAAQ,CAAC,WAAW,MAAM;AACxB,YAAM,QAAQ,qBAAqB,MAAM;AAEzC,UAAI,UAAU,OAAO,IAAI;AACvB,2BAAmB,MAAM,IAAI;AAAA,MAC/B;AAEA,yBAAmB,KAAK,OAAO,EAAE;AAEjC,eAAS;AAAA,QACP,IAAI,YAAY,mBAAmB;AAAA,UACjC,QAAQ,EAAE,IAAI,OAAO,GAAG;AAAA,QAC1B,CAAC;AAAA,MACH;AAAA,IACF;AAAA,IACA,SAAS,CAAC,WAAW,MAAM;AACzB,yBAAmB,MAAM,OAAO,EAAE;AAElC,eAAS;AAAA,QACP,IAAI,YAAY,oBAAoB;AAAA,UAClC,QAAQ,EAAE,IAAI,OAAO,GAAG;AAAA,QAC1B,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA,EACA,KAAK;AACP,CAAC;;;AC9BM,IAAM,kBAAkB,CAAC,OAAiB;AAJjD;AAKE,MAAI;AAAI,WAAO;AAEf,QAAM,QAAQ,qBAAqB,MAAM;AAEzC,MAAI;AAAO,WAAO;AAElB,QAAM,OAAO,qBAAqB,KAAK;AAEvC,MAAI;AAAM,WAAO;AAEjB,UAAO,0BAAqB,KAAK,MAA1B,YAA+B;AACxC;;;AChBO,IAAM,kBAAkB;AAExB,IAAM,YAAY;AAElB,IAAM,iBAAiB;AAEvB,IAAM,QAAQ;AAEd,IAAM,MAAM;AAEZ,IAAM,mBAAmB;;;ACRzB,IAAM,iBAAiB,CAC5B,MACA;AAAA,EACE,2BAA2B;AAAA,EAC3B,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,6BAA6B;AAC/B,IAKI,CAAC,MACF;AACH,MAAI,cAAc,OAAO;AACvB,WAAO,KAAK,QAAQ,QAAQ,EAAE;AAAA,EAChC;AACA,MAAI,YAAY,kBAAkB;AAEhC,WAAO,KAAK,QAAQ,OAAO,EAAE;AAAA,EAC/B;AACA,MAAI,0BAA0B;AAC5B,QAAI,4BAA4B;AAC9B,aAAO,KAAK,WAAW,QAAQ,GAAG;AAAA,IACpC,OAAO;AAEL,aAAO,KAAK,WAAW,eAAe,GAAG;AAMzC,aAAO,KAAK,WAAW,iBAAiB,EAAE;AAC1C,aAAO,KAAK,WAAW,iBAAiB,EAAE;AAAA,IAC5C;AAAA,EACF;AAEA,SAAO;AACT;;;ACOO,IAAM,iBAAiB,oBAAI,IAAI;AAAA,EACpgBAAgB,CAAC,SAC5B,KAAK,aAAa,KAAK;;;ACElB,IAAM,sBAAsB,CAAC,SAAwB;AAC1D,MAAI,CAAC,cAAc,IAAI;AAAG,WAAO;AAEjC,QAAM,UAAU;AAEhB,QAAM,kBAAkB,eAAe,IAAI,QAAQ,OAAO;AAM1D,QAAM,kBAAkB,QAAQ,MAAM,QAAQ,MAAM,GAAG,EAAE,CAAC;AAE1D,MAAI,oBAAoB,IAAI;AAC1B,WAAO;AAAA,EACT;AACA,MAAI,gBAAgB,WAAW,QAAQ,GAAG;AACxC,WAAO;AAAA,EACT;AACA,MAAI,oBAAoB,aAAa,QAAQ,eAAe;AAC1D,WAAO,oBAAoB,QAAQ,aAAa;AAAA,EAClD;AASA,MACE,CAAC,YAAY,WAAW,QAAQ,UAAU,gBAAgB,OAAO,EAAE;AAAA,IACjE;AAAA,EACF,GACA;AACA,WAAO;AAAA,EACT;AAEA,SAAO;AACT;;;AC1CO,IAAM,aAAa,CAAC,SACzB,KAAK,aAAa,KAAK;;;ACElB,IAAM,qBAAqB,CAAC,SAAwB;AACzD,MAAI,CAAC,cAAc,IAAI;AAAG,WAAO;AAEjC,QAAM,UAAU;AAEhB,SAAO,CAAC,oBAAoB,OAAO;AACrC;;;ACPO,IAAM,8CAA8C,CACzD,gBACY;AACZ,MAAI,cAA2B;AAG/B,SAAO,MAAM;AACX,QAAI,YAAY,aAAa;AAC3B,oBAAc,YAAY;AAAA,IAC5B,OAAO;AAEL,oBAAc,YAAY;AAG1B,UAAI,eAAe,mBAAmB,WAAW,GAAG;AAClD,eAAO;AAAA,MACT;AAGA,qBAAc,2CAAa,gBAAe;AAAA,IAC5C;AAEA,QAAI,CAAC,aAAa;AAChB,aAAO;AAAA,IACT;AAEA,QAAI,mBAAmB,WAAW,GAAG;AACnC,aAAO;AAAA,IACT;AAEA,SAAK,YAAY,eAAe,IAAI,SAAS,GAAG;AAC9C,aAAO;AAAA,IACT;AAAA,EAGF;AACF;;;ACpCO,IAAM,gCAAgC,CAC3C,UACG;AACH,MAAI,MAAM,yBAAyB;AACjC,UAAM,wBAAwB,UAAU;AAAA,EAC1C,OAAO;AACL,UAAM,0BAA0B;AAAA,MAC9B,SAAS;AAAA,MACT,2BAA2B;AAAA,IAC7B;AAAA,EACF;AACF;AAEO,IAAM,6BAA6B,CAAC,UAAmC;AAC5E,QAAM,0BAA0B;AAClC;;;ACPO,IAAM,yBAAyB,CACpC,MACA,UACG;AACH,QAAM,cAAc,KAAK,eAAe;AACxC,QAAM,mBAAmB,YAAY,KAAK,MAAM;AAMhD,MAAI,MAAM,2BAA2B,CAAC,kBAAkB;AACtD,kCAA8B,KAAK;AAAA,EACrC;AAEA,QAAM,EAAE,eAAe,IAAI;AAS3B,QAAM,aAA4B,MAAM;AACtC,QAAI,mBAAmB;AAAU,aAAO;AACxC,QACE,CAAC,MAAM,2BACP,MAAM,wBAAwB,WAC9B,MAAM,wBAAwB;AAE9B,aAAO;AAET,WAAO;AAAA,EACT,GAAG;AAEH,QAAM,WAAwB,MAAM;AAClC,QAAI,mBAAmB;AAAU,aAAO;AACxC,QAAI,4CAA4C,IAAI;AAClD,aAAO;AAET,WAAO;AAAA,EACT,GAAG;AAEH,QAAM,2BAAoC;AAAA,IACxC,QAAQ;AAAA,IACR,KAAK;AAAA,IACL,YAAY;AAAA,EACd,EAAE,cAAc;AAEhB,QAAM,6BAA6B,mBAAmB;AAEtD,QAAM,uBAAuB,eAAe,eAAe,IAAI;AAAA,IAC7D;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,MAAI,MAAM,2BAA2B,0BAA0B;AAC7D,UAAM,wBAAwB,4BAC5B,qBAAqB,SAAS,GAAG;AAAA,EACrC;AAEA,OAAK,cAAc;AACrB;;;ACnEO,IAAM,yBAAyB,CACpC,MACA,UACG;AACH,MAAI,cAAc,IAAI,GAAG;AACvB,8BAA0B,MAAqB,KAAK;AAEpD;AAAA,EACF;AACA,MAAI,WAAW,IAAI,GAAG;AACpB,2BAAuB,MAAc,KAAK;AAE1C;AAAA,EACF;AAEA,6BAA2B,MAAM,KAAK;AACxC;;;ACpBO,IAAM,6BAA6B,CACxC,MACA,UACG;AACH,QAAM,aAAa,MAAM,KAAK,KAAK,UAAU;AAE7C,aAAW,aAAa,YAAY;AAClC,2BAAuB,WAAW,KAAK;AAAA,EACzC;AACF;;;ACXO,IAAM,sBAAsB,CACjC,YAC0B;AAC1B,QAAM,qBAAqB,QAAQ,MAAM;AAEzC,UAAQ,oBAAoB;AAAA,IAC1B,KAAK;AAAA,IACL,KAAK,UAAU;AACb,aAAO;AAAA,IACT;AAAA,IACA,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK,gBAAgB;AACnB,aAAO;AAAA,IACT;AAAA,IACA,KAAK,YAAY;AACf,aAAO;AAAA,IACT;AAAA,EACF;AAEA,MAAI,QAAQ,YAAY,OAAO;AAC7B,WAAO;AAAA,EACT;AACA,MAAI,uBAAuB,WAAW;AACpC,WAAO;AAAA,EACT;AAEA,SAAO;AACT;;;ACnBO,IAAM,4BAA4B,CACvC,SACA,UACG;AACH,QAAM,kBAAkB,oBAAoB,OAAO;AACnD,QAAM,yBAAyB,MAAM;AACrC,QAAM,yBAAyB,oBAAoB,OAAO;AAE1D,MAAI,wBAAwB;AAC1B,UAAM,iBAAiB;AAAA,EACzB;AAEA,MAAI,CAAC,iBAAiB;AACpB,+BAA2B,KAAK;AAAA,EAClC;AAEA,6BAA2B,SAAS,KAAK;AAGzC,MAAI,CAAC,iBAAiB;AACpB,+BAA2B,KAAK;AAAA,EAClC;AAGA,QAAM,iBAAiB;AACzB;;;AC/BO,IAAM,qBAAqB,CAAC,YAAyB;AAC1D,QAAM,gBAAgB,QAAQ,UAAU,IAAI;AAG5C,QAAM,QAAiC;AAAA,IACrC,yBAAyB;AAAA,IACzB,gBAAgB;AAAA,EAClB;AAEA,4BAA0B,eAAe,KAAK;AAE9C,SAAO;AACT;;;ACfA,SAAS,WAAW;;;ACKb,IAAM,8BAA8B,CACzC,QACA,SAEA,MAAM,KAAK,KAAK,UAAU,EAAE;AAAA,EAC1B,oBAAoB,MAAM;AAC5B;;;ADFK,IAAM,qBAAqB,CAChC,QACA,YACiC;AACjC,MAAI,QAAQ,aAAa,QAAQ;AAC/B,WAAO;AAAA,MACL;AAAA,MACA,CAAC;AAAA,MACD,4BAA4B,QAAQ,OAAO;AAAA,IAC7C;AAAA,EACF;AACF;;;AErBO,IAAM,kBAAkB,CAAC,SAAkC;AAChE,MAAI,KAAK,aAAa,MAAM;AAC1B,WAAO;AAAA,EACT;AACF;;;ACHA,SAAS,OAAAC,YAAW;;;ACApB,SAAyB,aAAAC,kBAAiB;AAC1C,OAAOC,gBAAe;AAUf,IAAM,wBAAwB,CACnC,QACA,QACA;AAAA,EACE;AAAA,EACA,SAAS;AACX,MACkE;AApBpE;AAqBE,QAAM;AAAA,IACJ,iBAAAC;AAAA,IACA,WAAW;AAAA,IACX,QAAQ;AAAA,IACR;AAAA,EACF,IAAI;AAEJ,MAAI,CAACA;AAAiB;AAEtB,QAAM;AAAA,IACJ;AAAA,IACA,WAAW;AAAA,IACX,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,EACF,IAAIA;AACJ,MAAI,EAAE,QAAQ,IAAIA;AAElB,QAAMC,aAAY,iBAAiB;AACnC,QAAM,SAAS,cAAc;AAE7B,MAAI,CAAC,mBAAmB,CAACA,YAAW;AAClC;AAAA,EACF;AACA,MAAI,mBAAmB,CAAC,QAAQ;AAC9B;AAAA,EACF;AACA,MAAI,OAAO;AACT,UAAM,UAAU,MAAM;AAAA,MACpB,CAAC,EAAE,gBAAgB,gBAAgB,gBAAgB,KAAK,WAAW,MAAM;AAlD/E,YAAAC;AAmDQ,YAAI,eAAe;AACjB,gBAAM,iBAAiBC,WAAkB,aAAa;AAGtD,cACE,eAAe,SAAS,KACxB,CAAC,eAAe,SAAS,GAAG,QAAQ,KACpC,kBAAkB;AAElB,mBAAO;AAAA,QACX;AAEA,YAAI,kBAAkB,CAAC,GAAG,UAAU,SAAS,cAAc;AACzD,iBAAO;AACT,YAAI,YAAY;AACd,qBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,UAAU,GAAG;AACrD,kBAAMC,UAASD,WAAkB,KAAK;AAGtC,gBAAI,CAACC,QAAO,SAAU,GAAG,MAAc,GAAG,CAAC,KAAK,UAAU;AACxD;AAEF,gBAAI,UAAU,OAAO,CAAE,GAAG,MAAc,GAAG;AAAG;AAE9C,kBAAM,oBAAmBF,MAAA,OAAO,OAAO,UAAd,gBAAAA,IAAqB;AAG9C,gBACE,oBACA,qBAAsB,GAAG,MAAc,GAAG,GAC1C;AACA,qBAAO;AAAA,YACT;AAAA,UACF;AAAA,QACF;AACA,YAAI,gBAAgB;AAClB,cAAI,OAAO,mBAAmB,UAAU;AACtC,gBAAI,CAAC,GAAG,kBAAkB,EAAE,SAAS,cAAc;AAAG,qBAAO;AAAA,UAC/D,OAAO;AACL,uBAAW,CAAC,eAAe,cAAc,KAAK,OAAO;AAAA,cACnD;AAAA,YACF,GAAG;AACD,oBAAM,kBAAkBC,WAAkB,cAAc;AACxD,oBAAM,cAAc,GAAG,aAAa,aAAa;AAEjD,kBACE,CAACE,WAAU,WAAW,KACtB,CAAC,gBAAgB,SAAS,WAAW;AAErC,uBAAO;AAAA,YACX;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,IACF;AAEA,QAAI,CAAC;AAAS;AAAA,EAChB;AACA,MAAI,SAAS,CAAC,MAAM,EAAE,GAAG;AACvB;AAAA,EACF;AACA,MAAI,CAAC,SAAS;AACZ,QAAIJ,YAAW;AACb,gBAAU,OAAO,EAAE,KAAK;AAAA,IAC1B,WAAW,QAAQ;AACjB,gBAAU,OAAO,EAAE,CAAC,IAAI,GAAG,KAAK;AAAA,IAClC,OAAO;AACL;AAAA,IACF;AAAA,EACF;AAEA,MAAI,QAAO,aAAQ,IAAI,CAAC,CAAC,MAAd,YAAmB,CAAC;AAE/B,MAAI,OAAO,KAAK,IAAI,EAAE,WAAW;AAAG;AAEpC,QAAM,kBAAkB,mBAA0B,QAAQ,MAAM;AAEhE,kBAAgB,QAAQ,CAAC,mBAAmB;AAlI9C,QAAAC,KAAA;AAmII,UAAM,OAAM,MAAAA,MAAA,eAAe,oBAAf,gBAAAA,IAAgC,YAAhC,wBAAAA,KAA0C,IAAI;AAE1D,QAAI,KAAK;AACP,aAAO,kCACF,OACA;AAAA,IAEP;AAAA,EACF,CAAC;AAED,MAAI,gBAAgB;AAClB,UAAM,oBAAoB,CAAC;AAE3B,UAAM,wBAAwB,GAAG,kBAAkB;AAEnD,eAAW,wBAAwB,uBAAuB;AACxD,UAAI,eAAe,SAAS,oBAAoB,GAAG;AACjD,QAAC,kBAA0B,oBAAoB,IAC7C,GAAG,aAAa,oBAAoB;AAAA,MACxC;AAAA,IACF;AAEA,QAAI,OAAO,KAAK,iBAAiB,EAAE,SAAS,GAAG;AAC7C,WAAK,aAAa;AAAA,IACpB;AAAA,EACF;AAEA,SAAO,iCAAKF,mBAAL,EAAsB,KAAK;AACpC;;;ACvJO,IAAM,6BAA6B,CACxC,QACA,YACG;AACH,MAAI;AAEJ,GAAC,GAAG,OAAO,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC,WAAW;AAC7C,aAAS,sBAAsB,QAAQ,QAAQ,EAAE,QAAQ,CAAC;AAE1D,WAAO,CAAC,CAAC;AAAA,EACX,CAAC;AAED,SAAO;AACT;;;AFXO,IAAM,uBAAuB,CAClC,QACA,YACG;AAbL;AAcE,QAAM,eAAe,2BAA2B,QAAQ,OAAO;AAE/D,MAAI,cAAc;AAChB,UAAM,EAAE,MAAM,gBAAgB,IAAI;AAElC,QAAI,eACF,UAAK,aAAL,YACC,4BAA4B,QAAQ,OAAO;AAE9C,QAAI,YAAY,WAAW,KAAK,iBAAiB;AAC/C,oBAAc,CAAC,EAAE,MAAM,GAAG,CAAC;AAAA,IAC7B;AAEA,WAAOM,KAAI,WAAW,MAAM,WAAW;AAAA,EACzC;AACF;;;AG7BA;AAAA,EAIE,aAAAC;AAAA,EACA,UAAAC;AAAA,OACK;AACP,SAAS,OAAAC,YAAW;;;ACAb,IAAM,0BAA0B,CACrC,QACA,YACG;AACH,MAAI,OAAkB,CAAC;AAEvB,GAAC,GAAG,OAAO,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,WAAW;AAChD,UAAM,eAAe,sBAAsB,QAAQ,QAAQ;AAAA,MACzD,iBAAiB;AAAA,MACjB;AAAA,IACF,CAAC;AAED,QAAI,CAAC;AAAc;AAEnB,WAAO,kCAAK,OAAS,aAAa;AAAA,EACpC,CAAC;AAED,SAAO;AACT;;;ADNO,IAAM,oBAAoB,CAC/B,QACA,YACG;AACH,QAAM,OAAO,wBAAwB,QAAQ,OAAO;AAEpD,SAAO,4BAA4B,QAAQ,OAAO,EAAE;AAAA,IAClD,CAAC,KAAoB,UAAU;AAC7B,UAAI,CAAC;AAAO,eAAO;AACnB,UAAIC,WAAU,KAAK,GAAG;AACpB,YAAI,OAAO,KAAK,IAAI,EAAE,SAAS,GAAG;AAChC,2BAAiB;AAAA,YACf,MAAM;AAAA,YACN,OAAO;AAAA,cACL,QAAQ,CAAC,CAAC,CAAC,MAAMC,QAAO,CAAC;AAAA,YAC3B;AAAA,YACA,QAAQ;AAAA,UACV,CAAC;AAAA,QACH;AAEA,YAAI,KAAK,KAAK;AAAA,MAChB,OAAO;AACL,cAAM,aAAa,mBAAK;AAGxB,YAAIA,QAAO,KAAK,KAAK,MAAM,MAAM;AAC/B,iBAAO,KAAK,UAAU,EAAE,QAAQ,CAAC,QAAQ;AACvC,gBAAI,WAAW,GAAG,KAAK,MAAM,GAAG,GAAG;AACjC,yBAAW,GAAG,IAAI,MAAM,GAAG;AAAA,YAC7B;AAAA,UACF,CAAC;AAAA,QACH;AAEA,YAAI,KAAKC,KAAI,QAAQ,YAAY,KAAK,CAAQ;AAAA,MAChD;AAEA,aAAO;AAAA,IACT;AAAA,IACA,CAAC;AAAA,EACH;AACF;;;AExDO,IAAM,uBAAuB,CAAC,SAAkC;AACrE,MAAI,WAAW,IAAI,GAAG;AACpB,WAAO,KAAK,eAAe;AAAA,EAC7B;AACF;;;ACMO,IAAM,sBACX,CAAkB,WAClB,CACE,SACkD;AAClD,QAAM,WAAW,qBAAqB,IAAI;AAE1C,MAAI;AAAU,WAAO;AACrB,MAAI,CAAC,cAAc,IAAI;AAAG,WAAO;AAGjC,QAAM,YAAY,gBAAgB,IAAI;AAEtC,MAAI;AAAW,WAAO;AAGtB,QAAM,WAAW,mBAAmB,QAAQ,IAAmB;AAE/D,MAAI;AAAU,WAAO;AAGrB,QAAM,UAAU,qBAAqB,QAAQ,IAAmB;AAEhE,MAAI;AAAS,WAAO;AAGpB,SAAO,kBAAkB,QAAQ,IAAmB;AACtD;;;AChCK,IAAM,yBAAyB,CACpC,QACA,YACkD;AAClD,SAAO,oBAAoB,MAAM,EAAE,OAAO;AAC5C;;;ACZO,IAAM,sBAAsB,CAAC,YAAoB;AACtD,QAAM,OAAO,SAAS,cAAc,MAAM;AAC1C,OAAK,YAAY;AAEjB,SAAO;AACT;;;ACIO,IAAM,kBAAkB,CAC7B,QACA;AAAA,EACE,oBAAoB,2BAA2B;AAAA,EAC/C;AACF,MAIqB;AAErB,MAAI,OAAO,YAAY,UAAU;AAC/B,cAAU,oBAAoB,OAAO;AAAA,EACvC;AACA,MAAI,0BAA0B;AAC5B,cAAU,mBAAmB,OAAO;AAAA,EACtC;AAEA,QAAM,WAAW,uBAAuB,QAAQ,OAAO;AAEvD,SAAO,uCAAuC,QAAQ;AAAA,IACpD,aAAa;AAAA,EACf,CAAC;AACH;;;ACjCO,IAAM,oBAAoB,CAAC,SAAiB;AACjD,SAAO,IAAI,UAAU,EAAE,gBAAgB,MAAM,WAAW;AAC1D;;;ACEO,IAAM,uBAAuB;AAM7B,IAAM,8BAA8B,oBAAoB;AAAA,EAC7D,KAAK;AAAA,EACL,MAAM,CAAC,YAAY;AAAA,IACjB,QAAQ;AAAA,MACN,YAAY;AAAA,QACV,QAAQ;AAAA,QACR,aAAa,CAAC,EAAE,KAAK,MAAM;AACzB,gBAAMC,YAAW,kBAAkB,IAAI;AAEvC,iBAAO,gBAAgB,QAAQ;AAAA,YAC7B,SAASA,UAAS;AAAA,UACpB,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;;;AChBM,IAAM,mBAAmB,CAAC,MAAY,aAA6B;AACxE,QAAM,iBAAiB,SAAS,IAAI;AAEpC,MAAI,CAAC,gBAAgB;AACnB;AAAA,EACF;AAEA,MAAI,QAAQ,KAAK;AAEjB,SAAO,OAAO;AACZ,UAAM,eAAe;AACrB,UAAM,gBAAgB,MAAM;AAC5B,YAAQ,MAAM;AAEd,qBAAiB,cAAc,QAAQ;AAEvC;AAAA;AAAA,MAEE,CAAC,aAAa,mBACd,CAAC,aAAa,eACd,CAAC,aAAa,cACd,SACA,kBAAkB,MAAM,mBACxB,MAAM;AAAA,MACN;AACA,cAAQ,gBAAgB,cAAc,cAAc,KAAK;AAAA,IAC3D;AAAA;AAAA,MAEE,CAAC,aAAa,mBACd,CAAC,aAAa,eACd,CAAC,aAAa,cACd,SACA,CAAC,MAAM,mBACP,CAAC,MAAM,eACP,CAAC,MAAM;AAAA,MACP;AACA,UAAI,eAAe;AACjB,gBAAQ,cAAc,cAClB,cAAc,YAAY,cAC1B;AAAA,MACN,WAAW,KAAK,YAAY;AAC1B,gBAAQ,KAAK,WAAW;AAAA,MAC1B;AAAA,IACF;AAAA,EACF;AACF;;;AC5CO,IAAM,uBAAuB,CAClC,UACA,aACS;AACT,mBAAiB,UAAU,CAAC,SAAS;AACnC,QAAI,CAAC,cAAc,IAAI,GAAG;AACxB,aAAO;AAAA,IACT;AAEA,WAAO,SAAS,IAAI;AAAA,EACtB,CAAC;AACH;;;AClBO,IAAM,sBAAsB,CAAC,aAAyB;AAC3D,uBAAqB,UAAU,CAAC,YAAY;AAC1C,QAAI,QAAQ,YAAY,MAAM;AAC5B,aAAO;AAAA,IACT;AAEA,UAAM,sBAAsB,SAAS,eAAe,SAAS;AAE7D,QAAI,QAAQ,eAAe;AACzB,cAAQ,cAAc,aAAa,qBAAqB,OAAO;AAAA,IACjE;AAEA,WAAO;AAAA,EACT,CAAC;AACH;;;ACjBO,IAAM,gBAAgB,CAAC,SAAyB;AACrD,SAAO,KAAK,WAAW,YAAY,IAAI;AACzC;;;ACDA,IAAM,yBAAyB,oBAAI,IAAI,CAAC,MAAM,OAAO,MAAM,IAAI,CAAC;AAEhE,IAAM,UAAU,CAAC,YAA8B;AAC7C,SACE,CAAC,uBAAuB,IAAI,QAAQ,QAAQ,KAAK,CAAC,QAAQ,UAAU,KAAK;AAE7E;AAEA,IAAM,gBAAgB,CAAC,YAA2B;AAChD,MAAI,QAAQ,OAAO,GAAG;AACpB,UAAM,EAAE,cAAc,IAAI;AAE1B,YAAQ,OAAO;AAEf,QAAI,eAAe;AACjB,oBAAc,aAAa;AAAA,IAC7B;AAAA,EACF;AACF;AAGO,IAAM,yBAAyB,CAAC,aAAyB;AAC9D,uBAAqB,UAAU,CAAC,YAAY;AAC1C,kBAAc,OAAO;AAErB,WAAO;AAAA,EACT,CAAC;AACH;;;ACzBO,IAAM,iBAAiB,CAAC,SAAkB,YAA6B;AAC5E,QAAM,aAAa,SAAS,cAAc,OAAO;AAEjD,aAAW,YAAY,QAAQ;AAE/B,aAAW,EAAE,KAAK,KAAK,QAAQ,YAAY;AACzC,UAAM,QAAQ,QAAQ,aAAa,IAAI;AAEvC,QAAI,OAAO;AACT,iBAAW,aAAa,MAAM,KAAK;AAAA,IACrC;AAAA,EACF;AAEA,MAAI,QAAQ,YAAY;AACtB,YAAQ,WAAW,aAAa,YAAY,OAAO;AAAA,EACrD;AAEA,SAAO;AACT;;;ACfO,IAAM,wBAAwB,CAAC,aAAyB;AAC7D,uBAAqB,UAAU,CAAC,YAAY;AAC1C,QAAI,QAAQ,YAAY,QAAQ;AAC9B,UAAI,QAAQ,aAAa;AACvB,uBAAe,SAAS,MAAM;AAAA,MAChC,OAAO;AACL,gBAAQ,OAAO;AAAA,MACjB;AAAA,IACF;AAEA,WAAO;AAAA,EACT,CAAC;AACH;;;AClBO,IAAM,qBAAqB,CAAC,SACjC,KAAK,WAAW,GAAG;;;ACDd,IAAM,oBAAoB,CAAC,YAA2B;AAC3D,UAAQ,YAAY,QAAQ;AAC9B;;;ACEO,IAAM,wBAAwB,CAAC,aAAyB;AAC7D,uBAAqB,UAAU,CAAC,YAAY;AAC1C,QAAI,QAAQ,YAAY,KAAK;AAC3B,aAAO;AAAA,IACT;AAEA,UAAM,OAAO,QAAQ,aAAa,MAAM;AAExC,QAAI,CAAC,QAAQ,mBAAmB,IAAI,GAAG;AACrC,wBAAkB,OAAO;AAAA,IAC3B;AACA,QAAI,QAAQ,QAAQ,cAAc,KAAK,GAAG;AACxC,iBAAW,QAAQ,QAAQ,iBAAiB,MAAM,GAAG;AACnD,YAAI,CAAC,KAAK,aAAa;AACrB,4BAAkB,IAAI;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT,CAAC;AACH;;;ACrBO,IAAM,oBAAoB,CAAC,UAAgB,aAA6B;AAC7E,mBAAiB,UAAU,CAAC,SAAS;AACnC,QAAI,CAAC,WAAW,IAAI,GAAG;AACrB,aAAO;AAAA,IACT;AAEA,WAAO,SAAS,IAAI;AAAA,EACtB,CAAC;AACH;;;ACLO,IAAM,qBAAqB,CAAC,aAAyB;AAC1D,oBAAkB,UAAU,CAAC,aAAa;AACxC,QACE,UAAU,KAAK,SAAS,IAAI,MAC3B,SAAS,0BAA0B,SAAS,qBAC7C;AACA,eAAS,OAAO;AAEhB,aAAO;AAAA,IACT;AAEA,aAAS,OAAO,SAAS,KAAK,WAAW,UAAU,IAAI;AAEvD,QACE,SAAS,KAAK,SAAS,eAAe,KACtC,SAAS,KAAK,SAAS,SAAS,KAChC,SAAS,KAAK,SAAS,cAAc,GACrC;AACA,YAAM,WAAW,SAAS,KAAK,SAAS,KAAK;AAC7C,YAAM,mBAAmB,KAAK,KAAK,SAAS,IAAI;AAChD,YAAM,cAAc,SAAS,KAAK,SAAS,SAAS;AAEpD,UAAI,EAAE,YAAY,qBAAqB,CAAC,aAAa;AACnD,YAAI,SAAS,SAAS,gBAAgB;AACpC,mBAAS,OAAO;AAEhB,iBAAO;AAAA,QACT;AAEA,iBAAS,OAAO;AAEhB,eAAO;AAAA,MACT;AACA,UACE,SAAS,mBACT,SAAS,gBAAgB,aAAa,QACtC,SAAS,eACT;AACA,iBAAS,gBAAgB,OAAO;AAEhC,cAAM,UAAU,SAAS,KAAK,MAAM,UAAU;AAC9C,cAAM,SAAS,UAAU,QAAQ,CAAC,EAAE,SAAS;AAE7C,iBAAS,OAAO,SAAS,KACtB,MAAM,KAAK,IAAI,GAAG,MAAM,CAAC,EACzB,WAAW,IAAI,OAAO,WAAW,GAAG,GAAG,KAAK,EAC5C,WAAW,IAAI,OAAO,iBAAiB,GAAG,GAAG,KAAK;AACrD,iBAAS,OAAO;AAAA,EAAK,SAAS,IAAI;AAAA,MACpC,OAAO;AACL,iBAAS,OAAO,SAAS,KACtB,WAAW,IAAI,OAAO,WAAW,GAAG,GAAG,KAAK,EAC5C,WAAW,IAAI,OAAO,iBAAiB,GAAG,GAAG,KAAK;AAAA,MACvD;AAAA,IACF;AAEA,WAAO;AAAA,EACT,CAAC;AACH;;;ACjEO,IAAM,cAAc,CAAC,YAAqB,QAAQ,aAAa;;;ACQ/D,IAAM,4BAA4B,CAAC,aAAmB;AAC3D,uBAAqB,UAAU,CAAC,YAAY;AAC1C,UAAM,KAAK;AAEX,UAAM,iBAAiB,QAAQ,aAAa,OAAO;AAEnD,QAAI,CAAC;AAAgB,aAAO;AAC5B,QAAI,mBAAmB,EAAE,KAAK,CAAC,YAAY,EAAE,GAAG;AAC9C,YAAM;AAAA,QACJ,OAAO;AAAA,UACL;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF,IAAI;AAEJ,UACE,mBACA,SACA,cACA,YACA,aACA,cACA,gBACA;AACA,cAAM,OAAO,SAAS,cAAc,MAAM;AAE1C,YAAI,CAAC,CAAC,WAAW,SAAS,EAAE,SAAS,KAAK,GAAG;AAC3C,eAAK,MAAM,QAAQ;AAAA,QACrB;AAEA,aAAK,MAAM,aAAa;AACxB,aAAK,MAAM,WAAW;AAEtB,YAAI,CAAC,CAAC,WAAW,WAAW,QAAQ,EAAE,SAAS,KAAK,GAAG;AACrD,eAAK,MAAM,YAAY;AAAA,QACzB;AACA,YAAI,CAAC,CAAC,KAAK,QAAQ,EAAE,SAAS,UAAU,GAAG;AACzC,eAAK,MAAM,aAAa;AAAA,QAC1B;AAEA,aAAK,MAAM,iBAAiB;AAE5B,aAAK,YAAY,GAAG;AACpB,gBAAQ,YAAY,KAAK;AAAA,MAC3B;AAAA,IACF;AAEA,WAAO;AAAA,EACT,CAAC;AACH;;;ACtDO,IAAM,kBAAkB,CAC7B,UACA,cACG;AACH,MAAI,MAAmB;AAEvB,uBAAqB,UAAU,CAAC,SAAS;AACvC,QAAI,UAAU,IAAmB,GAAG;AAClC,YAAM;AAEN,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT,CAAC;AAED,SAAO;AACT;AAEO,IAAM,kBAAkB,CAC7B,UACA,cACG;AACH,SAAO,CAAC,CAAC,gBAAgB,UAAU,SAAS;AAC9C;;;AChCA,IAAM,aAAa,MAAM,WAAW;AAE7B,IAAM,kBAAkB,CAAC,SAAyB;AACvD,QAAM,WAAqB,CAAC;AAC5B,QAAM,WAAW,SAAS,mBAAmB,MAAM,WAAW,cAAc;AAAA,IAC1E;AAAA,EACF,CAAC;AACD,MAAI,cAAc,SAAS,SAAS;AAEpC,SAAO,aAAa;AAClB,QAAI,YAAY,WAAW;AACzB,eAAS,KAAK,YAAY,SAAS;AAAA,IACrC;AAEA,kBAAc,SAAS,SAAS;AAAA,EAClC;AAEA,SAAO;AACT;;;AClBO,IAAM,gBAAgB,CAAC,SAC5B,KAAK,aAAa,KAAK;;;ACDlB,IAAM,aAAa,CAAC,WAA4B;AACrD,SAAO,eAAe,KAAK,OAAO,YAAY,CAAC;AACjD;;;ACAO,IAAM,mBAAmB,CAAC,SAAiB;AAChD,QAAM,EAAE,KAAK,IAAI,kBAAkB,IAAI;AAEvC,SAAO,KAAK;AACd;;;ACHO,IAAM,gBAAgB,CAAC,SAAyB;AACrD,QAAM,YAAY,KACf,KAAK,EACL,WAAW,IAAI,OAAO,kBAAkB,GAAG,GAAG,EAAE;AAEnD,SAAO,SAAS,SAAS;AAC3B;;;ACRA,IAAM,mBAAmB,CAAC,SAAyB;AACjD,QAAM,QAAQ,KAAK,QAAQ,OAAO;AAElC,MAAI,UAAU,IAAI;AAChB,WAAO;AAAA,EACT;AAEA,SAAO,KAAK,MAAM,KAAK,IAAI,GAAG,KAAK,CAAC;AACtC;AAGA,IAAM,kBAAkB,CAAC,SAAyB;AAChD,QAAM,QAAQ,KAAK,YAAY,SAAS;AAExC,MAAI,UAAU,IAAI;AAChB,WAAO;AAAA,EACT;AAEA,SAAO,KAAK,MAAM,GAAG,KAAK,IAAI,GAAG,QAAQ,UAAU,MAAM,CAAC;AAC5D;AAGO,IAAM,yBAAyB,CAAC,SAAyB;AAC9D,SAAO,iBAAiB,gBAAgB,IAAI,CAAC;AAC/C;;;ACtBA,IAAM,WAAW,CAAC,wBAAwB,aAAa;AAGhD,IAAM,eAAe,CAAC,SAAyB;AACpD,SAAO,SAAS,OAAO,CAAC,QAAQ,UAAU,MAAM,MAAM,GAAG,IAAI;AAC/D;;;ACFO,IAAM,uBAAuB,CAClC,UACA,aACS;AACT,mBAAiB,UAAU,CAAC,SAAS;AACnC,QAAI,CAAC,cAAc,IAAI,GAAG;AACxB,aAAO;AAAA,IACT;AAEA,WAAO,SAAS,IAAI;AAAA,EACtB,CAAC;AACH;;;ACbO,IAAM,iCAAiC,CAC5C,UACA,OACA,QACS;AACT,QAAM,mBAAmB,CAAC,SACxB,cAAc,IAAI,KAAK,KAAK,SAAS;AAEvC,uBAAqB,UAAU,CAAC,YAAY;AAC1C,QAAI,QAAQ,SAAS,OAAO;AAC1B,UAAI,OAAO,QAAQ;AAEnB,cAAQ,OAAO;AAEf,aAAO,QAAQ,CAAC,iBAAiB,IAAI,GAAG;AACtC,cAAM,EAAE,YAAY,IAAI;AACxB,aAAK,OAAO;AACZ,eAAO;AAAA,MACT;AAEA,UAAI,QAAQ,iBAAiB,IAAI,GAAG;AAClC,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AAEA,WAAO;AAAA,EACT,CAAC;AACH;;;AC/BA,SAAS,iBAAiB;AAWnB,IAAM,uBAAuB,CAAC;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AACF,MAIM;AACJ,YAAU,MAAM;AACd,UAAM,gBAAgB,CAAC,UAAiB;AACtC,YAAM,KAAM,MAAc,OAAO;AAEjC,UAAI,CAAC,CAAC,iBAAiB,aAAa,UAAU,OAAO,IAAI;AACvD,sBAAc;AAAA,MAChB;AAAA,IACF;AACA,UAAM,eAAe,CAAC,UAAiB;AACrC,YAAM,KAAM,MAAc,OAAO;AAEjC,UAAI,CAAC,CAAC,gBAAgB,aAAa,UAAU,OAAO,IAAI;AACtD,qBAAa;AAAA,MACf;AAAA,IACF;AAEA,aAAS,iBAAiB,oBAAoB,aAAa;AAC3D,aAAS,iBAAiB,mBAAmB,YAAY;AAEzD,WAAO,MAAM;AACX,eAAS,oBAAoB,oBAAoB,aAAa;AAC9D,eAAS,oBAAoB,mBAAmB,YAAY;AAAA,IAC9D;AAAA,EACF,GAAG,CAAC,WAAW,cAAc,aAAa,CAAC;AAC7C;;;AC1CA,SAAS,iBAAiB,uBAAuB;AACjD,SAAS,iBAAiB;AAInB,IAAM,aAAa,CAIxB,WACG;AACH,QAAM,IAAI,UAAU,MAAa;AACjC,QAAM,EAAE,MAAM,IAAI;AAElB,IAAE,QAAQ,MAAM;AACd,UAAM,YAAY,gBAAgB,MAAM;AAExC,UAAM;AAEN,QAAI,WAAW;AACb,sBAAgB,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAAA,IAC3C;AAAA,EACF;AAEA,SAAO;AACT;;;ACxBO,IAAM,YAAY;AAGlB,IAAM,oBAAoB,oBAAoB;AAAA,EACnD,KAAK;AAAA,EACL,eAAe;AACjB,CAAC;;;AlGyBM,IAAM,kBAAkB,CAI7B,QACA;AAAA,EACE;AAAA,EACA;AAAA,EACA,SAAS,WAAW,CAAC;AACvB,MACG;AA5CL;AA6CE,MAAI,UAAgD,CAAC;AAErD,MAAI,uBAAuB,MAAM;AAC/B,UAAM,MAAM;AAEZ,QAAI,OAAO,QAAQ,YAAY,EAAC,2BAAK,QAAO;AAC1C,cAAQ,MAAM,4CAAQ,iBAAR,mBAAsB,UAAtB,YAAuC,kBAAkB,CAAC;AAAA,IAC1E;AACA,QAAI,OAAO,QAAQ,YAAY,EAAC,2BAAK,UAAS;AAC5C,cAAQ;AAAA,SACL,4CAAQ,iBAAR,mBAAsB,YAAtB,YAAyC,oBAAoB;AAAA,MAChE;AAAA,IACF;AACA,QAAI,OAAO,QAAQ,YAAY,EAAC,2BAAK,cAAa;AAChD,cAAQ;AAAA,SACL,4CAAQ,iBAAR,mBAAuB,sBAAvB,YACC,wBAAwB;AAAA,MAC5B;AAAA,IACF;AACA,QAAI,OAAO,QAAQ,YAAY,EAAC,2BAAK,cAAa;AAChD,cAAQ;AAAA,SACL,4CAAQ,iBAAR,mBAAuB,sBAAvB,YACC,wBAAwB;AAAA,MAC5B;AAAA,IACF;AACA,QAAI,OAAO,QAAQ,YAAY,EAAC,2BAAK,aAAY;AAC/C,cAAQ;AAAA,SACL,4CAAQ,iBAAR,mBAAuB,qBAAvB,YACC,uBAAuB;AAAA,MAC3B;AAAA,IACF;AACA,QAAI,OAAO,QAAQ,YAAY,EAAC,2BAAK,aAAY;AAC/C,cAAQ;AAAA,SACL,4CAAQ,iBAAR,mBAAuB,qBAAvB,YACC,uBAAuB;AAAA,MAC3B;AAAA,IACF;AACA,QAAI,OAAO,QAAQ,YAAY,EAAC,2BAAK,YAAW;AAC9C,cAAQ;AAAA,SACL,4CAAQ,iBAAR,mBAAuB,wBAAvB,YACC,0BAA0B;AAAA,MAC9B;AAAA,IACF;AACA,SAAK,OAAO,QAAQ,YAAY,EAAC,2BAAK,YAAWC,WAAU,SAAS,GAAG;AACrE,cAAQ;AAAA,SACL,4CAAQ,iBAAR,mBAAuB,gBAAvB,YACC,mBAAmB;AAAA,UACjB,SAAS;AAAA,YACP;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACL;AAAA,IACF;AACA,QAAI,OAAO,QAAQ,YAAY,EAAC,2BAAK,kBAAiB;AACpD,cAAQ;AAAA,SACL,4CAAQ,iBAAR,mBAAuB,0BAAvB,YACC,4BAA4B;AAAA,MAChC;AAAA,IACF;AACA,QAAI,OAAO,QAAQ,YAAY,EAAC,2BAAK,iBAAgB;AACnD,cAAQ;AAAA,SACL,4CAAQ,iBAAR,mBAAuB,yBAAvB,YACC,2BAA2B;AAAA,MAC/B;AAAA,IACF;AACA,QAAI,OAAO,QAAQ,YAAY,EAAC,2BAAK,iBAAgB;AACnD,cAAQ;AAAA,SACL,4CAAQ,iBAAR,mBAAuB,yBAAvB,YACC,2BAA2B;AAAA,MAC/B;AAAA,IACF;AAAA,EACF;AAEA,YAAU,CAAC,GAAG,SAAS,GAAG,QAAQ;AAElC,SAAO,UAAU,CAAC;AAClB,SAAO,eAAe,CAAC;AAEvB,qBAAmB,QAAQ,OAAO;AAGlC,SAAO,QAAQ,QAAQ,CAAC,WAAW;AACjC,QAAI,OAAO,eAAe;AACxB,YAAM,aAAa,OAAO,QAAQ,IAAI,CAAC,MAAM;AAC3C,eAAO,qBAAwB,GAAU,OAAO,aAAoB;AAAA,MACtE,CAAC;AAED,aAAO,UAAU,CAAC;AAClB,aAAO,eAAe,CAAC;AAGvB,yBAAsB,QAAQ,UAAiB;AAAA,IACjD;AAAA,EACF,CAAC;AACH;;;AmGnIA,IAAM,2BAA2B,CAAC,WAAmB,MAAM;AACzD,UAAQ;AAAA,IACN,UAAU,MAAM;AAAA,EAClB;AACF;AAoBO,IAAM,YAAY,CAIvB,GACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA,UAAU,CAAC;AACb,IAA6C,CAAC,MACvB;AACvB,MAAI,SAAS;AAGb,SAAO,KAAK,kBAAM,OAAO;AACzB,SAAO,gBAAgB;AACvB,SAAO,aAAa;AACpB,SAAO,uBAAuB;AAG9B,SAAO,QAAQ,MAAM,YAAY,MAAM;AACvC,SAAO,aAAa,MAAM,yBAAyB,YAAY;AAC/D,SAAO,QAAQ;AAAA,IACb,IAAI,MAAM;AACR,+BAAyB,WAAW;AAEpC,aAAO;AAAA,IACT;AAAA,EACF;AAEA,MAAI,CAAC,OAAO,KAAK;AACf,WAAO,MAAM,KAAK,OAAO;AAAA,EAC3B;AAEA,kBAAmB,QAAQ;AAAA,IACzB;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAGD,SAAO,QAAQ,QAAQ,CAAC,WAAW;AACjC,QAAI,OAAO,eAAe;AACxB,eAAS,OAAO,cAAc,QAAQ,MAAM;AAAA,IAC9C;AAAA,EACF,CAAC;AAED,SAAO;AACT;;;A7GrCO,IAAM,oBAAoB,CAG/B,KAOkC,CAAC,MAA0B;AAP7D,eACA;AAAA;AAAA,IACA,SAAS,cAAc;AAAA,IACvB,uBAAuB;AAAA,IACvB;AAAA,IACA,UAAU,CAAC;AAAA,EApDb,IA+CE,IAMG,6BANH,IAMG;AAAA,IALH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAGA,YAAU,cAAc,SAAS;AAAA,IAC/B;AAAA,IACA;AAAA,EACF,CAAC;AAED,QAAM,IAAI,UAAa,QAAQ;AAAA,IAC7B;AAAA,KACG,iBACJ;AAED,MAAI,6BAA6B;AAC/B,oBAAgB,GAAG,EAAE,OAAO,KAAK,CAAC;AAAA,EACpC;AAEA,SAAO;AACT;;;A8G7DO,IAAM,4BAA4B,CAIvC,UAA0C,CAAC,MACpB;AACvB,QAAM,SAAS,kBAAwB,OAAO;AAE9C,SAAO,aAAa;AAEpB,SAAO,QAAQ,MAAM;AACnB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;;;ACxBA,SAA4B,mBAAmB;AAI/C,IAAM,kBACJ,CAAC,QACD,CACE,QACA,OACA;AAAA,EACE;AACF,IAGI,CAAC,MACF;AACH,MAAI,CAAC,aAAa,GAAG,EAAE,KAAK;AAAG,WAAO;AACtC,MAAI,CAAC,CAAC,cAAc,YAAY,MAAM;AAAG,WAAO;AAEhD,SAAO;AACT;AAEK,IAAM,UAAU,iCAClB,gBADkB;AAAA,EAErB,OAAO,gBAAgB,KAAK;AAAA,EAC5B,SAAS,gBAAgB,OAAO;AAClC;;;AC5BA,OAAOC,YAAW;AAIlB,SAAS,kBAAAC,uBAAsB;;;ACJ/B,OAAOC,YAAW;AAIlB,SAAS,sBAAsB;AAcxB,IAAM,sBAAsB,CACjC,QACA;AAAA,EACE,WAAW;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAEA,SAAS,OAAO,WAAW;AACzB,QAAM,EAAE,UAAU,WAAW,QAAQ,IAAI;AAEzC,MAAI,QAAQ,SAAS,MAAM;AACzB,UAAM,UAAU,kCAAc;AAE9B,UAAM,wBAAwB,OAAO,QAAQ;AAAA,MAC3C,CAAC,MAAG;AAnCZ;AAmCe,6BAAE,WAAF,mBAAU,mBAAV,YAA4B,CAAC;AAAA;AAAA,IACtC;AACA,UAAM,wBAAwB,OAAO,QAAQ;AAAA,MAC3C,CAAC,MAAG;AAtCZ;AAsCe,6BAAE,WAAF,mBAAU,mBAAV,YAA4B,CAAC;AAAA;AAAA,IACtC;AAEA,gBAAY,mBAAmB;AAAA,MAC7B,YAAY,QAAQ;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAED,QAAI,WAAW;AAEf,0BAAsB,QAAQ,CAACC,aAAY;AACzC,YAAM,MAAMA,SAAQ,iCAAK,YAAL,EAAgB,IAAI,EAAQ;AAEhD,UAAI,KAAK;AACP,mBAAW,IAAI,iCAAK,YAAL,EAAgB,SAAS,EAAQ;AAAA,MAClD;AAAA,IACF,CAAC;AAED,QAAI,YACF,gBAAAC,OAAA,cAAC,4BAAY,YAAY,QAAS;AAGpC,0BAAsB,QAAQ,CAACD,aAAY;AACzC,YAAM,MAAMA,SAAQ,iCAAK,YAAL,EAAgB,IAAI,EAAQ;AAEhD,UAAI,KAAK;AACP,oBAAY,IAAI,iCAAK,YAAL,EAAgB,UAAU,UAAU,EAAQ;AAAA,MAC9D;AAAA,IACF,CAAC;AAED,WACE,gBAAAC,OAAA,cAAC,mBAAgB,SAAkB,OAAO,OACvC,SACH;AAAA,EAEJ;AACF;;;AD/DK,IAAM,oBAAoB,CAC/B,QACA,sBACoC;AACpC,QAAM,iBAAkC,CAAC;AAEzC,SAAO,QAAQ,QAAQ,CAAC,WAAW;AACjC,QAAI,OAAO,WAAW;AACpB,qBAAe,KAAK,oBAAoB,QAAQ,MAAM,CAAC;AAAA,IACzD;AAAA,EACF,CAAC;AAED,SAAO,SAAS,OAAO,WAAW;AAChC,UAAM,QAAQ,gBAAmB,QAAQ,SAAS;AAElD,QAAI;AAEJ,mBAAe,KAAK,CAAC,kBAAkB;AACrC,gBAAU,cAAc,KAAY;AAEpC,aAAO,CAAC,CAAC;AAAA,IACX,CAAC;AAED,QAAI;AAAS,aAAO;AACpB,QAAI,mBAAmB;AACrB,aAAO,kBAAkB,KAAK;AAAA,IAChC;AAEA,WAAO,gBAAAC,OAAA,cAACC,iBAAA,mBAAmB,MAAO;AAAA,EACpC;AACF;;;AE5CA,OAAOC,YAAW;;;ACAlB,OAAOC,YAAW;AAMX,SAAS,YAA6B,IAQjB;AARiB,eAC3C;AAAA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAZF,IAM6C,IAOxC,kBAPwC,IAOxC;AAAA,IANH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAGA,SACE,gBAAAC,OAAA,cAAC,0CAAS,aAAgB,QACvB,QACH;AAEJ;;;AClBO,IAAM,eAAsC;AAAA;AAAA,EAEjeX,IAAM,mBAAmB,CAC9B,QACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,OAAO;AACT,MAEA,SAAS,OAAO,WAAW;AACzB,QAAM,EAAE,UAAU,KAAK,IAAI;AAE3B,MAAI,KAAK,IAAI,GAAG;AACd,UAAM,OAAO,gCAAa;AAE1B,gBAAY,mBAAmB;AAAA,MAC7B,YAAY,KAAK;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAED,WAAO,gBAAAC,OAAA,cAAC,yBAAS,YAAY,QAAS;AAAA,EACxC;AAEA,SAAO;AACT;;;AH7BK,IAAM,iBAAiB,CAC5B,QACA,mBACiC;AACjC,QAAM,cAA4B,CAAC;AAEnC,SAAO,QAAQ,QAAQ,CAAC,WAAW;AACjC,QAAI,OAAO,UAAU,OAAO,KAAK;AAC/B,kBAAY,KAAK,iBAAiB,QAAQ,MAAM,CAAC;AAAA,IACnD;AAAA,EACF,CAAC;AAED,SAAO,SAAS,OAAO,WAAW;AAChC,UAAM,QAAQ,gBAAgB,QAAQ,SAAS;AAE/C,gBAAY,QAAQ,CAAC,eAAe;AAClC,YAAM,cAAc,WAAW,KAAY;AAE3C,UAAI,gBAAgB,QAAW;AAC7B,cAAM,WAAW;AAAA,MACnB;AAAA,IACF,CAAC;AAED,QAAI,gBAAgB;AAClB,aAAO,eAAe,KAAK;AAAA,IAC7B;AAEA,WAAO,gBAAAC,OAAA,cAAC,gCAAgB,MAAO;AAAA,EACjC;AACF;;;AI3CA,OAAOC,YAAW;AAIlB,SAAoB,QAAAC,aAAY;AAMzB,IAAM;AAAA,EACX,yBAAyB;AAAA,EACzB;AAAA,EACA;AACF,IAAI;AAAA,EACF;AAAA,IACE,UAAUC,MAAK,IAAsB;AAAA,IACrC,cAAcA,MAAK,CAAC,CAAuC;AAAA,IAC3D,kBAAkBA,MAAK,CAAC,CAAc;AAAA,EACxC;AAAA,EACA;AAAA,IACE,MAAM;AAAA,EACR;AACF;AAEO,IAAM,8BAA8B,MAAM,wBAAwB,EAAE;AAEpE,IAAM,4BAA4B,MAAM,wBAAwB,EAAE;AAElE,IAAM,2BAA2B,MAAM,wBAAwB,EAAE;AAEjE,IAAM,2BAA2B,MACtC,CAAC,CAAC,wBAAwB,EAAE,MAAM,EAAE,eAAe,MAAM,CAAC;AAOrD,IAAM,gCAAgC,CAC3C,WACsB;AACtB,QAAM,YAAqCC,OAAM;AAAA,IAC/C,MACED,MAAK,CAAC,QAAQ;AACZ,YAAM,eAAe,IAAI,qBAAqB,KAAK,YAAY;AAE/D,YAAM,QAAQ,CAAC,OAA0C;AA/CjE;AAgDU,YAAI,CAAC;AAAI,iBAAO;AAEhB,gBAAO,kBAAa,EAAE,MAAf,YAAoB;AAAA,MAC7B;AAEA,UAAI;AAAQ,eAAO,MAAM,MAAM;AAE/B,YAAM,cAAc;AAAA,QAClB,IAAI,qBAAqB,KAAK,QAAQ;AAAA,QACtC,GAAG,IAAI,qBAAqB,KAAK,gBAAgB;AAAA,MACnD;AAEA,iBAAW,MAAM,aAAa;AAC5B,cAAM,QAAQ,MAAM,EAAE;AAEtB,YAAI;AAAO,iBAAO;AAAA,MACpB;AAEA,aAAO;AAAA,IACT,CAAC;AAAA,IACH,CAAC,MAAM;AAAA,EACT;AAEA,SAAO,4BAA4B,EAAE,KAAK,SAAS;AACrD;;;AxHhDO,IAAM,cAAc;AAEpB,IAAM,qBAAqB,OAAO,cAAc;AAEhD,IAAM,mBAAmB,CAG9B,KAoBkC,CAAC,MAAG;AApBtC,eACA;AAAA,eAAW;AAAA,IACX,SAAS,0BAAgC;AAAA,IACzC,YAAY;AAAA,IACZ;AAAA,IACA,YAAY;AAAA,IACZ,WAAW;AAAA,IACX,oBAAoB;AAAA,IACpB,gBAAgB;AAAA,IAChB,UAAU,CAAC;AAAA,IACX,UAAU;AAAA,IACV,aAAa,CAAC;AAAA,IACd,WAAW;AAAA,IACX,gBAAgB;AAAA,IAChB,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,kBAAkB;AAAA,IAClB,gBAAgB;AAAA,IAChB,mBAAmB;AAAA,EAjDrB,IA+BE,IAmBG,kBAnBH,IAmBG;AAAA,IAlBH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAGA;AAAA,IACE;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,OACG;AAAA,IAEL;AAAA,MACE,QAAQ,CAAC,WAAW;AAAA,QAClB,eAAeE,MAAK,CAAC,SAAS;AAAA,UAC5B,QAAQ,IAAI,MAAM,MAAM;AAAA,UACxB,SAAS,IAAI,MAAM,aAAa;AAAA,QAClC,EAAE;AAAA,QACF,kBAAkBA,MAAK,CAAC,SAAS;AAAA,UAC/B,WAAW,IAAI,MAAM,MAAM,EAAE;AAAA,UAC7B,SAAS,IAAI,MAAM,gBAAgB;AAAA,QACrC,EAAE;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,IACR;AAAA,EACF;AAAA;AAEK,IAAM;AAAA,EACX,eAAe;AAAA,EACf;AAAA,EACA;AACF,IAAI,iBAAiB;AAMd,IAAM,sBAAsB,CACjC,IACA,EAAE,gBAAgB,sBAAsB,IAAgC,CAAC,MAC1D;AAtGjB;AAwGE,QAAM,cAAa,mBAAc,EAAE,EAAE,MAAM,EAAE,eAAe,MAAM,CAAC,MAAhD,YAAqD;AAMxE,QAAM,CAAC,gBAAgB,IAAIC,OAAM,SAAS,CAAC,CAAC,UAAU;AAGtD,QAAM,QAAQ,mBACV;AAAA;AAAA,IAEA,8BAA8B,EAAE;AAAA;AAYpC,QAAM,wBAAwB,yBAAyB;AACvD,QAAM,gBAAgBA,OAAM,QAAQ,MAAM,YAAY,GAAG,CAAC,CAAC;AAE3D,MAAI,CAAC,OAAO;AACV,QAAI,uBAAuB;AACzB,aAAO;AAAA,IACT;AAEA,UAAM,IAAI;AAAA,MACR,GAAG,aAAa;AAAA,IAClB;AAAA,EACF;AAEA,SAAO;AACT;AAEO,IAAM,oBAAoB,CAC/B,IACA,YACG;AACH,QAAM,QAAQ,oBAAoB,IAAI;AAAA,IACpC,eAAe;AAAA,KACZ,QACJ;AAED,SAAO,cAAc,EAAE,MAAM,CAAC,EAAE;AAClC;AAEO,IAAM,kBAAkB,CAC7B,IACA,YACG;AACH,QAAM,QAAQ,oBAAoB,IAAI;AAAA,IACpC,eAAe;AAAA,KACZ,QACJ;AAED,SAAO,cAAc,EAAE,MAAM,CAAC,EAAE;AAClC;AAEO,IAAM,iBAAiB,CAC5B,IACA,YACG;AACH,QAAM,QAAQ,oBAAoB,IAAI;AAAA,IACpC,eAAe;AAAA,KACZ,QACJ;AAED,SAAO,cAAc,EAAE,MAAM,CAAC,EAAE;AAClC;AAGO,IAAM,aAAa,MACxB,kBAAkB,QAAW,EAAE,eAAe,aAAa,CAAC,EAAE,GAAG;;;AyHtLnE,OAAOC,YAAW;AAUX,IAAM,sBAAsB,CACjC,KACA,IACA,UAAsC,CAAC,MACpC;AACH,QAAM,qBAAqBC,OAAM,OAAO,CAAC;AAEzC,QAAM,MAAM,gBAAgB,IAAI;AAAA,IAC9B,eAAe;AAAA,KACZ,QACJ,EAAE,GAAG,EAAE;AAER,SAAOA,OAAM,YAAY,MAAM;AAC7B,UAAM,cAAc,mBAAmB,UAAU;AACjD,QAAI,WAAW;AACf,uBAAmB,UAAU;AAAA,EAC/B,GAAG,CAAC,GAAG,CAAC;AACV;;;AC3BA,OAAOC,aAAW;AAMX,IAAM,gBAAgB,CAC3B,IACA,UAAsC,CAAC,MACpC;AACH,QAAM,iBAAiB,oBAAoB,mBAAmB,IAAI;AAAA,IAChE,eAAe;AAAA,KACZ,QACJ;AAED,SAAOC,QAAM,YAAY,MAAM;AAC7B,mBAAe;AAAA,EACjB,GAAG,CAAC,cAAc,CAAC;AACrB;;;AClBA,OAAOC,aAAW;;;ACMX,IAAM,mBAAmB,CAC9B,IACA,UAAsC,CAAC,MAC3B;AACZ,SAAO,CAAC,CAAC,kBAAkB,IAAI;AAAA,IAC7B,eAAe;AAAA,KACZ,QACJ,EAAE,UAAU;AACf;;;ACJO,IAAM,oBAAoB,CAC/B,IACA,UAAsC,CAAC,MAC3B;AACZ,SAAO,CAAC,CAAC,kBAAkB,IAAI;AAAA,IAC7B,eAAe;AAAA,KACZ,QACJ,EAAE,SAAS;AACd;;;ACPO,IAAM,eAAe,CAI1B,IACA,UAAsC,CAAC,MAEvC,kBAAkB,IAAI;AAAA,EACpB,eAAe;AAAA,GACZ,QACJ,EAAE,OAAO;;;ACdL,IAAM,qBAAqB,CAChC,IACA,UAAsC,CAAC,MAEvC,kBAAkB,IAAI;AAAA,EACpB,eAAe;AAAA,GACZ,QACJ,EAAE,iBAAiB,EAAE;;;ACdxB,OAAOC,aAAW;AAIlB,SAAS,kBAAkB;AAiBpB,IAAM,oBAAoB,CAK/B,UACA,MACA,KAIiC,CAAC,MAC5B;AALN,eACE;AAAA,iBAAa,CAAC,GAAM,MAAS,MAAM;AAAA,IACnC;AAAA,EA9BJ,IA4BE,IAGK,yBAHL,IAGK;AAAA,IAFH;AAAA,IACA;AAAA;AAIF,QAAM,eAAeC,QAAM;AAAA,IACzB,MACE;AAAA,MACE,WAAW,KAAK;AAAA,MAChB,CAAC,EAAE,OAAO,GAAG,SAAS,SAAS,QAAQ,IAAI;AAAA,MAC3C;AAAA,IACF;AAAA;AAAA,IAEF;AAAA,EACF;AAEA,SAAO,kBAAkB,IAAI;AAAA,IAC3B,eAAe;AAAA,KACZ,aACJ,EAAE,KAAK,YAAY;AACtB;;;ACtCO,IAAM,iBAAiB,CAI5B,IACA,UAAsC,CAAC,MACjC;AACN,SAAO,kBAAkB,IAAI;AAAA,IAC3B,eAAe;AAAA,KACZ,QACJ,EAAE,cAAc,EAAE;AACrB;;;ACfO,IAAM,mBAAmB,CAC9B,IACA,UAAsC,CAAC,MACpC;AACH,SAAO,kBAAkB,IAAI;AAAA,IAC3B,eAAe;AAAA,KACZ,QACJ,EAAE,cAAc;AACnB;;;ACRO,IAAM,sBAAsB,CACjC,IACA,UAAsC,CAAC,MACpC;AACH,SAAO,kBAAkB,IAAI;AAAA,IAC3B,eAAe;AAAA,KACZ,QACJ,EAAE,iBAAiB;AACtB;;;ARJO,IAAM,mBAAmB,CAC9B,IACA,UAAsC,CAAC,MACpC;AACH,QAAM,SAAS,aAAa,IAAI;AAAA,IAC9B,eAAe;AAAA,KACZ,QACJ;AAED,QAAM,YAAY,gBAAgB,IAAI;AAAA,IACpC,eAAe;AAAA,KACZ,QACJ,EAAE,OAAO;AAEV,SAAOC,QAAM,YAAY,MAAM;AAC7B,UAAM,YAAY,kBAAkB;AAAA;AAAA,MAElC,oBAAoB;AAAA,MACpB,IAAI,OAAO;AAAA,MACX,SAAS,OAAO;AAAA,IAClB,CAAC;AAED,cAAU,SAAS;AAAA,EACrB,GAAG,CAAC,QAAQ,SAAS,CAAC;AACxB;;;AS/BO,IAAM,kBAAkB,CAAC,OAAiB;AAJjD;AAKE,QAAM,QAAQ,wBAAwB,MAAM;AAC5C,QAAM,OAAO,wBAAwB,KAAK;AAC1C,QAAM,OAAO,wBAAwB,KAAK;AAC1C,QAAM,aAAa,kBAAkB,EAAE,GAAG;AAE1C,MAAI;AAAI,WAAO;AACf,MAAI;AAAO,WAAO;AAClB,MAAI;AAAM,WAAO;AAEjB,UAAO,2BAAQ,eAAR,YAAsB;AAC/B;;;A5ILO,IAAM,sBAAsB,CAAC,EAAE,GAAG,MAAwB;AAC/D,QAAM,SAAS,aAAa,EAAE;AAC9B,QAAM,aAAa,cAAc,EAAE;AAEnC,QAAMC,cAAa,cAAc,EAAE;AAGnC,QAAM,eAAe,OAAO;AAAA,IAC1B,mBAAmB,IAAI,CAAC,QAAQ,CAAC,KAAKA,YAAW,IAAI,GAAG,EAAE,CAAC,CAAC;AAAA,EAC9D;AAGA,QAAM,wBAAwBC,QAAM,QAAQ,MAAM,cAAc,CAAC,CAAC;AAElE,EAAAA,QAAM,UAAU,MAAM;AACpB,WAAO,aAAa;AACpB,WAAO,QAAQ;AAAA,MACb,KAAK;AAAA,IACP;AAAA,EACF,GAAG,CAAC,QAAQ,YAAY,qBAAqB,CAAC;AAE9C,SAAO;AACT;;;A6IhCA,OAAOC,aAAW;AAWX,SAAS,sBAAsB;AAAA,EACpC;AAAA,EACA;AACF,GAGG;AAjBH;AAkBE,QAAM,SAAS,aAAa,EAAE;AAE9B,eAAO,aAAP,gCAAkB,QAAQ;AAE1B,SAAO;AACT;AAEO,SAAS,gBAAgB,EAAE,GAAG,GAAqB;AACxD,QAAM,eAAe,gBAAgB,EAAE,EAAE,UAAU;AACnD,QAAM,UAAU,kBAAkB,EAAE,EAAE,QAAQ;AAC9C,QAAM,cAAc,aAAa,EAAE;AACnC,QAAM,YAAY,kBAAkB,EAAE,EAAE,UAAU;AAElD,EAAAC,QAAM,UAAU,MAAM;AACpB,iBAAa,IAAI;AAEjB,WAAO,MAAM;AACX,mBAAa,KAAK;AAAA,IACpB;AAAA,EACF,GAAG,CAAC,YAAY,CAAC;AAQjB,EAAAA,QAAM,UAAU,MAAM;AACpB,QAAI,OAAO,cAAc,YAAY;AACnC,gBAAU,WAAW;AAErB,aAAO,MAAM,UAAU,IAAI;AAAA,IAC7B;AACA,QAAI,WAAW;AACb,gBAAU,UAAU;AAEpB,aAAO,MAAM;AACX,kBAAU,UAAU;AAAA,MACtB;AAAA,IACF;AAAA,EACF,GAAG,CAAC,WAAW,WAAW,CAAC;AAE3B,SACE,gBAAAA,QAAA,cAAAA,QAAA,gBACG,QAAQ,IAAI,CAAC,WACZ,gBAAAA,QAAA,cAAC,yBAAsB,IAAQ,KAAK,OAAO,KAAK,QAAgB,CACjE,CACH;AAEJ;;;AClEA,OAAOC,aAAW;AAElB,SAAS,aAA6B;AACtC,SAAS,gBAAgB;AAIlB,IAAM,oBAAoBC,QAAM,KAAK,CAAC,EAAE,GAAG,MAAwB;AACxE,QAAM,cAAc,SAAS;AAC7B,QAAM,sBAAsB,oBAAoB,iBAAiB,EAAE;AAEnE,EAAAA,QAAM,UAAU,MAAM;AACpB,wBAAoB;AAAA,EACtB,CAAC;AAED,QAAM,yBAAyB,oBAAoB,oBAAoB,EAAE;AACzE,QAAM,mBAAmBA,QAAM,OAAO,YAAY,SAAS;AAE3D,QAAM,gBAAgB;AAAA,IACpB,iBAAiB;AAAA,IACjB,YAAY;AAAA,EACd;AAEA,EAAAA,QAAM,UAAU,MAAM;AACpB,QAAI,CAAC,eAAe;AAClB,6BAAuB;AAAA,IACzB;AAEA,qBAAiB,UAAU,YAAY;AAAA,EACzC,GAAG,CAAC,YAAY,WAAW,eAAe,sBAAsB,CAAC;AAEjE,SAAO;AACT,CAAC;AAED,IAAM,mBAAmB,CAAC,GAAc,MAAiB;AACvD,MAAI,CAAC,KAAK,CAAC;AAAG,WAAO;AACrB,MAAI,CAAC,KAAK,CAAC;AAAG,WAAO;AAErB,SAAO,MAAM,OAAO,GAAG,CAAC;AAC1B;;;ACxCA,OAAOC,aAAW;AAElB,SAAqB,mBAAAC,wBAAuB;AAC5C,SAAS,UAAAC,eAAc;;;ACHvB,OAAOC,aAAW;;;ACAlB,OAAOC,aAAW;AAElB,SAAS,aAAAC,kBAAiB;AAC1B,OAAO,UAAU;AACjB,SAAS,0BAA0B;AAW5B,IAAM,mBAAmB,CAC9B,gBAAgC,CAAC,MACd;AACnB,QAAM,EAAE,GAAG,IAAI;AAEf,QAAM,SAAS,aAAa,EAAE;AAC9B,QAAM,YAAY,kBAAkB,EAAE;AACtC,QAAM,kBAAkB,UAAU,gBAAgB;AAClD,QAAM,WAAW,UAAU,SAAS;AACpC,QAAM,gBAAgB,UAAU,SAAS;AACzC,QAAM,kBAAkB,UAAU,WAAW;AAC7C,QAAM,qBAAqB,UAAU,cAAc;AAEnD,QAAM,eAAeC,QAAM,QAAQ,MAAM;AACvC,WAAO,aAAa,QAAQ,wCAAiB,+CAAe,QAAQ;AAAA,EACtE,GAAG,CAAC,+CAAe,UAAU,QAAQ,aAAa,CAAC;AAEnD,QAAM,WAAgCA,QAAM,QAAQ,MAAM;AACxD,QAAI,CAAC,mBAAmB,CAAC;AAAc;AAEvC,WAAO,CAAC,UAAU,aAAa,KAAK;AAAA,EACtC,GAAG,CAAC,cAAc,eAAe,CAAC;AAElC,QAAM,gBAAgBA,QAAM,QAAQ,MAAM;AACxC,WAAO;AAAA,MACL;AAAA,MACA,kDAAsB,+CAAe;AAAA,IACvC;AAAA,EACF,GAAG,CAAC,+CAAe,eAAe,QAAQ,kBAAkB,CAAC;AAE7D,QAAM,aAAaA,QAAM,QAAQ,MAAM;AACrC,WAAO,eAAe,QAAQ,4CAAmB,+CAAe,UAAU;AAAA,EAC5E,GAAG,CAAC,+CAAe,YAAY,QAAQ,eAAe,CAAC;AAEvD,QAAM,QAAwB,mBAAmB,MAAM;AACrD,UAAM,SAAyB;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,QAAIC,WAAU,QAAQ,GAAG;AACvB,aAAO,WAAW;AAAA,IACpB;AAEA,iBAAa,QAAQ,CAAC,eAAe;AACnC,YAAM,UAAU,YAAY,QAAQ;AAAA,QAClC;AAAA,QACA;AAAA,MACF,CAAC;AAED,UAAI,SAAS;AACX,eAAO,UAAU,IAAI;AAAA,MACvB;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT,GAAG,CAAC,UAAU,eAAe,eAAe,YAAY,QAAQ,CAAC;AAEjE,SAAO;AAAA,IACL,MAAO,kCACF,KAAK,eAAe,CAAC,GAAG,cAAc,iBAAiB,YAAY,CAAC,IACpE;AAAA,IAEL,CAAC,eAAe,KAAK;AAAA,EACvB;AACF;;;ACjFA,OAAOC,aAAW;AAIlB,SAAS,aAAAC,kBAAiB;AAanB,IAAM,kBAAkB,CAG7B;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAS;AACX,MAAkC;AAChC,QAAM,SAAS,aAAmB,EAAE;AAEpC,QAAM,SAAS,eAAe,EAAE;AAChC,QAAM,CAAC,YAAY,aAAa,IAAI,OAAO,WAAW;AACtD,QAAM,CAAC,EAAE,UAAU,IAAI,OAAO,QAAQ;AAEtC,EAAAC,QAAM,UAAU,MAAM;AACpB,QAAIC,WAAU,WAAW,KAAK,gBAAgB,YAAY;AACxD,oBAAc,UAAU;AAExB,sBAAsB,QAAQ;AAAA,QAC5B;AAAA,QACA,SAAS;AAAA,MACX,CAAC;AACD,iBAAW,OAAO,OAAc;AAAA,IAClC;AAAA,EACF,GAAG;AAAA,IACD;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACH;;;ACjDA,OAAOC,aAAW;AAcX,IAAM,gBAAgB,CAAkB;AAAA,EAC7C;AACF,MAEoC;AAClC,QAAM,SAAS,aAAa,EAAE;AAC9B,QAAM,QAAQ,kBAAkB,EAAE,EAAE,MAAM;AAC1C,QAAM,WAAW,gBAAgB,EAAE,EAAE,MAAM;AAC3C,QAAM,eAAe,kBAAkB,EAAE,EAAE,SAAS;AACpD,QAAM,oBAAoB,kBAAkB,EAAE,EAAE,cAAc;AAC9D,QAAM,wBAAwB,kBAAkB,EAAE,EAAE,kBAAkB;AAEtE,QAAM,WAAWC,QAAM;AAAA,IACrB,CAAC,aAAgB;AACf,YAAM,iBAAiB,aAAa,MAAM,EAAE,QAAQ;AAEpD,UAAI,CAAC,gBAAgB;AACnB,qDAAe;AAAA,MACjB;AAEA,eAAS,QAAQ;AAAA,IACnB;AAAA,IACA,CAAC,QAAQ,UAAU,YAAY;AAAA,EACjC;AAEA,QAAM,gBAAgBA,QAAM;AAAA,IAC1B,MAAM;AAAA,IACN,CAAC,iBAAiB;AAAA,EACpB;AAEA,QAAM,oBAAoBA,QAAM;AAAA,IAC9B,MAAM;AAAA,IACN,CAAC,qBAAqB;AAAA,EACxB;AAEA,SAAOA,QAAM,QAAQ,MAAM;AACzB,WAAO;AAAA,MACL;AAAA,MACA,cAAc;AAAA,MACd,KAAK,OAAO;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF,GAAG,CAAC,QAAQ,UAAU,mBAAmB,eAAe,KAAK,CAAC;AAChE;;;AH7CO,SAAS,aAGd,IAAiD;AAAjD,eAAE,WAlBJ,IAkBE,IAAe,kBAAf,IAAe,CAAb;AACF,kBAAsB,KAAK;AAE3B,SAAO,gBAAAC,QAAA,cAAAA,QAAA,gBAAG,QAAS;AACrB;;;AD6DA,SAAS,WAGP;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,QAAQ;AAAA,EACR;AAAA,EACA,IAAI;AAAA,EACJ;AAAA,EACA;AAAA,EACA,uBAAuB;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAS;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,OAAO;AACT,GAAqB;AACnB,QAAM,CAAC,EAAE,IAAIC,QAAM,SAAS,MAAG;AA1GjC;AA0GoC,gEAAY,OAAZ,YAAkB,WAAlB,YAA4BC,QAAO;AAAA,GAAC;AAEtE,QAAM,SAAYD,QAAM;AAAA,IACtB,MACE,kCACA,kBAAkB;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS;AAAA,IACX,CAAC;AAAA;AAAA,IAEH,CAAC;AAAA,EACH;AAEA,QAAM,QAAQA,QAAM;AAAA,IAClB,MAAM;AACJ,UAAI,YAAY,sCAAgB;AAEhC,UAAI,CAAC,WAAW;AACd,oBACE,OAAO,SAAS,SAAS,IACrB,OAAO,WACN,OAAO,gBAAgB;AAAA,MAChC;AAEA,YAAM,kBAAkB,sBAAsB,QAAQ,SAAS;AAE/D,UAAI,iBAAiB;AACnB,oBAAY;AAAA,MACd;AAEA,aAAO,WAAW;AAElB,UAAI,6BAA6B;AAC/B,QAAAE,iBAAgB,QAAQ,EAAE,OAAO,KAAK,CAAC;AAAA,MACzC;AAEA,aAAO,OAAO;AAAA,IAChB;AAAA;AAAA,IAEA,CAAC;AAAA,EACH;AAEA,SACE,gBAAAF,QAAA;AAAA,IAAC;AAAA;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MAGA;AAAA,MACA,SAAS,OAAO;AAAA,MAChB;AAAA,MACA,YAAY;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP;AAAA;AAAA,IAEA,gBAAAA,QAAA;AAAA,MAAC;AAAA;AAAA,QACC;AAAA,QACA;AAAA,QACA,SAAS;AAAA;AAAA,MAER;AAAA,IACH;AAAA,EACF;AAEJ;AAEO,SAAS,MAGd,OAAyB;AACzB,QAAM,EAAE,GAAG,IAAI;AAEf,SAAO,gBAAAA,QAAA,cAAC,6BAAW,KAAK,yBAAI,cAAgB,MAAO;AACrD;;;AK5LA,OAAOG,aAAW;AAElB,SAAS,gBAAgB;;;ACFzB,OAAOC,aAAW;AAElB,SAAS,iBAAiB;AAC1B,SAAS,kBAAkB;AAcpB,IAAM,wBAAwB,CAAC;AAAA,EACpC,IAAI;AACN,MAAkC;AAChC,QAAM,cAAc,WAAW;AAC/B,QAAM,KAAK,0BAAU;AAErB,QAAM,mBAAmBC,QAAM;AAAA,IAC7B,MACE;AAAA,MAAU,qBAAqB,KAAK;AAAA,MAAc,CAAC,UACjD,MAAM,KAAK,EAAE;AAAA,IACf;AAAA,IACF,CAAC,EAAE;AAAA,EACL;AACA,QAAM,kBAAkB,0BAA0B,EAAE,KAAK,kBAAkB;AAAA,IACzE,eAAe;AAAA,EACjB,CAAC;AACD,QAAM,QAAQ,cAAc,EAAE,EAAE,MAAM;AAEtC,QAAM,UAAU,kBAAkB,EAAE,EAAE,QAAQ;AAC9C,QAAM,sBAAsB,0BAA0B,EAAE,iBAAiB;AAAA,IACvE,eAAe;AAAA,EACjB,CAAC;AAED,QAAM,UAAU,WAAW;AAC3B,QAAM,cAAc,0BAA0B,EAAE,SAAS;AAAA,IACvD,eAAe;AAAA,EACjB,CAAC;AAED,EAAAA,QAAM,UAAU,MAAM;AACpB,oBAAgB,wBAAS,IAAI;AAE7B,WAAO,MAAM;AACX,sBAAgB,IAAI;AACpB,kBAAY,CAAC,aAAc,aAAa,KAAK,OAAO,QAAS;AAAA,IAC/D;AAAA,EACF,GAAG,CAAC,OAAO,iBAAiB,aAAa,EAAE,CAAC;AAE5C,EAAAA,QAAM,UAAU,MAAM;AACpB,QAAI,SAAS;AACX,0BAAoB,CAAC,QAAQ,CAAC,GAAG,KAAK,EAAE,CAAC;AAEzC,aAAO,MAAM;AACX,4BAAoB,CAAC,QAAQ,IAAI,OAAO,CAAC,MAAM,MAAM,EAAE,CAAC;AAAA,MAC1D;AAAA,IACF;AAAA,EACF,GAAG,CAAC,IAAI,SAAS,mBAAmB,CAAC;AAErC,EAAAA,QAAM,UAAU,MAAM;AACpB,QAAI,MAAM,SAAS;AACjB,kBAAY,EAAE;AAAA,IAChB;AAAA,EACF,GAAG,CAAC,IAAI,SAAS,WAAW,CAAC;AAE7B,SAAO;AACT;;;ACvEA,OAAOC,aAAW;AAElB,SAAS,aAAa;AAWf,SAAS,WAAW;AAAA,EACzB;AAAA,EACA;AACF,GAGG;AAnBH;AAoBE,QAAM,aAAa,cAAc,EAAE,GAAG,CAAC;AAEvC,QAAM,SAAS,aAAa,EAAE;AAE9B,MAAI,aACF,gBAAAC,QAAA,cAAC,0BAAW,aAAqB,QAAS;AAG5C,eAAO,YAAP,mBAAgB,QAAQ,CAAC,WAAW;AAClC,UAAM,EAAE,kBAAkB,iBAAiB,IAAI;AAE/C,QAAI;AACF,mBAAa,gBAAAA,QAAA,cAAC,wBAAkB,UAAW;AAAA,EAC/C;AAEA,SAAO;AACT;;;AFLA,IAAM,eAAeC,QAAM;AAAA,EACzB,CAAC,IAAiD,QAAQ;AAAzD,iBAAE,iBAhCL,IAgCG,IAAqB,kBAArB,IAAqB,CAAnB;AACD,UAAM,EAAE,GAAG,IAAI;AAEf,UAAM,SAAS,aAAa,EAAE;AAE9B,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,UAAM,gBAAgB,iBAAiB,KAAK;AAE5C,UAAM,WAAW,gBAAAA,QAAA,cAAC,2BAAS,OAAe,cAAuB;AAEjE,QAAI,gBAAiC;AACrC,QAAI,iBAAkC;AAEtC,WAAO,QAAQ,QAAQ,CAAC,WAAW;AACjC,YAAM;AAAA,QACJ,qBAAqB;AAAA,QACrB,sBAAsB;AAAA,MACxB,IAAI;AAEJ,UAAI,qBAAqB;AACvB,wBACE,gBAAAA,QAAA,cAAAA,QAAA,gBACG,eACD,gBAAAA,QAAA,cAAC,wCAAwB,cAAe,CAC1C;AAAA,MAEJ;AACA,UAAI,sBAAsB;AACxB,yBACE,gBAAAA,QAAA,cAAAA,QAAA,gBACG,gBACD,gBAAAA,QAAA,cAAC,yCAAyB,cAAe,CAC3C;AAAA,MAEJ;AAAA,IACF,CAAC;AAED,QAAI,gBACF,gBAAAA,QAAA,cAAAA,QAAA,gBACG,gBAEA,iBAAiB,eAAe,QAAQ,IAAI,UAE7C,gBAAAA,QAAA,cAAC,uBAAoB,IAAQ,GAC7B,gBAAAA,QAAA,cAAC,qBAAkB,IAAQ,GAC3B,gBAAAA,QAAA,cAAC,mBAAgB,IAAQ,GACzB,gBAAAA,QAAA,cAAC,yBAAsB,IAAQ,GAE9B,aACH;AAGF,WAAO,QAAQ,QAAQ,CAAC,WAAW;AACjC,YAAM,EAAE,qBAAqB,oBAAoB,IAAI;AAErD,UAAI;AACF,wBACE,gBAAAA,QAAA,cAAC,2BAAqB,aAAc;AAAA,IAE1C,CAAC;AAED,WAAO,gBAAAA,QAAA,cAAC,cAAW,MAAS,aAAc;AAAA,EAC5C;AACF;AACA,aAAa,cAAc;;;AGrG3B,OAAOC,aAAW;AAQX,SAAS,UAA2B,IAQxB;AARwB,eACzC;AAAA;AAAA,IACA,uBAAAC;AAAA,IACA,UAAU;AAAA,EAXZ,IAQ2C,IAItC,kBAJsC,IAItC;AAAA,IAHH;AAAA,IACA;AAAA,IACA;AAAA;AAMA,QAAM,EAAE,QAAQ,SAAS,IAAI,QAAQ,IAAI;AAEzC,MAAI,SAAS;AAEb,MAAI,UAAU,CAAC,OAAO,SAAS;AAC7B,aAAS,kBAAkB;AAAA,MACzB;AAAA,MACA;AAAA,MACA,uBAAAA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAEA,SACE,gBAAAC,QAAA,cAAC,wCAAU,QAAV,EAAiB,WAChB,gBAAAA,QAAA;AAAA,IAAC;AAAA;AAAA,MACC,WAAS;AAAA,MACT,eAAY;AAAA,MACZ,gBAAc;AAAA,OACV;AAAA,EACN,CACF;AAEJ;","names":["React","React","atom","isDefined","_a","_b","_a","_b","withoutNormalizing","withoutNormalizing","defaultsDeep","defaultsDeep","defaultsDeep","defaultsDeep","castArray","_a","merge","merge","cloneDeep","isElement","clsx","isElement","clsx","jsx","isDefined","castArray","deserializeHtml","isElement","_a","castArray","values","isDefined","jsx","isElement","isText","jsx","isElement","isText","jsx","document","isDefined","React","DefaultElement","React","withHOC","React","React","DefaultElement","React","React","React","React","React","React","React","atom","atom","React","atom","React","React","React","React","React","React","React","React","React","plateStore","React","React","React","React","React","React","normalizeEditor","nanoid","React","React","isDefined","React","isDefined","React","isDefined","React","isDefined","React","React","React","React","nanoid","normalizeEditor","React","React","React","React","React","React","React","normalizeInitialValue","React"]}