{"version":3,"sources":["../src/index.ts","../src/createLinkPlugin.ts","../src/utils/createLinkNode.ts","../src/utils/encodeUrlIfNeeded.ts","../src/utils/getLinkAttributes.ts","../src/utils/safeDecodeUrl.ts","../src/components/useLink.ts","../src/components/useLinkToolbarButton.ts","../src/components/FloatingLink/FloatingLinkNewTabInput.tsx","../src/components/FloatingLink/floatingLinkStore.ts","../src/components/FloatingLink/FloatingLinkUrlInput.tsx","../src/components/FloatingLink/LinkOpenButton.tsx","../src/components/FloatingLink/useFloatingLinkEdit.ts","../src/utils/triggerFloatingLinkEdit.ts","../src/components/FloatingLink/useFloatingLinkEnter.ts","../src/transforms/submitFloatingLink.ts","../src/transforms/insertLink.ts","../src/transforms/unwrapLink.ts","../src/transforms/upsertLink.ts","../src/transforms/upsertLinkText.ts","../src/transforms/wrapLink.ts","../src/components/FloatingLink/useFloatingLinkEscape.ts","../src/components/FloatingLink/useVirtualFloatingLink.ts","../src/components/FloatingLink/useFloatingLinkInsert.ts","../src/utils/triggerFloatingLinkInsert.ts","../src/utils/triggerFloatingLink.ts","../src/utils/validateUrl.ts","../src/withLink.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './createLinkPlugin';\nexport * from './types';\nexport * from './withLink';\nexport * from './components/index';\nexport * from './transforms/index';\nexport * from './utils/index';\n","import {\n  type RangeBeforeOptions,\n  createPluginFactory,\n  isUrl,\n} from '@udecode/plate-common/server';\n\nimport type { TLinkElement } from './types';\n\nimport { getLinkAttributes, validateUrl } from './utils/index';\nimport { withLink } from './withLink';\n\nexport const ELEMENT_LINK = 'a';\n\nexport interface LinkPlugin {\n  /**\n   * List of allowed URL schemes.\n   *\n   * @default ['http', 'https', 'mailto', 'tel']\n   */\n  allowedSchemes?: string[];\n\n  /**\n   * Skips sanitation of links.\n   *\n   * @default false\n   */\n  dangerouslySkipSanitization?: boolean;\n\n  /**\n   * Default HTML attributes for link elements.\n   *\n   * @default { }\n   */\n  defaultLinkAttributes?: React.AnchorHTMLAttributes<HTMLAnchorElement>;\n\n  forceSubmit?: boolean;\n\n  /**\n   * On keyboard shortcut or toolbar mousedown, get the link url by calling this\n   * promise. The default behavior is to use the browser's native `prompt`.\n   */\n  getLinkUrl?: (prevUrl: null | string) => Promise<null | string>;\n\n  /**\n   * Callback to optionally get the href for a url\n   *\n   * @returns Href: an optional link to be used that is different from the text\n   *   content (example https://google.com for google.com)\n   */\n  getUrlHref?: (url: string) => string | undefined;\n\n  /**\n   * Callback to validate an url.\n   *\n   * @default isUrl\n   */\n  isUrl?: (text: string) => boolean;\n\n  /**\n   * Keeps selected text on pasting links by default.\n   *\n   * @default true\n   */\n  keepSelectedTextOnPaste?: boolean;\n\n  /**\n   * Allow custom config for rangeBeforeOptions.\n   *\n   * @example\n   *   default\n   *   {\n   *   matchString: ' ',\n   *   skipInvalid: true,\n   *   afterMatch: true,\n   *   }\n   */\n  rangeBeforeOptions?: RangeBeforeOptions;\n\n  /**\n   * Transform the content of the URL input before validating it. Useful for\n   * adding a protocol to a URL. E.g. `google.com` -> `https://google.com`\n   *\n   * Similar to `getUrlHref` but is used on URL inputs. Whereas that is used on\n   * any entered text.\n   *\n   * @returns The transformed URL.\n   */\n  transformInput?: (url: string) => string | undefined;\n\n  /**\n   * Hotkeys to trigger floating link.\n   *\n   * @default 'meta+k, ctrl+k'\n   */\n  triggerFloatingLinkHotkeys?: string | string[];\n}\n\n/** Enables support for hyperlinks. */\nexport const createLinkPlugin = createPluginFactory<LinkPlugin>({\n  dangerouslyAllowAttributes: ['target'],\n  isElement: true,\n  isInline: true,\n  key: ELEMENT_LINK,\n  options: {\n    allowedSchemes: ['http', 'https', 'mailto', 'tel'],\n    dangerouslySkipSanitization: false,\n    defaultLinkAttributes: {},\n    isUrl,\n    keepSelectedTextOnPaste: true,\n    rangeBeforeOptions: {\n      afterMatch: true,\n      matchString: ' ',\n      skipInvalid: true,\n    },\n    triggerFloatingLinkHotkeys: 'meta+k, ctrl+k',\n  },\n  then: (editor, { type }) => ({\n    deserializeHtml: {\n      getNode: (el) => {\n        const url = el.getAttribute('href');\n\n        if (url && validateUrl(editor, url)) {\n          return {\n            target: el.getAttribute('target') || '_blank',\n            type,\n            url,\n          };\n        }\n      },\n      rules: [\n        {\n          validNodeName: 'A',\n        },\n      ],\n    },\n    props: ({ element }) => ({\n      nodeProps: getLinkAttributes(editor, element as TLinkElement),\n    }),\n  }),\n  withOverrides: withLink,\n});\n","import {\n  type PlateEditor,\n  type TText,\n  type Value,\n  getPluginType,\n} from '@udecode/plate-common/server';\n\nimport type { TLinkElement } from '../types';\n\nimport { ELEMENT_LINK } from '../createLinkPlugin';\n\nexport interface CreateLinkNodeOptions {\n  url: string;\n  children?: TText[];\n  target?: string;\n  text?: string;\n}\n\nexport const createLinkNode = <V extends Value>(\n  editor: PlateEditor<V>,\n  { children, target, text = '', url }: CreateLinkNodeOptions\n): TLinkElement => {\n  const type = getPluginType(editor, ELEMENT_LINK);\n\n  return {\n    children: children ?? [{ text }],\n    target,\n    type,\n    url,\n  };\n};\n","/**\n * If a URL has not already been encoded and contains characters that require\n * encoding, encode the URL.\n *\n * @param url URL to encode\n */\nexport const encodeUrlIfNeeded = (url: string) => {\n  try {\n    const isEncoded = url !== decodeURIComponent(url);\n\n    return isEncoded ? url : encodeURI(url);\n  } catch (error) {\n    if (error instanceof URIError) {\n      return url;\n    }\n\n    throw error;\n  }\n};\n","import {\n  type PlateEditor,\n  type Value,\n  getPluginOptions,\n  sanitizeUrl,\n} from '@udecode/plate-common/server';\n\nimport type { TLinkElement } from '../types';\n\nimport { ELEMENT_LINK, type LinkPlugin } from '../createLinkPlugin';\n\nexport const getLinkAttributes = <V extends Value>(\n  editor: PlateEditor<V>,\n  link: TLinkElement\n) => {\n  const { allowedSchemes, dangerouslySkipSanitization, defaultLinkAttributes } =\n    getPluginOptions<LinkPlugin, V>(editor, ELEMENT_LINK);\n\n  const attributes = { ...defaultLinkAttributes };\n\n  const href = dangerouslySkipSanitization\n    ? link.url\n    : sanitizeUrl(link.url, { allowedSchemes }) || undefined;\n\n  // Avoid passing `undefined` for href or target\n  if (href !== undefined) {\n    attributes.href = href;\n  }\n  if ('target' in link) {\n    attributes.target = link.target;\n  }\n\n  return attributes;\n};\n","export const safeDecodeUrl = (url: string) => {\n  try {\n    return decodeURI(url);\n  } catch (error) {\n    if (error instanceof URIError) {\n      return url;\n    }\n\n    throw error;\n  }\n};\n","import { useEditorRef } from '@udecode/plate-common';\n\nimport type { TLinkElement } from '../types';\n\nimport { getLinkAttributes } from '../utils/index';\n\nexport const useLink = ({ element }: { element: TLinkElement }) => {\n  const editor = useEditorRef();\n\n  return {\n    props: {\n      ...getLinkAttributes(editor, element),\n      // quick fix: hovering <a> with href loses the editor focus\n      onMouseOver: (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        e.stopPropagation();\n      },\n    },\n  };\n};\n","import { useEditorRef, useEditorSelector } from '@udecode/plate-common';\nimport { getPluginType, someNode } from '@udecode/plate-common/server';\n\nimport { ELEMENT_LINK, triggerFloatingLink } from '../index';\n\nexport const useLinkToolbarButtonState = () => {\n  const pressed = useEditorSelector(\n    (editor) =>\n      !!editor?.selection &&\n      someNode(editor, {\n        match: { type: getPluginType(editor, ELEMENT_LINK) },\n      }),\n    []\n  );\n\n  return {\n    pressed,\n  };\n};\n\nexport const useLinkToolbarButton = (\n  state: ReturnType<typeof useLinkToolbarButtonState>\n) => {\n  const editor = useEditorRef();\n\n  return {\n    props: {\n      onClick: () => {\n        triggerFloatingLink(editor, { focused: true });\n      },\n      onMouseDown: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n      },\n      pressed: state.pressed,\n    },\n  };\n};\n","import React from 'react';\n\nimport { createPrimitiveComponent } from '@udecode/plate-common';\n\nimport {\n  floatingLinkActions,\n  floatingLinkSelectors,\n  useFloatingLinkSelectors,\n} from './floatingLinkStore';\n\nexport const useFloatingLinkNewTabInputState = () => {\n  const updated = useFloatingLinkSelectors().updated();\n  const ref = React.useRef<HTMLInputElement>(null);\n  const [checked, setChecked] = React.useState<boolean>(\n    floatingLinkSelectors.newTab()\n  );\n\n  React.useEffect(() => {\n    if (ref.current && updated) {\n      setTimeout(() => {\n        ref.current?.focus();\n      }, 0);\n    }\n  }, [updated]);\n\n  return {\n    checked,\n    ref,\n    setChecked,\n  };\n};\n\nexport const useFloatingLinkNewTabInput = ({\n  checked,\n  ref,\n  setChecked,\n}: ReturnType<typeof useFloatingLinkNewTabInputState>) => {\n  const onChange: React.ChangeEventHandler<HTMLInputElement> =\n    React.useCallback(\n      (e) => {\n        setChecked(e.target.checked);\n        floatingLinkActions.newTab(e.target.checked);\n      },\n      [setChecked]\n    );\n\n  return {\n    props: {\n      checked,\n      onChange,\n      type: 'checkbox',\n    },\n    ref,\n  };\n};\n\nexport const FloatingLinkNewTabInput = createPrimitiveComponent('input')({\n  propsHook: useFloatingLinkNewTabInput,\n  stateHook: useFloatingLinkNewTabInputState,\n});\n","import { createZustandStore } from '@udecode/plate-common/server';\n\nexport type FloatingLinkMode = '' | 'edit' | 'insert';\n\nexport const floatingLinkStore = createZustandStore('floatingLink')({\n  isEditing: false,\n  mode: '' as FloatingLinkMode,\n  mouseDown: false,\n  newTab: false,\n  openEditorId: null as null | string,\n  text: '',\n  updated: false,\n  url: '',\n})\n  .extendActions((set) => ({\n    reset: () => {\n      set.url('');\n      set.text('');\n      set.newTab(false);\n      set.mode('');\n      set.isEditing(false);\n    },\n  }))\n  .extendActions((set) => ({\n    hide: () => {\n      set.openEditorId(null);\n      set.reset();\n    },\n    show: (mode: FloatingLinkMode, editorId: string) => {\n      set.mode(mode);\n      set.isEditing(false);\n      set.openEditorId(editorId);\n    },\n  }))\n  .extendSelectors((state) => ({\n    isOpen: (editorId: string) => state.openEditorId === editorId,\n  }));\n\nexport const floatingLinkActions = floatingLinkStore.set;\n\nexport const floatingLinkSelectors = floatingLinkStore.get;\n\nexport const useFloatingLinkSelectors = () => floatingLinkStore.use;\n","import React from 'react';\n\nimport { createPrimitiveComponent } from '@udecode/plate-common';\n\nimport { encodeUrlIfNeeded } from '../../utils/encodeUrlIfNeeded';\nimport { safeDecodeUrl } from '../../utils/safeDecodeUrl';\nimport {\n  floatingLinkActions,\n  floatingLinkSelectors,\n  useFloatingLinkSelectors,\n} from './floatingLinkStore';\n\nexport const useFloatingLinkUrlInputState = () => {\n  const updated = useFloatingLinkSelectors().updated();\n  const ref = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (ref.current && updated) {\n      setTimeout(() => {\n        const input = ref.current;\n\n        if (!input) return;\n\n        input.focus();\n        input.value = floatingLinkSelectors.url()\n          ? safeDecodeUrl(floatingLinkSelectors.url())\n          : '';\n      }, 0);\n    }\n  }, [updated]);\n\n  return {\n    ref,\n  };\n};\n\nexport const useFloatingLinkUrlInput = (\n  state: ReturnType<typeof useFloatingLinkUrlInputState>\n) => {\n  const onChange: React.ChangeEventHandler<HTMLInputElement> =\n    React.useCallback((e) => {\n      const url = encodeUrlIfNeeded(e.target.value);\n      floatingLinkActions.url(url);\n    }, []);\n\n  return {\n    props: {\n      defaultValue: floatingLinkSelectors.url(),\n      onChange,\n    },\n    ref: state.ref,\n  };\n};\n\nexport const FloatingLinkUrlInput = createPrimitiveComponent('input')({\n  propsHook: useFloatingLinkUrlInput,\n  stateHook: useFloatingLinkUrlInputState,\n});\n","import React from 'react';\n\nimport {\n  createPrimitiveComponent,\n  useEditorRef,\n  useEditorSelection,\n} from '@udecode/plate-common';\nimport { findNode, getPluginType } from '@udecode/plate-common/server';\n\nimport type { TLinkElement } from '../../types';\n\nimport { ELEMENT_LINK } from '../../createLinkPlugin';\nimport { getLinkAttributes } from '../../utils/index';\n\nexport const useLinkOpenButtonState = () => {\n  const editor = useEditorRef();\n  const selection = useEditorSelection();\n\n  const entry = React.useMemo(\n    () =>\n      findNode<TLinkElement>(editor, {\n        match: { type: getPluginType(editor, ELEMENT_LINK) },\n      }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [editor, selection]\n  );\n\n  if (!entry) {\n    return {};\n  }\n\n  const [element] = entry;\n\n  return {\n    element,\n  };\n};\n\nexport const useLinkOpenButton = ({ element }: { element?: TLinkElement }) => {\n  const editor = useEditorRef();\n\n  if (!element) {\n    return {\n      props: {},\n    };\n  }\n\n  const linkAttributes = getLinkAttributes(editor, element);\n\n  return {\n    props: {\n      ...linkAttributes,\n      'aria-label': 'Open link in a new tab',\n      onMouseOver: (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        e.stopPropagation();\n      },\n      target: '_blank',\n    },\n  };\n};\n\nexport const LinkOpenButton = createPrimitiveComponent('a')({\n  propsHook: useLinkOpenButton,\n  stateHook: useLinkOpenButtonState,\n});\n","import React from 'react';\n\nimport {\n  useEditorReadOnly,\n  useEditorRef,\n  useEditorVersion,\n  useHotkeys,\n} from '@udecode/plate-common';\nimport {\n  getAboveNode,\n  getEndPoint,\n  getPluginOptions,\n  getPluginType,\n  getStartPoint,\n  someNode,\n} from '@udecode/plate-common/server';\nimport {\n  getDefaultBoundingClientRect,\n  getRangeBoundingClientRect,\n} from '@udecode/plate-floating';\n\nimport { ELEMENT_LINK, type LinkPlugin } from '../../createLinkPlugin';\nimport { type LinkFloatingToolbarState, unwrapLink } from '../../index';\nimport { triggerFloatingLinkEdit } from '../../utils/triggerFloatingLinkEdit';\nimport {\n  floatingLinkActions,\n  floatingLinkSelectors,\n  useFloatingLinkSelectors,\n} from './floatingLinkStore';\nimport { useFloatingLinkEnter } from './useFloatingLinkEnter';\nimport { useFloatingLinkEscape } from './useFloatingLinkEscape';\nimport { useVirtualFloatingLink } from './useVirtualFloatingLink';\n\nexport const useFloatingLinkEditState = ({\n  floatingOptions,\n}: LinkFloatingToolbarState = {}) => {\n  const editor = useEditorRef();\n  const { triggerFloatingLinkHotkeys } = getPluginOptions<LinkPlugin>(\n    editor,\n    ELEMENT_LINK\n  );\n  const readOnly = useEditorReadOnly();\n  const isEditing = useFloatingLinkSelectors().isEditing();\n  const version = useEditorVersion();\n  const mode = useFloatingLinkSelectors().mode();\n  const open = useFloatingLinkSelectors().isOpen(editor.id);\n\n  const getBoundingClientRect = React.useCallback(() => {\n    const entry = getAboveNode(editor, {\n      match: { type: getPluginType(editor, ELEMENT_LINK) },\n    });\n\n    if (entry) {\n      const [, path] = entry;\n\n      return getRangeBoundingClientRect(editor, {\n        anchor: getStartPoint(editor, path),\n        focus: getEndPoint(editor, path),\n      });\n    }\n\n    return getDefaultBoundingClientRect();\n  }, [editor]);\n\n  const isOpen = open && mode === 'edit';\n\n  const floating = useVirtualFloatingLink({\n    editorId: editor.id,\n    getBoundingClientRect,\n    open: isOpen,\n    ...floatingOptions,\n  });\n\n  return {\n    editor,\n    floating,\n    isEditing,\n    isOpen,\n    readOnly,\n    triggerFloatingLinkHotkeys,\n    versionEditor: version,\n  };\n};\n\nexport const useFloatingLinkEdit = ({\n  editor,\n  floating,\n  triggerFloatingLinkHotkeys,\n  versionEditor,\n}: ReturnType<typeof useFloatingLinkEditState>) => {\n  React.useEffect(() => {\n    if (\n      editor.selection &&\n      someNode(editor, {\n        match: { type: getPluginType(editor, ELEMENT_LINK) },\n      })\n    ) {\n      floatingLinkActions.show('edit', editor.id);\n      floating.update();\n\n      return;\n    }\n    if (floatingLinkSelectors.mode() === 'edit') {\n      floatingLinkActions.hide();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [editor, versionEditor, floating.update]);\n\n  useHotkeys(\n    triggerFloatingLinkHotkeys!,\n    (e) => {\n      if (\n        floatingLinkSelectors.mode() === 'edit' &&\n        triggerFloatingLinkEdit(editor)\n      ) {\n        e.preventDefault();\n      }\n    },\n    {\n      enableOnContentEditable: true,\n    },\n    []\n  );\n\n  useFloatingLinkEnter();\n\n  useFloatingLinkEscape();\n\n  return {\n    editButtonProps: {\n      onClick: () => {\n        triggerFloatingLinkEdit(editor);\n      },\n    },\n    props: {\n      style: {\n        ...floating.style,\n        zIndex: 50,\n      },\n    },\n    ref: floating.refs.setFloating,\n    unlinkButtonProps: {\n      onClick: () => {\n        unwrapLink(editor);\n      },\n      onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n      },\n    },\n  };\n};\n","import {\n  type PlateEditor,\n  type Value,\n  findNode,\n  getEditorString,\n  getPluginType,\n} from '@udecode/plate-common/server';\n\nimport type { TLinkElement } from '../types';\n\nimport { floatingLinkActions } from '../components/FloatingLink/floatingLinkStore';\nimport { ELEMENT_LINK } from '../createLinkPlugin';\n\nexport const triggerFloatingLinkEdit = <V extends Value>(\n  editor: PlateEditor<V>\n) => {\n  const entry = findNode<TLinkElement>(editor, {\n    match: { type: getPluginType(editor, ELEMENT_LINK) },\n  });\n\n  if (!entry) return;\n\n  const [link, path] = entry;\n\n  let text = getEditorString(editor, path);\n\n  floatingLinkActions.url(link.url);\n\n  floatingLinkActions.newTab(link.target === '_blank');\n\n  if (text === link.url) {\n    text = '';\n  }\n\n  floatingLinkActions.text(text);\n\n  floatingLinkActions.isEditing(true);\n\n  return true;\n};\n","import { useEditorRef, useHotkeys } from '@udecode/plate-common';\n\nimport { submitFloatingLink } from '../../transforms/submitFloatingLink';\nimport { useFloatingLinkSelectors } from './floatingLinkStore';\n\nexport const useFloatingLinkEnter = () => {\n  const editor = useEditorRef();\n\n  const open = useFloatingLinkSelectors().isOpen(editor.id);\n\n  useHotkeys(\n    '*',\n    (e) => {\n      if (e.key !== 'Enter') return;\n      if (submitFloatingLink(editor)) {\n        e.preventDefault();\n      }\n    },\n    {\n      enableOnFormTags: ['INPUT'],\n      enabled: open,\n    },\n    []\n  );\n};\n","import { focusEditor } from '@udecode/plate-common';\nimport {\n  type PlateEditor,\n  type Value,\n  getPluginOptions,\n} from '@udecode/plate-common/server';\n\nimport {\n  floatingLinkActions,\n  floatingLinkSelectors,\n} from '../components/FloatingLink/floatingLinkStore';\nimport { ELEMENT_LINK, type LinkPlugin } from '../createLinkPlugin';\nimport { validateUrl } from '../utils/index';\nimport { upsertLink } from './index';\n\n/**\n * Insert link if url is valid. Text is url if empty. Close floating link. Focus\n * editor.\n */\nexport const submitFloatingLink = <V extends Value>(editor: PlateEditor<V>) => {\n  if (!editor.selection) return;\n\n  const { forceSubmit, transformInput } = getPluginOptions<LinkPlugin, V>(\n    editor,\n    ELEMENT_LINK\n  );\n\n  const inputUrl = floatingLinkSelectors.url();\n  const url = transformInput ? transformInput(inputUrl) ?? '' : inputUrl;\n\n  if (!forceSubmit && !validateUrl(editor, url)) return;\n\n  const text = floatingLinkSelectors.text();\n  const target = floatingLinkSelectors.newTab() ? '_blank' : undefined;\n\n  floatingLinkActions.hide();\n\n  upsertLink(editor, {\n    skipValidation: true,\n    target,\n    text,\n    url,\n  });\n\n  setTimeout(() => {\n    focusEditor(editor, editor.selection!);\n  }, 0);\n\n  return true;\n};\n","import {\n  type InsertNodesOptions,\n  type PlateEditor,\n  type TText,\n  type Value,\n  insertNodes,\n} from '@udecode/plate-common/server';\n\nimport type { TLinkElement } from '../types';\n\nimport { type CreateLinkNodeOptions, createLinkNode } from '../utils/index';\n\n/** Insert a link node. */\nexport const insertLink = <V extends Value>(\n  editor: PlateEditor<V>,\n  createLinkNodeOptions: CreateLinkNodeOptions,\n  options?: InsertNodesOptions<V>\n) => {\n  insertNodes<TLinkElement | TText>(\n    editor,\n    [createLinkNode(editor, createLinkNodeOptions)],\n    options as any\n  );\n};\n","import {\n  type PlateEditor,\n  type UnwrapNodesOptions,\n  type Value,\n  getAboveNode,\n  getPluginType,\n  isElement,\n  splitNodes,\n  unwrapNodes,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\n\nimport { ELEMENT_LINK } from '../createLinkPlugin';\n\n/** Unwrap link node. */\nexport const unwrapLink = <V extends Value>(\n  editor: PlateEditor<V>,\n  options?: {\n    split?: boolean;\n  } & UnwrapNodesOptions\n) => {\n  return withoutNormalizing(editor, () => {\n    if (options?.split) {\n      const linkAboveAnchor = getAboveNode(editor, {\n        at: editor.selection?.anchor,\n        match: { type: getPluginType(editor, ELEMENT_LINK) },\n      });\n\n      // anchor in link\n      if (linkAboveAnchor) {\n        splitNodes(editor, {\n          at: editor.selection?.anchor,\n          match: (n) =>\n            isElement(n) && n.type === getPluginType(editor, ELEMENT_LINK),\n        });\n        unwrapLink(editor, {\n          at: editor.selection?.anchor,\n        });\n\n        return true;\n      }\n\n      const linkAboveFocus = getAboveNode(editor, {\n        at: editor.selection?.focus,\n        match: { type: getPluginType(editor, ELEMENT_LINK) },\n      });\n\n      // focus in link\n      if (linkAboveFocus) {\n        splitNodes(editor, {\n          at: editor.selection?.focus,\n          match: (n) =>\n            isElement(n) && n.type === getPluginType(editor, ELEMENT_LINK),\n        });\n        unwrapLink(editor, {\n          at: editor.selection?.focus,\n        });\n\n        return true;\n      }\n    }\n\n    unwrapNodes(editor, {\n      match: { type: getPluginType(editor, ELEMENT_LINK) },\n      ...options,\n    });\n  });\n};\n","import {\n  type InsertNodesOptions,\n  type PlateEditor,\n  type UnwrapNodesOptions,\n  type Value,\n  type WrapNodesOptions,\n  findNode,\n  getAboveNode,\n  getEditorString,\n  getNodeLeaf,\n  getNodeProps,\n  getPluginType,\n  isDefined,\n  isExpanded,\n  removeNodes,\n  setNodes,\n} from '@udecode/plate-common/server';\n\nimport type { TLinkElement } from '../types';\n\nimport { ELEMENT_LINK } from '../createLinkPlugin';\nimport { type CreateLinkNodeOptions, validateUrl } from '../utils/index';\nimport { insertLink } from './insertLink';\nimport { unwrapLink } from './unwrapLink';\nimport { upsertLinkText } from './upsertLinkText';\nimport { wrapLink } from './wrapLink';\n\nexport type UpsertLinkOptions<V extends Value = Value> = {\n  insertNodesOptions?: InsertNodesOptions<V>;\n  /** If true, insert text when selection is in url. */\n  insertTextInLink?: boolean;\n  skipValidation?: boolean;\n  unwrapNodesOptions?: UnwrapNodesOptions<V>;\n  wrapNodesOptions?: WrapNodesOptions<V>;\n} & CreateLinkNodeOptions;\n\n/**\n * If selection in a link or is not url:\n *\n * - Insert text with url, exit If selection is expanded or `update` in a link:\n * - Remove link node, get link text Then:\n * - Insert link node\n */\nexport const upsertLink = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    insertNodesOptions,\n    insertTextInLink,\n    skipValidation = false,\n    target,\n    text,\n    url,\n  }: UpsertLinkOptions<V>\n) => {\n  const at = editor.selection;\n\n  if (!at) return;\n\n  const linkAbove = getAboveNode<TLinkElement>(editor, {\n    at,\n    match: { type: getPluginType(editor, ELEMENT_LINK) },\n  });\n\n  // anchor and focus in link -> insert text\n  if (insertTextInLink && linkAbove) {\n    // we don't want to insert marks in links\n    editor.insertText(url);\n\n    return true;\n  }\n  if (!skipValidation && !validateUrl(editor, url)) return;\n  if (isDefined(text) && text.length === 0) {\n    text = url;\n  }\n  // edit the link url and/or target\n  if (linkAbove) {\n    if (url !== linkAbove[0]?.url || target !== linkAbove[0]?.target) {\n      setNodes<TLinkElement>(\n        editor,\n        { target, url },\n        {\n          at: linkAbove[1],\n        }\n      );\n    }\n\n    upsertLinkText(editor, { target, text, url });\n\n    return true;\n  }\n\n  // selection contains at one edge edge or between the edges\n  const linkEntry = findNode<TLinkElement>(editor, {\n    at,\n    match: { type: getPluginType(editor, ELEMENT_LINK) },\n  });\n\n  const [linkNode, linkPath] = linkEntry ?? [];\n\n  let shouldReplaceText = false;\n\n  if (linkPath && text?.length) {\n    const linkText = getEditorString(editor, linkPath);\n\n    if (text !== linkText) {\n      shouldReplaceText = true;\n    }\n  }\n  if (isExpanded(at)) {\n    // anchor and focus in link\n    if (linkAbove) {\n      unwrapLink(editor, {\n        at: linkAbove[1],\n      });\n    } else {\n      unwrapLink(editor, {\n        split: true,\n      });\n    }\n\n    wrapLink(editor, {\n      target,\n      url,\n    });\n\n    upsertLinkText(editor, { target, text, url });\n\n    return true;\n  }\n  if (shouldReplaceText) {\n    removeNodes(editor, {\n      at: linkPath,\n    });\n  }\n\n  const props = getNodeProps(linkNode ?? ({} as any));\n\n  const path = editor.selection?.focus.path;\n\n  if (!path) return;\n\n  // link text should have the focused leaf marks\n  const leaf = getNodeLeaf(editor, path);\n\n  // if text is empty, text is url\n  if (!text?.length) {\n    text = url;\n  }\n\n  insertLink(\n    editor,\n    {\n      ...props,\n      children: [\n        {\n          ...leaf,\n          text,\n        },\n      ],\n      target,\n      url,\n    },\n    insertNodesOptions\n  );\n\n  return true;\n};\n","import {\n  type PlateEditor,\n  type TText,\n  type Value,\n  getAboveNode,\n  getEditorString,\n  getPluginType,\n  replaceNodeChildren,\n} from '@udecode/plate-common/server';\n\nimport type { TLinkElement } from '../types';\nimport type { UpsertLinkOptions } from './upsertLink';\n\nimport { ELEMENT_LINK } from '../createLinkPlugin';\n\n/**\n * If the text is different than the link above text, replace link children by a\n * new text. The new text has the same marks than the first text replaced.\n */\nexport const upsertLinkText = <V extends Value>(\n  editor: PlateEditor<V>,\n  { text }: UpsertLinkOptions<V>\n) => {\n  const newLink = getAboveNode<TLinkElement>(editor, {\n    match: { type: getPluginType(editor, ELEMENT_LINK) },\n  });\n\n  if (newLink) {\n    const [newLinkNode, newLinkPath] = newLink;\n\n    if (text?.length && text !== getEditorString(editor, newLinkPath)) {\n      const firstText = newLinkNode.children[0];\n\n      // remove link children\n      replaceNodeChildren<TText>(editor, {\n        at: newLinkPath,\n        insertOptions: {\n          select: true,\n        },\n        nodes: { ...firstText, text },\n      });\n    }\n  }\n};\n","import {\n  type PlateEditor,\n  type Value,\n  type WrapNodesOptions,\n  getPluginType,\n  wrapNodes,\n} from '@udecode/plate-common/server';\n\nimport type { TLinkElement } from '../types';\n\nimport { ELEMENT_LINK } from '../createLinkPlugin';\n\nexport interface WrapLinkOptions<V extends Value = Value>\n  extends WrapNodesOptions<V> {\n  url: string;\n  target?: string;\n}\n\n/** Wrap a link node with split. */\nexport const wrapLink = <V extends Value>(\n  editor: PlateEditor<V>,\n  { target, url, ...options }: WrapLinkOptions<V>\n) => {\n  wrapNodes<TLinkElement, Value>(\n    editor,\n    {\n      children: [],\n      target,\n      type: getPluginType(editor, ELEMENT_LINK),\n      url,\n    },\n    { split: true, ...options } as any\n  );\n};\n","import { focusEditor, useEditorRef, useHotkeys } from '@udecode/plate-common';\n\nimport {\n  floatingLinkActions,\n  floatingLinkSelectors,\n  useFloatingLinkSelectors,\n} from './floatingLinkStore';\n\nexport const useFloatingLinkEscape = () => {\n  const editor = useEditorRef();\n\n  const open = useFloatingLinkSelectors().isOpen(editor.id);\n\n  useHotkeys(\n    'escape',\n    (e) => {\n      if (!floatingLinkSelectors.mode()) return;\n\n      e.preventDefault();\n\n      if (\n        floatingLinkSelectors.mode() === 'edit' &&\n        floatingLinkSelectors.isEditing()\n      ) {\n        floatingLinkActions.show('edit', editor.id);\n        focusEditor(editor, editor.selection!);\n\n        return;\n      }\n      if (floatingLinkSelectors.mode() === 'insert') {\n        focusEditor(editor, editor.selection!);\n      }\n\n      floatingLinkActions.hide();\n    },\n    {\n      enableOnContentEditable: true,\n      enableOnFormTags: ['INPUT'],\n      enabled: open,\n    },\n    []\n  );\n};\n","import {\n  type UseVirtualFloatingOptions,\n  useVirtualFloating,\n} from '@udecode/plate-floating';\n\nimport { floatingLinkActions } from './floatingLinkStore';\n\nexport const useVirtualFloatingLink = ({\n  editorId,\n  ...floatingOptions\n}: { editorId: string } & UseVirtualFloatingOptions) => {\n  return useVirtualFloating({\n    onOpenChange: (open) =>\n      floatingLinkActions.openEditorId(open ? editorId : null),\n    ...floatingOptions,\n  });\n};\n","import React from 'react';\n\nimport {\n  focusEditor,\n  useComposedRef,\n  useEditorReadOnly,\n  useEditorRef,\n  useHotkeys,\n  useOnClickOutside,\n} from '@udecode/plate-common';\nimport { getPluginOptions } from '@udecode/plate-common/server';\nimport {\n  type UseVirtualFloatingOptions,\n  getSelectionBoundingClientRect,\n} from '@udecode/plate-floating';\nimport { useFocused } from 'slate-react';\n\nimport { ELEMENT_LINK, type LinkPlugin } from '../../createLinkPlugin';\nimport { triggerFloatingLinkInsert } from '../../utils/triggerFloatingLinkInsert';\nimport {\n  floatingLinkActions,\n  floatingLinkSelectors,\n  useFloatingLinkSelectors,\n} from './floatingLinkStore';\nimport { useFloatingLinkEscape } from './useFloatingLinkEscape';\nimport { useVirtualFloatingLink } from './useVirtualFloatingLink';\n\nexport type LinkFloatingToolbarState = {\n  floatingOptions?: UseVirtualFloatingOptions;\n};\n\nexport const useFloatingLinkInsertState = ({\n  floatingOptions,\n}: LinkFloatingToolbarState = {}) => {\n  const editor = useEditorRef();\n  const { triggerFloatingLinkHotkeys } = getPluginOptions<LinkPlugin>(\n    editor,\n    ELEMENT_LINK\n  );\n  const readOnly = useEditorReadOnly();\n  const focused = useFocused();\n  const mode = useFloatingLinkSelectors().mode();\n  const isOpen = useFloatingLinkSelectors().isOpen(editor.id);\n\n  const floating = useVirtualFloatingLink({\n    editorId: editor.id,\n    getBoundingClientRect: getSelectionBoundingClientRect,\n    open: isOpen && mode === 'insert',\n    whileElementsMounted: () => {},\n    ...floatingOptions,\n  });\n\n  return {\n    editor,\n    floating,\n    focused,\n    isOpen,\n    readOnly,\n    triggerFloatingLinkHotkeys,\n  };\n};\n\nexport const useFloatingLinkInsert = ({\n  editor,\n  floating,\n  focused,\n  isOpen,\n  readOnly,\n  triggerFloatingLinkHotkeys,\n}: ReturnType<typeof useFloatingLinkInsertState>) => {\n  const onChange: React.ChangeEventHandler<HTMLInputElement> =\n    React.useCallback((e) => {\n      floatingLinkActions.text(e.target.value);\n    }, []);\n\n  const ref = useOnClickOutside(\n    () => {\n      if (floatingLinkSelectors.mode() === 'insert') {\n        floatingLinkActions.hide();\n        focusEditor(editor, editor.selection!);\n      }\n    },\n    {\n      disabled: !isOpen,\n    }\n  );\n\n  // wait for update before focusing input\n  React.useEffect(() => {\n    if (isOpen) {\n      floating.update();\n      floatingLinkActions.updated(true);\n    } else {\n      floatingLinkActions.updated(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, floating.update]);\n\n  useHotkeys(\n    triggerFloatingLinkHotkeys!,\n    (e) => {\n      if (triggerFloatingLinkInsert(editor, { focused })) {\n        e.preventDefault();\n      }\n    },\n    {\n      enableOnContentEditable: true,\n    },\n    [focused]\n  );\n\n  useFloatingLinkEscape();\n\n  const updated = floatingLinkSelectors.updated();\n  const updatedValue = React.useCallback(\n    (el: HTMLInputElement) => {\n      if (el && updated) {\n        el.value = floatingLinkSelectors.text();\n      }\n    },\n    [updated]\n  );\n\n  return {\n    hidden: readOnly,\n    props: {\n      style: {\n        ...floating.style,\n        zIndex: 50,\n      },\n    },\n    ref: useComposedRef<HTMLDivElement>(floating.refs.setFloating, ref),\n    textInputProps: {\n      defaultValue: floatingLinkSelectors.text(),\n      onChange,\n      ref: updatedValue,\n    },\n  };\n};\n","import {\n  type PlateEditor,\n  type Value,\n  getEditorString,\n  getPluginType,\n  isRangeAcrossBlocks,\n  someNode,\n} from '@udecode/plate-common/server';\n\nimport {\n  floatingLinkActions,\n  floatingLinkSelectors,\n} from '../components/FloatingLink/floatingLinkStore';\nimport { ELEMENT_LINK } from '../createLinkPlugin';\n\n/**\n * Trigger floating link.\n *\n * Do not trigger when:\n *\n * - Selection is across blocks\n * - Selection has more than one leaf node\n * - Lowest selection is not text\n * - Selection has a link node\n */\nexport const triggerFloatingLinkInsert = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    focused,\n  }: {\n    focused?: boolean;\n  } = {}\n) => {\n  if (floatingLinkSelectors.mode()) return;\n  if (!focused) return;\n  if (isRangeAcrossBlocks(editor, { at: editor.selection })) return;\n\n  const hasLink = someNode(editor, {\n    match: { type: getPluginType(editor, ELEMENT_LINK) },\n  });\n\n  if (hasLink) return;\n\n  floatingLinkActions.text(getEditorString(editor, editor.selection));\n  floatingLinkActions.show('insert', editor.id);\n\n  return true;\n};\n","import type { PlateEditor, Value } from '@udecode/plate-common/server';\n\nimport { floatingLinkSelectors } from '../components/index';\nimport { triggerFloatingLinkEdit } from './triggerFloatingLinkEdit';\nimport { triggerFloatingLinkInsert } from './triggerFloatingLinkInsert';\n\nexport const triggerFloatingLink = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    focused,\n  }: {\n    focused?: boolean;\n  } = {}\n) => {\n  if (floatingLinkSelectors.mode() === 'edit') {\n    triggerFloatingLinkEdit(editor);\n\n    return;\n  }\n\n  triggerFloatingLinkInsert(editor, {\n    focused,\n  });\n};\n","import {\n  type PlateEditor,\n  type Value,\n  getPluginOptions,\n  sanitizeUrl,\n} from '@udecode/plate-common/server';\n\nimport { ELEMENT_LINK, type LinkPlugin } from '../createLinkPlugin';\n\nexport const validateUrl = <V extends Value>(\n  editor: PlateEditor<V>,\n  url: string\n): boolean => {\n  const { allowedSchemes, dangerouslySkipSanitization, isUrl } =\n    getPluginOptions<LinkPlugin, V>(editor, ELEMENT_LINK);\n\n  if (isUrl && !isUrl(url)) return false;\n  if (\n    !dangerouslySkipSanitization &&\n    !sanitizeUrl(url, {\n      allowedSchemes,\n      permitInvalid: true,\n    })\n  )\n    return false;\n\n  return true;\n};\n","import {\n  type PlateEditor,\n  type Value,\n  type WithPlatePlugin,\n  collapseSelection,\n  getAboveNode,\n  getEditorString,\n  getNextNodeStartPoint,\n  getPluginType,\n  getPreviousNodeEndPoint,\n  getRangeBefore,\n  getRangeFromBlockStart,\n  insertNodes,\n  isCollapsed,\n  isEndPoint,\n  isStartPoint,\n  mockPlugin,\n  select,\n  someNode,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\nimport { withRemoveEmptyNodes } from '@udecode/plate-normalizers';\nimport { Path, type Point, type Range } from 'slate';\n\nimport { ELEMENT_LINK, type LinkPlugin } from './createLinkPlugin';\nimport { upsertLink } from './transforms/index';\n\n/**\n * Insert space after a url to wrap a link. Lookup from the block start to the\n * cursor to check if there is an url. If not found, lookup before the cursor\n * for a space character to check the url.\n *\n * On insert data: Paste a string inside a link element will edit its children\n * text but not its url.\n */\n\nexport const withLink = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  {\n    options: { getUrlHref, isUrl, keepSelectedTextOnPaste, rangeBeforeOptions },\n    type,\n  }: WithPlatePlugin<LinkPlugin, V, E>\n) => {\n  const { apply, insertBreak, insertData, insertText, normalizeNode } = editor;\n\n  const wrapLink = () => {\n    withoutNormalizing(editor, () => {\n      const selection = editor.selection!;\n\n      // get the range from first space before the cursor\n      let beforeWordRange = getRangeBefore(\n        editor,\n        selection,\n        rangeBeforeOptions\n      );\n\n      // if no space found before, get the range from block start\n      if (!beforeWordRange) {\n        beforeWordRange = getRangeFromBlockStart(editor);\n      }\n      // if no word found before the cursor, exit\n      if (!beforeWordRange) return;\n\n      const hasLink = someNode(editor, {\n        at: beforeWordRange,\n        match: { type: getPluginType(editor, ELEMENT_LINK) },\n      });\n\n      // if word before the cursor has a link, exit\n      if (hasLink) return;\n\n      let beforeWordText = getEditorString(editor, beforeWordRange);\n      beforeWordText = getUrlHref?.(beforeWordText) ?? beforeWordText;\n\n      // if word before is not an url, exit\n      if (!isUrl!(beforeWordText)) return;\n\n      // select the word to wrap link\n      select(editor, beforeWordRange);\n\n      // wrap link\n      upsertLink(editor, {\n        url: beforeWordText,\n      });\n\n      // collapse selection\n      collapseSelection(editor, { edge: 'end' });\n    });\n  };\n\n  editor.insertBreak = () => {\n    if (!isCollapsed(editor.selection)) return insertBreak();\n\n    wrapLink();\n    insertBreak();\n  };\n\n  editor.insertText = (text) => {\n    if (text === ' ' && isCollapsed(editor.selection)) {\n      wrapLink();\n    }\n\n    insertText(text);\n  };\n\n  editor.insertData = (data: DataTransfer) => {\n    const text = data.getData('text/plain');\n    const textHref = getUrlHref?.(text);\n\n    if (text) {\n      const value = textHref || text;\n      const inserted = upsertLink(editor, {\n        insertTextInLink: true,\n        text: keepSelectedTextOnPaste ? undefined : value,\n        url: value,\n      });\n\n      if (inserted) return;\n    }\n\n    insertData(data);\n  };\n\n  // TODO: plugin\n  editor.apply = (operation) => {\n    if (operation.type === 'set_selection') {\n      const range = operation.newProperties as Range | null;\n\n      if (range?.focus && range.anchor && isCollapsed(range)) {\n        const entry = getAboveNode(editor, {\n          at: range,\n          match: { type: getPluginType(editor, ELEMENT_LINK) },\n        });\n\n        if (entry) {\n          const [, path] = entry;\n\n          let newPoint: Point | undefined;\n\n          if (isStartPoint(editor, range.focus, path)) {\n            newPoint = getPreviousNodeEndPoint(editor, path);\n          }\n          if (isEndPoint(editor, range.focus, path)) {\n            newPoint = getNextNodeStartPoint(editor, path);\n          }\n          if (newPoint) {\n            operation.newProperties = {\n              anchor: newPoint,\n              focus: newPoint,\n            };\n          }\n        }\n      }\n    }\n\n    apply(operation);\n  };\n\n  // TODO: plugin\n  editor.normalizeNode = ([node, path]) => {\n    if (node.type === getPluginType(editor, ELEMENT_LINK)) {\n      const range = editor.selection as Range | null;\n\n      if (\n        range &&\n        isCollapsed(range) &&\n        isEndPoint(editor, range.focus, path)\n      ) {\n        const nextPoint = getNextNodeStartPoint(editor, path);\n\n        // select next text node if any\n        if (nextPoint) {\n          select(editor, nextPoint);\n        } else {\n          // insert text node then select\n          const nextPath = Path.next(path);\n          insertNodes(editor, { text: '' } as any, { at: nextPath });\n          select(editor, nextPath);\n        }\n      }\n    }\n\n    normalizeNode([node, path]);\n  };\n\n  editor = withRemoveEmptyNodes<V, E>(\n    editor,\n    mockPlugin<{}, V, E>({\n      options: { types: type },\n    })\n  );\n\n  return editor;\n};\n"],"mappings":"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","names":["import_server","import_server","import_plate_common","import_server","import_plate_common","import_server","React","import_react","import_plate_common","React","import_react","import_plate_common","import_server","React","import_react","import_plate_common","import_server","import_plate_floating","import_server","import_plate_common","import_plate_common","import_server","import_server","import_server","import_server","import_server","import_server","import_plate_common","React","import_react","import_plate_common","import_server","import_plate_floating","import_server","React","import_server","isUrl","import_server","isUrl","wrapLink"]}