import * as _udecode_plate_common_server from '@udecode/plate-common/server';
import { RangeBeforeOptions, Value, PlateEditor, WithPlatePlugin, TText, InsertNodesOptions, UnwrapNodesOptions, WrapNodesOptions } from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';
import * as _udecode_plate_common from '@udecode/plate-common';
import { TElement } from '@udecode/plate-common';
import * as React$1 from 'react';
import React__default from 'react';
import * as zustand_x from 'zustand-x';
import * as csstype from 'csstype';
import * as _udecode_plate_floating from '@udecode/plate-floating';
import { UseVirtualFloatingOptions } from '@udecode/plate-floating';

declare const ELEMENT_LINK = "a";
interface LinkPlugin {
    /**
     * List of allowed URL schemes.
     *
     * @default ['http', 'https', 'mailto', 'tel']
     */
    allowedSchemes?: string[];
    /**
     * Skips sanitation of links.
     *
     * @default false
     */
    dangerouslySkipSanitization?: boolean;
    /**
     * Default HTML attributes for link elements.
     *
     * @default { }
     */
    defaultLinkAttributes?: React.AnchorHTMLAttributes<HTMLAnchorElement>;
    forceSubmit?: boolean;
    /**
     * On keyboard shortcut or toolbar mousedown, get the link url by calling this
     * promise. The default behavior is to use the browser's native `prompt`.
     */
    getLinkUrl?: (prevUrl: null | string) => Promise<null | string>;
    /**
     * Callback to optionally get the href for a url
     *
     * @returns Href: an optional link to be used that is different from the text
     *   content (example https://google.com for google.com)
     */
    getUrlHref?: (url: string) => string | undefined;
    /**
     * Callback to validate an url.
     *
     * @default isUrl
     */
    isUrl?: (text: string) => boolean;
    /**
     * Keeps selected text on pasting links by default.
     *
     * @default true
     */
    keepSelectedTextOnPaste?: boolean;
    /**
     * Allow custom config for rangeBeforeOptions.
     *
     * @example
     *   default
     *   {
     *   matchString: ' ',
     *   skipInvalid: true,
     *   afterMatch: true,
     *   }
     */
    rangeBeforeOptions?: RangeBeforeOptions;
    /**
     * Transform the content of the URL input before validating it. Useful for
     * adding a protocol to a URL. E.g. `google.com` -> `https://google.com`
     *
     * Similar to `getUrlHref` but is used on URL inputs. Whereas that is used on
     * any entered text.
     *
     * @returns The transformed URL.
     */
    transformInput?: (url: string) => string | undefined;
    /**
     * Hotkeys to trigger floating link.
     *
     * @default 'meta+k, ctrl+k'
     */
    triggerFloatingLinkHotkeys?: string | string[];
}
/** Enables support for hyperlinks. */
declare const createLinkPlugin: <OP = LinkPlugin, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

interface TLinkElement extends TElement {
    url: string;
    target?: string;
}

/**
 * Insert space after a url to wrap a link. Lookup from the block start to the
 * cursor to check if there is an url. If not found, lookup before the cursor
 * for a space character to check the url.
 *
 * On insert data: Paste a string inside a link element will edit its children
 * text but not its url.
 */
declare const withLink: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, { options: { getUrlHref, isUrl, keepSelectedTextOnPaste, rangeBeforeOptions }, type, }: WithPlatePlugin<LinkPlugin, V, E>) => E;

declare const useLink: ({ element }: {
    element: TLinkElement;
}) => {
    props: {
        onMouseOver: (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
        download?: any;
        href?: string | undefined;
        hrefLang?: string | undefined;
        media?: string | undefined;
        ping?: string | undefined;
        target?: React$1.HTMLAttributeAnchorTarget | undefined;
        type?: string | undefined;
        referrerPolicy?: React$1.HTMLAttributeReferrerPolicy | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: (boolean | "true" | "false") | "inherit" | "plaintext-only" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: React$1.CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: React$1.AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "url" | "text" | "none" | "search" | "tel" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        "aria-activedescendant"?: string | undefined;
        "aria-atomic"?: (boolean | "true" | "false") | undefined;
        "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
        "aria-braillelabel"?: string | undefined;
        "aria-brailleroledescription"?: string | undefined;
        "aria-busy"?: (boolean | "true" | "false") | undefined;
        "aria-checked"?: boolean | "true" | "false" | "mixed" | undefined;
        "aria-colcount"?: number | undefined;
        "aria-colindex"?: number | undefined;
        "aria-colindextext"?: string | undefined;
        "aria-colspan"?: number | undefined;
        "aria-controls"?: string | undefined;
        "aria-current"?: boolean | "true" | "false" | "page" | "step" | "location" | "date" | "time" | undefined;
        "aria-describedby"?: string | undefined;
        "aria-description"?: string | undefined;
        "aria-details"?: string | undefined;
        "aria-disabled"?: (boolean | "true" | "false") | undefined;
        "aria-dropeffect"?: "move" | "link" | "none" | "copy" | "execute" | "popup" | undefined;
        "aria-errormessage"?: string | undefined;
        "aria-expanded"?: (boolean | "true" | "false") | undefined;
        "aria-flowto"?: string | undefined;
        "aria-grabbed"?: (boolean | "true" | "false") | undefined;
        "aria-haspopup"?: boolean | "true" | "false" | "dialog" | "grid" | "listbox" | "menu" | "tree" | undefined;
        "aria-hidden"?: (boolean | "true" | "false") | undefined;
        "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        "aria-keyshortcuts"?: string | undefined;
        "aria-label"?: string | undefined;
        "aria-labelledby"?: string | undefined;
        "aria-level"?: number | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined;
        "aria-modal"?: (boolean | "true" | "false") | undefined;
        "aria-multiline"?: (boolean | "true" | "false") | undefined;
        "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined;
        "aria-owns"?: string | undefined;
        "aria-placeholder"?: string | undefined;
        "aria-posinset"?: number | undefined;
        "aria-pressed"?: boolean | "true" | "false" | "mixed" | undefined;
        "aria-readonly"?: (boolean | "true" | "false") | undefined;
        "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        "aria-required"?: (boolean | "true" | "false") | undefined;
        "aria-roledescription"?: string | undefined;
        "aria-rowcount"?: number | undefined;
        "aria-rowindex"?: number | undefined;
        "aria-rowindextext"?: string | undefined;
        "aria-rowspan"?: number | undefined;
        "aria-selected"?: (boolean | "true" | "false") | undefined;
        "aria-setsize"?: number | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
        "aria-valuemax"?: number | undefined;
        "aria-valuemin"?: number | undefined;
        "aria-valuenow"?: number | undefined;
        "aria-valuetext"?: string | undefined;
        children?: React$1.ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: React$1.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCopyCapture?: React$1.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCut?: React$1.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCutCapture?: React$1.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onPaste?: React$1.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onPasteCapture?: React$1.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCompositionEnd?: React$1.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionEndCapture?: React$1.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionStart?: React$1.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionStartCapture?: React$1.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionUpdate?: React$1.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionUpdateCapture?: React$1.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onFocus?: React$1.FocusEventHandler<HTMLAnchorElement> | undefined;
        onFocusCapture?: React$1.FocusEventHandler<HTMLAnchorElement> | undefined;
        onBlur?: React$1.FocusEventHandler<HTMLAnchorElement> | undefined;
        onBlurCapture?: React$1.FocusEventHandler<HTMLAnchorElement> | undefined;
        onChange?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
        onChangeCapture?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
        onBeforeInput?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
        onBeforeInputCapture?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
        onInput?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
        onInputCapture?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
        onReset?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
        onResetCapture?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
        onSubmit?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
        onSubmitCapture?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
        onInvalid?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
        onInvalidCapture?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
        onLoad?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onError?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onErrorCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onKeyDown?: React$1.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyDownCapture?: React$1.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyPress?: React$1.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyPressCapture?: React$1.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyUp?: React$1.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyUpCapture?: React$1.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onAbort?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onAbortCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlay?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlayCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlayThrough?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlayThroughCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onDurationChange?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onDurationChangeCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEmptied?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEmptiedCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEncrypted?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEncryptedCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEnded?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEndedCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedData?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedDataCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedMetadata?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedMetadataCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadStart?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadStartCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPause?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPauseCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlay?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlayCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlaying?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlayingCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onProgress?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onProgressCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onRateChange?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onRateChangeCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onResize?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onResizeCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeeked?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeekedCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeeking?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeekingCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onStalled?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onStalledCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSuspend?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSuspendCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onTimeUpdate?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onTimeUpdateCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onVolumeChange?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onVolumeChangeCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onWaiting?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onWaitingCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onAuxClick?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onAuxClickCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onClick?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onClickCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onContextMenu?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onContextMenuCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onDoubleClick?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onDoubleClickCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onDrag?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEnd?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEndCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEnter?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEnterCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragExit?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragExitCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragLeave?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragLeaveCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragOver?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragOverCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragStart?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragStartCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDrop?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onDropCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
        onMouseDown?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseDownCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseEnter?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseLeave?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseMove?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseMoveCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseOut?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseOutCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseOverCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseUp?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseUpCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
        onSelect?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSelectCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
        onTouchCancel?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchCancelCapture?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchEnd?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchEndCapture?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchMove?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchMoveCapture?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchStart?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchStartCapture?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
        onPointerDown?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerDownCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerMove?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerMoveCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerUp?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerUpCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerCancel?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerCancelCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerEnter?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerLeave?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOver?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOverCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOut?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOutCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onGotPointerCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onGotPointerCaptureCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onLostPointerCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onLostPointerCaptureCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
        onScroll?: React$1.UIEventHandler<HTMLAnchorElement> | undefined;
        onScrollCapture?: React$1.UIEventHandler<HTMLAnchorElement> | undefined;
        onWheel?: React$1.WheelEventHandler<HTMLAnchorElement> | undefined;
        onWheelCapture?: React$1.WheelEventHandler<HTMLAnchorElement> | undefined;
        onAnimationStart?: React$1.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationStartCapture?: React$1.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationEnd?: React$1.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationEndCapture?: React$1.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationIteration?: React$1.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationIterationCapture?: React$1.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onTransitionEnd?: React$1.TransitionEventHandler<HTMLAnchorElement> | undefined;
        onTransitionEndCapture?: React$1.TransitionEventHandler<HTMLAnchorElement> | undefined;
    };
};

declare const useLinkToolbarButtonState: () => {
    pressed: boolean;
};
declare const useLinkToolbarButton: (state: ReturnType<typeof useLinkToolbarButtonState>) => {
    props: {
        onClick: () => void;
        onMouseDown: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;
        pressed: boolean;
    };
};

declare const useFloatingLinkNewTabInputState: () => {
    checked: boolean;
    ref: React__default.RefObject<HTMLInputElement>;
    setChecked: React__default.Dispatch<React__default.SetStateAction<boolean>>;
};
declare const useFloatingLinkNewTabInput: ({ checked, ref, setChecked, }: ReturnType<typeof useFloatingLinkNewTabInputState>) => {
    props: {
        checked: boolean;
        onChange: React__default.ChangeEventHandler<HTMLInputElement>;
        type: string;
    };
    ref: React__default.RefObject<HTMLInputElement>;
};
declare const FloatingLinkNewTabInput: React__default.ForwardRefExoticComponent<{
    as?: React__default.ElementType<any, keyof React__default.JSX.IntrinsicElements> | undefined;
    asChild?: boolean | undefined;
    className?: string | undefined;
    options?: undefined;
    setProps?: ((hookProps: {
        checked: boolean;
        onChange: React__default.ChangeEventHandler<HTMLInputElement>;
        type: string;
    }) => Omit<React__default.DetailedHTMLProps<React__default.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref">) | undefined;
    state?: {
        checked: boolean;
        ref: React__default.RefObject<HTMLInputElement>;
        setChecked: React__default.Dispatch<React__default.SetStateAction<boolean>>;
    } | undefined;
    style?: React__default.CSSProperties | undefined;
} & Omit<React__default.DetailedHTMLProps<React__default.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & React__default.RefAttributes<any>>;

declare const useFloatingLinkUrlInputState: () => {
    ref: React__default.RefObject<HTMLInputElement>;
};
declare const useFloatingLinkUrlInput: (state: ReturnType<typeof useFloatingLinkUrlInputState>) => {
    props: {
        defaultValue: string;
        onChange: React__default.ChangeEventHandler<HTMLInputElement>;
    };
    ref: React__default.RefObject<HTMLInputElement>;
};
declare const FloatingLinkUrlInput: React__default.ForwardRefExoticComponent<{
    as?: React__default.ElementType<any, keyof React__default.JSX.IntrinsicElements> | undefined;
    asChild?: boolean | undefined;
    className?: string | undefined;
    options?: undefined;
    setProps?: ((hookProps: {
        defaultValue: string;
        onChange: React__default.ChangeEventHandler<HTMLInputElement>;
    }) => Omit<React__default.DetailedHTMLProps<React__default.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref">) | undefined;
    state?: {
        ref: React__default.RefObject<HTMLInputElement>;
    } | undefined;
    style?: React__default.CSSProperties | undefined;
} & Omit<React__default.DetailedHTMLProps<React__default.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>, "ref"> & React__default.RefAttributes<any>>;

declare const useLinkOpenButtonState: () => {
    element?: undefined;
} | {
    element: TLinkElement;
};
declare const useLinkOpenButton: ({ element }: {
    element?: TLinkElement | undefined;
}) => {
    props: {};
} | {
    props: {
        'aria-label': string;
        onMouseOver: (e: React__default.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
        target: string;
        download?: any;
        href?: string | undefined;
        hrefLang?: string | undefined;
        media?: string | undefined;
        ping?: string | undefined;
        type?: string | undefined;
        referrerPolicy?: React__default.HTMLAttributeReferrerPolicy | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: (boolean | "true" | "false") | "inherit" | "plaintext-only" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: React__default.CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: React__default.AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "url" | "text" | "none" | "search" | "tel" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        "aria-activedescendant"?: string | undefined;
        "aria-atomic"?: (boolean | "true" | "false") | undefined;
        "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
        "aria-braillelabel"?: string | undefined;
        "aria-brailleroledescription"?: string | undefined;
        "aria-busy"?: (boolean | "true" | "false") | undefined;
        "aria-checked"?: boolean | "true" | "false" | "mixed" | undefined;
        "aria-colcount"?: number | undefined;
        "aria-colindex"?: number | undefined;
        "aria-colindextext"?: string | undefined;
        "aria-colspan"?: number | undefined;
        "aria-controls"?: string | undefined;
        "aria-current"?: boolean | "true" | "false" | "page" | "step" | "location" | "date" | "time" | undefined;
        "aria-describedby"?: string | undefined;
        "aria-description"?: string | undefined;
        "aria-details"?: string | undefined;
        "aria-disabled"?: (boolean | "true" | "false") | undefined;
        "aria-dropeffect"?: "move" | "link" | "none" | "copy" | "execute" | "popup" | undefined;
        "aria-errormessage"?: string | undefined;
        "aria-expanded"?: (boolean | "true" | "false") | undefined;
        "aria-flowto"?: string | undefined;
        "aria-grabbed"?: (boolean | "true" | "false") | undefined;
        "aria-haspopup"?: boolean | "true" | "false" | "dialog" | "grid" | "listbox" | "menu" | "tree" | undefined;
        "aria-hidden"?: (boolean | "true" | "false") | undefined;
        "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        "aria-keyshortcuts"?: string | undefined;
        "aria-labelledby"?: string | undefined;
        "aria-level"?: number | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined;
        "aria-modal"?: (boolean | "true" | "false") | undefined;
        "aria-multiline"?: (boolean | "true" | "false") | undefined;
        "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined;
        "aria-owns"?: string | undefined;
        "aria-placeholder"?: string | undefined;
        "aria-posinset"?: number | undefined;
        "aria-pressed"?: boolean | "true" | "false" | "mixed" | undefined;
        "aria-readonly"?: (boolean | "true" | "false") | undefined;
        "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        "aria-required"?: (boolean | "true" | "false") | undefined;
        "aria-roledescription"?: string | undefined;
        "aria-rowcount"?: number | undefined;
        "aria-rowindex"?: number | undefined;
        "aria-rowindextext"?: string | undefined;
        "aria-rowspan"?: number | undefined;
        "aria-selected"?: (boolean | "true" | "false") | undefined;
        "aria-setsize"?: number | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
        "aria-valuemax"?: number | undefined;
        "aria-valuemin"?: number | undefined;
        "aria-valuenow"?: number | undefined;
        "aria-valuetext"?: string | undefined;
        children?: React__default.ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: React__default.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCopyCapture?: React__default.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCut?: React__default.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCutCapture?: React__default.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onPaste?: React__default.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onPasteCapture?: React__default.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCompositionEnd?: React__default.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionEndCapture?: React__default.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionStart?: React__default.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionStartCapture?: React__default.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionUpdate?: React__default.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionUpdateCapture?: React__default.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onFocus?: React__default.FocusEventHandler<HTMLAnchorElement> | undefined;
        onFocusCapture?: React__default.FocusEventHandler<HTMLAnchorElement> | undefined;
        onBlur?: React__default.FocusEventHandler<HTMLAnchorElement> | undefined;
        onBlurCapture?: React__default.FocusEventHandler<HTMLAnchorElement> | undefined;
        onChange?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onChangeCapture?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onBeforeInput?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onBeforeInputCapture?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onInput?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onInputCapture?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onReset?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onResetCapture?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onSubmit?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onSubmitCapture?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onInvalid?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onInvalidCapture?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onLoad?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onError?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onErrorCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onKeyDown?: React__default.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyDownCapture?: React__default.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyPress?: React__default.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyPressCapture?: React__default.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyUp?: React__default.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyUpCapture?: React__default.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onAbort?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onAbortCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlay?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlayCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlayThrough?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlayThroughCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onDurationChange?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onDurationChangeCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEmptied?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEmptiedCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEncrypted?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEncryptedCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEnded?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEndedCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedData?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedDataCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedMetadata?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedMetadataCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadStart?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadStartCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPause?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPauseCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlay?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlayCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlaying?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlayingCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onProgress?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onProgressCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onRateChange?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onRateChangeCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onResize?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onResizeCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeeked?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeekedCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeeking?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeekingCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onStalled?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onStalledCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSuspend?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSuspendCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onTimeUpdate?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onTimeUpdateCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onVolumeChange?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onVolumeChangeCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onWaiting?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onWaitingCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onAuxClick?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onAuxClickCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onClick?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onClickCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onContextMenu?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onContextMenuCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onDoubleClick?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onDoubleClickCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onDrag?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEnd?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEndCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEnter?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEnterCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragExit?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragExitCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragLeave?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragLeaveCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragOver?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragOverCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragStart?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragStartCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDrop?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDropCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onMouseDown?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseDownCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseEnter?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseLeave?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseMove?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseMoveCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseOut?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseOutCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseOverCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseUp?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseUpCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onSelect?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSelectCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onTouchCancel?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchCancelCapture?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchEnd?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchEndCapture?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchMove?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchMoveCapture?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchStart?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchStartCapture?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onPointerDown?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerDownCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerMove?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerMoveCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerUp?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerUpCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerCancel?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerCancelCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerEnter?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerLeave?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOver?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOverCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOut?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOutCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onGotPointerCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onGotPointerCaptureCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onLostPointerCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onLostPointerCaptureCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onScroll?: React__default.UIEventHandler<HTMLAnchorElement> | undefined;
        onScrollCapture?: React__default.UIEventHandler<HTMLAnchorElement> | undefined;
        onWheel?: React__default.WheelEventHandler<HTMLAnchorElement> | undefined;
        onWheelCapture?: React__default.WheelEventHandler<HTMLAnchorElement> | undefined;
        onAnimationStart?: React__default.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationStartCapture?: React__default.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationEnd?: React__default.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationEndCapture?: React__default.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationIteration?: React__default.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationIterationCapture?: React__default.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onTransitionEnd?: React__default.TransitionEventHandler<HTMLAnchorElement> | undefined;
        onTransitionEndCapture?: React__default.TransitionEventHandler<HTMLAnchorElement> | undefined;
    };
};
declare const LinkOpenButton: React__default.ForwardRefExoticComponent<{
    as?: React__default.ElementType<any, keyof React__default.JSX.IntrinsicElements> | undefined;
    asChild?: boolean | undefined;
    className?: string | undefined;
    options?: undefined;
    setProps?: ((hookProps: NonNullable<{} | {
        'aria-label': string;
        onMouseOver: (e: React__default.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;
        target: string;
        download?: any;
        href?: string | undefined;
        hrefLang?: string | undefined;
        media?: string | undefined;
        ping?: string | undefined;
        type?: string | undefined;
        referrerPolicy?: React__default.HTMLAttributeReferrerPolicy | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: (boolean | "true" | "false") | "inherit" | "plaintext-only" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        slot?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        style?: React__default.CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: React__default.AriaRole | undefined;
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "url" | "text" | "none" | "search" | "tel" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        "aria-activedescendant"?: string | undefined;
        "aria-atomic"?: (boolean | "true" | "false") | undefined;
        "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
        "aria-braillelabel"?: string | undefined;
        "aria-brailleroledescription"?: string | undefined;
        "aria-busy"?: (boolean | "true" | "false") | undefined;
        "aria-checked"?: boolean | "true" | "false" | "mixed" | undefined;
        "aria-colcount"?: number | undefined;
        "aria-colindex"?: number | undefined;
        "aria-colindextext"?: string | undefined;
        "aria-colspan"?: number | undefined;
        "aria-controls"?: string | undefined;
        "aria-current"?: boolean | "true" | "false" | "page" | "step" | "location" | "date" | "time" | undefined;
        "aria-describedby"?: string | undefined;
        "aria-description"?: string | undefined;
        "aria-details"?: string | undefined;
        "aria-disabled"?: (boolean | "true" | "false") | undefined;
        "aria-dropeffect"?: "move" | "link" | "none" | "copy" | "execute" | "popup" | undefined;
        "aria-errormessage"?: string | undefined;
        "aria-expanded"?: (boolean | "true" | "false") | undefined;
        "aria-flowto"?: string | undefined;
        "aria-grabbed"?: (boolean | "true" | "false") | undefined;
        "aria-haspopup"?: boolean | "true" | "false" | "dialog" | "grid" | "listbox" | "menu" | "tree" | undefined;
        "aria-hidden"?: (boolean | "true" | "false") | undefined;
        "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        "aria-keyshortcuts"?: string | undefined;
        "aria-labelledby"?: string | undefined;
        "aria-level"?: number | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined;
        "aria-modal"?: (boolean | "true" | "false") | undefined;
        "aria-multiline"?: (boolean | "true" | "false") | undefined;
        "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined;
        "aria-owns"?: string | undefined;
        "aria-placeholder"?: string | undefined;
        "aria-posinset"?: number | undefined;
        "aria-pressed"?: boolean | "true" | "false" | "mixed" | undefined;
        "aria-readonly"?: (boolean | "true" | "false") | undefined;
        "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        "aria-required"?: (boolean | "true" | "false") | undefined;
        "aria-roledescription"?: string | undefined;
        "aria-rowcount"?: number | undefined;
        "aria-rowindex"?: number | undefined;
        "aria-rowindextext"?: string | undefined;
        "aria-rowspan"?: number | undefined;
        "aria-selected"?: (boolean | "true" | "false") | undefined;
        "aria-setsize"?: number | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
        "aria-valuemax"?: number | undefined;
        "aria-valuemin"?: number | undefined;
        "aria-valuenow"?: number | undefined;
        "aria-valuetext"?: string | undefined;
        children?: React__default.ReactNode;
        dangerouslySetInnerHTML?: {
            __html: string | TrustedHTML;
        } | undefined;
        onCopy?: React__default.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCopyCapture?: React__default.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCut?: React__default.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCutCapture?: React__default.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onPaste?: React__default.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onPasteCapture?: React__default.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCompositionEnd?: React__default.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionEndCapture?: React__default.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionStart?: React__default.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionStartCapture?: React__default.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionUpdate?: React__default.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionUpdateCapture?: React__default.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onFocus?: React__default.FocusEventHandler<HTMLAnchorElement> | undefined;
        onFocusCapture?: React__default.FocusEventHandler<HTMLAnchorElement> | undefined;
        onBlur?: React__default.FocusEventHandler<HTMLAnchorElement> | undefined;
        onBlurCapture?: React__default.FocusEventHandler<HTMLAnchorElement> | undefined;
        onChange?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onChangeCapture?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onBeforeInput?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onBeforeInputCapture?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onInput?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onInputCapture?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onReset?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onResetCapture?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onSubmit?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onSubmitCapture?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onInvalid?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onInvalidCapture?: React__default.FormEventHandler<HTMLAnchorElement> | undefined;
        onLoad?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onError?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onErrorCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onKeyDown?: React__default.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyDownCapture?: React__default.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyPress?: React__default.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyPressCapture?: React__default.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyUp?: React__default.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyUpCapture?: React__default.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onAbort?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onAbortCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlay?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlayCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlayThrough?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlayThroughCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onDurationChange?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onDurationChangeCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEmptied?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEmptiedCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEncrypted?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEncryptedCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEnded?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEndedCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedData?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedDataCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedMetadata?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedMetadataCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadStart?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadStartCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPause?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPauseCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlay?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlayCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlaying?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlayingCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onProgress?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onProgressCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onRateChange?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onRateChangeCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onResize?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onResizeCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeeked?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeekedCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeeking?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeekingCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onStalled?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onStalledCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSuspend?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSuspendCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onTimeUpdate?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onTimeUpdateCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onVolumeChange?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onVolumeChangeCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onWaiting?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onWaitingCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onAuxClick?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onAuxClickCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onClick?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onClickCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onContextMenu?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onContextMenuCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onDoubleClick?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onDoubleClickCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onDrag?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEnd?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEndCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEnter?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEnterCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragExit?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragExitCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragLeave?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragLeaveCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragOver?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragOverCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragStart?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragStartCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDrop?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onDropCapture?: React__default.DragEventHandler<HTMLAnchorElement> | undefined;
        onMouseDown?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseDownCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseEnter?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseLeave?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseMove?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseMoveCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseOut?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseOutCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseOverCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseUp?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseUpCapture?: React__default.MouseEventHandler<HTMLAnchorElement> | undefined;
        onSelect?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSelectCapture?: React__default.ReactEventHandler<HTMLAnchorElement> | undefined;
        onTouchCancel?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchCancelCapture?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchEnd?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchEndCapture?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchMove?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchMoveCapture?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchStart?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchStartCapture?: React__default.TouchEventHandler<HTMLAnchorElement> | undefined;
        onPointerDown?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerDownCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerMove?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerMoveCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerUp?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerUpCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerCancel?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerCancelCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerEnter?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerLeave?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOver?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOverCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOut?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOutCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onGotPointerCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onGotPointerCaptureCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onLostPointerCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onLostPointerCaptureCapture?: React__default.PointerEventHandler<HTMLAnchorElement> | undefined;
        onScroll?: React__default.UIEventHandler<HTMLAnchorElement> | undefined;
        onScrollCapture?: React__default.UIEventHandler<HTMLAnchorElement> | undefined;
        onWheel?: React__default.WheelEventHandler<HTMLAnchorElement> | undefined;
        onWheelCapture?: React__default.WheelEventHandler<HTMLAnchorElement> | undefined;
        onAnimationStart?: React__default.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationStartCapture?: React__default.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationEnd?: React__default.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationEndCapture?: React__default.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationIteration?: React__default.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationIterationCapture?: React__default.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onTransitionEnd?: React__default.TransitionEventHandler<HTMLAnchorElement> | undefined;
        onTransitionEndCapture?: React__default.TransitionEventHandler<HTMLAnchorElement> | undefined;
    }>) => Omit<React__default.DetailedHTMLProps<React__default.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref">) | undefined;
    state?: {
        element?: TLinkElement | undefined;
    } | undefined;
    style?: React__default.CSSProperties | undefined;
} & Omit<React__default.DetailedHTMLProps<React__default.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "ref"> & React__default.RefAttributes<any>>;

type FloatingLinkMode = '' | 'edit' | 'insert';
declare const floatingLinkStore: zustand_x.StoreApi<"floatingLink", {
    isEditing: boolean;
    mode: FloatingLinkMode;
    mouseDown: boolean;
    newTab: boolean;
    openEditorId: string | null;
    text: string;
    updated: boolean;
    url: string;
}, zustand_x.SetRecord<{
    isEditing: boolean;
    mode: FloatingLinkMode;
    mouseDown: boolean;
    newTab: boolean;
    openEditorId: string | null;
    text: string;
    updated: boolean;
    url: string;
}> & {
    state: zustand_x.SetImmerState<{
        isEditing: boolean;
        mode: FloatingLinkMode;
        mouseDown: boolean;
        newTab: boolean;
        openEditorId: string | null;
        text: string;
        updated: boolean;
        url: string;
    }>;
    mergeState: zustand_x.MergeState<{
        isEditing: boolean;
        mode: FloatingLinkMode;
        mouseDown: boolean;
        newTab: boolean;
        openEditorId: string | null;
        text: string;
        updated: boolean;
        url: string;
    }>;
} & {
    reset: () => void;
} & {
    hide: () => void;
    show: (mode: FloatingLinkMode, editorId: string) => void;
}, {
    isOpen: (editorId: string) => boolean;
}>;
declare const floatingLinkActions: zustand_x.SetRecord<{
    isEditing: boolean;
    mode: FloatingLinkMode;
    mouseDown: boolean;
    newTab: boolean;
    openEditorId: string | null;
    text: string;
    updated: boolean;
    url: string;
}> & {
    state: zustand_x.SetImmerState<{
        isEditing: boolean;
        mode: FloatingLinkMode;
        mouseDown: boolean;
        newTab: boolean;
        openEditorId: string | null;
        text: string;
        updated: boolean;
        url: string;
    }>;
    mergeState: zustand_x.MergeState<{
        isEditing: boolean;
        mode: FloatingLinkMode;
        mouseDown: boolean;
        newTab: boolean;
        openEditorId: string | null;
        text: string;
        updated: boolean;
        url: string;
    }>;
} & {
    reset: () => void;
} & {
    hide: () => void;
    show: (mode: FloatingLinkMode, editorId: string) => void;
};
declare const floatingLinkSelectors: zustand_x.StoreApiGet<{
    isEditing: boolean;
    mode: FloatingLinkMode;
    mouseDown: boolean;
    newTab: boolean;
    openEditorId: string | null;
    text: string;
    updated: boolean;
    url: string;
}, {
    isOpen: (editorId: string) => boolean;
}>;
declare const useFloatingLinkSelectors: () => zustand_x.StoreApiUse<{
    isEditing: boolean;
    mode: FloatingLinkMode;
    mouseDown: boolean;
    newTab: boolean;
    openEditorId: string | null;
    text: string;
    updated: boolean;
    url: string;
}, {
    isOpen: (editorId: string) => boolean;
}>;

declare const useFloatingLinkEditState: ({ floatingOptions, }?: LinkFloatingToolbarState) => {
    editor: _udecode_plate_common.PlateEditor<_udecode_slate.Value>;
    floating: _udecode_plate_floating.UseVirtualFloatingReturn<_udecode_plate_floating.ReferenceType>;
    isEditing: boolean;
    isOpen: boolean;
    readOnly: boolean;
    triggerFloatingLinkHotkeys: string | string[] | undefined;
    versionEditor: number | null;
};
declare const useFloatingLinkEdit: ({ editor, floating, triggerFloatingLinkHotkeys, versionEditor, }: ReturnType<typeof useFloatingLinkEditState>) => {
    editButtonProps: {
        onClick: () => void;
    };
    props: {
        style: {
            zIndex: number;
            accentColor?: csstype.Property.AccentColor | undefined;
            alignContent?: csstype.Property.AlignContent | undefined;
            alignItems?: csstype.Property.AlignItems | undefined;
            alignSelf?: csstype.Property.AlignSelf | undefined;
            alignTracks?: csstype.Property.AlignTracks | undefined;
            animationComposition?: csstype.Property.AnimationComposition | undefined;
            animationDelay?: csstype.Property.AnimationDelay<string & {}> | undefined;
            animationDirection?: csstype.Property.AnimationDirection | undefined;
            animationDuration?: csstype.Property.AnimationDuration<string & {}> | undefined;
            animationFillMode?: csstype.Property.AnimationFillMode | undefined;
            animationIterationCount?: csstype.Property.AnimationIterationCount | undefined;
            animationName?: csstype.Property.AnimationName | undefined;
            animationPlayState?: csstype.Property.AnimationPlayState | undefined;
            animationRangeEnd?: csstype.Property.AnimationRangeEnd<string | number> | undefined;
            animationRangeStart?: csstype.Property.AnimationRangeStart<string | number> | undefined;
            animationTimeline?: csstype.Property.AnimationTimeline | undefined;
            animationTimingFunction?: csstype.Property.AnimationTimingFunction | undefined;
            appearance?: csstype.Property.Appearance | undefined;
            aspectRatio?: csstype.Property.AspectRatio | undefined;
            backdropFilter?: csstype.Property.BackdropFilter | undefined;
            backfaceVisibility?: csstype.Property.BackfaceVisibility | undefined;
            backgroundAttachment?: csstype.Property.BackgroundAttachment | undefined;
            backgroundBlendMode?: csstype.Property.BackgroundBlendMode | undefined;
            backgroundClip?: csstype.Property.BackgroundClip | undefined;
            backgroundColor?: csstype.Property.BackgroundColor | undefined;
            backgroundImage?: csstype.Property.BackgroundImage | undefined;
            backgroundOrigin?: csstype.Property.BackgroundOrigin | undefined;
            backgroundPositionX?: csstype.Property.BackgroundPositionX<string | number> | undefined;
            backgroundPositionY?: csstype.Property.BackgroundPositionY<string | number> | undefined;
            backgroundRepeat?: csstype.Property.BackgroundRepeat | undefined;
            backgroundSize?: csstype.Property.BackgroundSize<string | number> | undefined;
            blockOverflow?: csstype.Property.BlockOverflow | undefined;
            blockSize?: csstype.Property.BlockSize<string | number> | undefined;
            borderBlockColor?: csstype.Property.BorderBlockColor | undefined;
            borderBlockEndColor?: csstype.Property.BorderBlockEndColor | undefined;
            borderBlockEndStyle?: csstype.Property.BorderBlockEndStyle | undefined;
            borderBlockEndWidth?: csstype.Property.BorderBlockEndWidth<string | number> | undefined;
            borderBlockStartColor?: csstype.Property.BorderBlockStartColor | undefined;
            borderBlockStartStyle?: csstype.Property.BorderBlockStartStyle | undefined;
            borderBlockStartWidth?: csstype.Property.BorderBlockStartWidth<string | number> | undefined;
            borderBlockStyle?: csstype.Property.BorderBlockStyle | undefined;
            borderBlockWidth?: csstype.Property.BorderBlockWidth<string | number> | undefined;
            borderBottomColor?: csstype.Property.BorderBottomColor | undefined;
            borderBottomLeftRadius?: csstype.Property.BorderBottomLeftRadius<string | number> | undefined;
            borderBottomRightRadius?: csstype.Property.BorderBottomRightRadius<string | number> | undefined;
            borderBottomStyle?: csstype.Property.BorderBottomStyle | undefined;
            borderBottomWidth?: csstype.Property.BorderBottomWidth<string | number> | undefined;
            borderCollapse?: csstype.Property.BorderCollapse | undefined;
            borderEndEndRadius?: csstype.Property.BorderEndEndRadius<string | number> | undefined;
            borderEndStartRadius?: csstype.Property.BorderEndStartRadius<string | number> | undefined;
            borderImageOutset?: csstype.Property.BorderImageOutset<string | number> | undefined;
            borderImageRepeat?: csstype.Property.BorderImageRepeat | undefined;
            borderImageSlice?: csstype.Property.BorderImageSlice | undefined;
            borderImageSource?: csstype.Property.BorderImageSource | undefined;
            borderImageWidth?: csstype.Property.BorderImageWidth<string | number> | undefined;
            borderInlineColor?: csstype.Property.BorderInlineColor | undefined;
            borderInlineEndColor?: csstype.Property.BorderInlineEndColor | undefined;
            borderInlineEndStyle?: csstype.Property.BorderInlineEndStyle | undefined;
            borderInlineEndWidth?: csstype.Property.BorderInlineEndWidth<string | number> | undefined;
            borderInlineStartColor?: csstype.Property.BorderInlineStartColor | undefined;
            borderInlineStartStyle?: csstype.Property.BorderInlineStartStyle | undefined;
            borderInlineStartWidth?: csstype.Property.BorderInlineStartWidth<string | number> | undefined;
            borderInlineStyle?: csstype.Property.BorderInlineStyle | undefined;
            borderInlineWidth?: csstype.Property.BorderInlineWidth<string | number> | undefined;
            borderLeftColor?: csstype.Property.BorderLeftColor | undefined;
            borderLeftStyle?: csstype.Property.BorderLeftStyle | undefined;
            borderLeftWidth?: csstype.Property.BorderLeftWidth<string | number> | undefined;
            borderRightColor?: csstype.Property.BorderRightColor | undefined;
            borderRightStyle?: csstype.Property.BorderRightStyle | undefined;
            borderRightWidth?: csstype.Property.BorderRightWidth<string | number> | undefined;
            borderSpacing?: csstype.Property.BorderSpacing<string | number> | undefined;
            borderStartEndRadius?: csstype.Property.BorderStartEndRadius<string | number> | undefined;
            borderStartStartRadius?: csstype.Property.BorderStartStartRadius<string | number> | undefined;
            borderTopColor?: csstype.Property.BorderTopColor | undefined;
            borderTopLeftRadius?: csstype.Property.BorderTopLeftRadius<string | number> | undefined;
            borderTopRightRadius?: csstype.Property.BorderTopRightRadius<string | number> | undefined;
            borderTopStyle?: csstype.Property.BorderTopStyle | undefined;
            borderTopWidth?: csstype.Property.BorderTopWidth<string | number> | undefined;
            bottom?: csstype.Property.Bottom<string | number> | undefined;
            boxDecorationBreak?: csstype.Property.BoxDecorationBreak | undefined;
            boxShadow?: csstype.Property.BoxShadow | undefined;
            boxSizing?: csstype.Property.BoxSizing | undefined;
            breakAfter?: csstype.Property.BreakAfter | undefined;
            breakBefore?: csstype.Property.BreakBefore | undefined;
            breakInside?: csstype.Property.BreakInside | undefined;
            captionSide?: csstype.Property.CaptionSide | undefined;
            caretColor?: csstype.Property.CaretColor | undefined;
            caretShape?: csstype.Property.CaretShape | undefined;
            clear?: csstype.Property.Clear | undefined;
            clipPath?: csstype.Property.ClipPath | undefined;
            color?: csstype.Property.Color | undefined;
            colorAdjust?: csstype.Property.PrintColorAdjust | undefined;
            colorScheme?: csstype.Property.ColorScheme | undefined;
            columnCount?: csstype.Property.ColumnCount | undefined;
            columnFill?: csstype.Property.ColumnFill | undefined;
            columnGap?: csstype.Property.ColumnGap<string | number> | undefined;
            columnRuleColor?: csstype.Property.ColumnRuleColor | undefined;
            columnRuleStyle?: csstype.Property.ColumnRuleStyle | undefined;
            columnRuleWidth?: csstype.Property.ColumnRuleWidth<string | number> | undefined;
            columnSpan?: csstype.Property.ColumnSpan | undefined;
            columnWidth?: csstype.Property.ColumnWidth<string | number> | undefined;
            contain?: csstype.Property.Contain | undefined;
            containIntrinsicBlockSize?: csstype.Property.ContainIntrinsicBlockSize<string | number> | undefined;
            containIntrinsicHeight?: csstype.Property.ContainIntrinsicHeight<string | number> | undefined;
            containIntrinsicInlineSize?: csstype.Property.ContainIntrinsicInlineSize<string | number> | undefined;
            containIntrinsicWidth?: csstype.Property.ContainIntrinsicWidth<string | number> | undefined;
            containerName?: csstype.Property.ContainerName | undefined;
            containerType?: csstype.Property.ContainerType | undefined;
            content?: csstype.Property.Content | undefined;
            contentVisibility?: csstype.Property.ContentVisibility | undefined;
            counterIncrement?: csstype.Property.CounterIncrement | undefined;
            counterReset?: csstype.Property.CounterReset | undefined;
            counterSet?: csstype.Property.CounterSet | undefined;
            cursor?: csstype.Property.Cursor | undefined;
            direction?: csstype.Property.Direction | undefined;
            display?: csstype.Property.Display | undefined;
            emptyCells?: csstype.Property.EmptyCells | undefined;
            filter?: csstype.Property.Filter | undefined;
            flexBasis?: csstype.Property.FlexBasis<string | number> | undefined;
            flexDirection?: csstype.Property.FlexDirection | undefined;
            flexGrow?: csstype.Property.FlexGrow | undefined;
            flexShrink?: csstype.Property.FlexShrink | undefined;
            flexWrap?: csstype.Property.FlexWrap | undefined;
            float?: csstype.Property.Float | undefined;
            fontFamily?: csstype.Property.FontFamily | undefined;
            fontFeatureSettings?: csstype.Property.FontFeatureSettings | undefined;
            fontKerning?: csstype.Property.FontKerning | undefined;
            fontLanguageOverride?: csstype.Property.FontLanguageOverride | undefined;
            fontOpticalSizing?: csstype.Property.FontOpticalSizing | undefined;
            fontPalette?: csstype.Property.FontPalette | undefined;
            fontSize?: csstype.Property.FontSize<string | number> | undefined;
            fontSizeAdjust?: csstype.Property.FontSizeAdjust | undefined;
            fontSmooth?: csstype.Property.FontSmooth<string | number> | undefined;
            fontStretch?: csstype.Property.FontStretch | undefined;
            fontStyle?: csstype.Property.FontStyle | undefined;
            fontSynthesis?: csstype.Property.FontSynthesis | undefined;
            fontSynthesisPosition?: csstype.Property.FontSynthesisPosition | undefined;
            fontSynthesisSmallCaps?: csstype.Property.FontSynthesisSmallCaps | undefined;
            fontSynthesisStyle?: csstype.Property.FontSynthesisStyle | undefined;
            fontSynthesisWeight?: csstype.Property.FontSynthesisWeight | undefined;
            fontVariant?: csstype.Property.FontVariant | undefined;
            fontVariantAlternates?: csstype.Property.FontVariantAlternates | undefined;
            fontVariantCaps?: csstype.Property.FontVariantCaps | undefined;
            fontVariantEastAsian?: csstype.Property.FontVariantEastAsian | undefined;
            fontVariantEmoji?: csstype.Property.FontVariantEmoji | undefined;
            fontVariantLigatures?: csstype.Property.FontVariantLigatures | undefined;
            fontVariantNumeric?: csstype.Property.FontVariantNumeric | undefined;
            fontVariantPosition?: csstype.Property.FontVariantPosition | undefined;
            fontVariationSettings?: csstype.Property.FontVariationSettings | undefined;
            fontWeight?: csstype.Property.FontWeight | undefined;
            forcedColorAdjust?: csstype.Property.ForcedColorAdjust | undefined;
            gridAutoColumns?: csstype.Property.GridAutoColumns<string | number> | undefined;
            gridAutoFlow?: csstype.Property.GridAutoFlow | undefined;
            gridAutoRows?: csstype.Property.GridAutoRows<string | number> | undefined;
            gridColumnEnd?: csstype.Property.GridColumnEnd | undefined;
            gridColumnStart?: csstype.Property.GridColumnStart | undefined;
            gridRowEnd?: csstype.Property.GridRowEnd | undefined;
            gridRowStart?: csstype.Property.GridRowStart | undefined;
            gridTemplateAreas?: csstype.Property.GridTemplateAreas | undefined;
            gridTemplateColumns?: csstype.Property.GridTemplateColumns<string | number> | undefined;
            gridTemplateRows?: csstype.Property.GridTemplateRows<string | number> | undefined;
            hangingPunctuation?: csstype.Property.HangingPunctuation | undefined;
            height?: csstype.Property.Height<string | number> | undefined;
            hyphenateCharacter?: csstype.Property.HyphenateCharacter | undefined;
            hyphenateLimitChars?: csstype.Property.HyphenateLimitChars | undefined;
            hyphens?: csstype.Property.Hyphens | undefined;
            imageOrientation?: csstype.Property.ImageOrientation | undefined;
            imageRendering?: csstype.Property.ImageRendering | undefined;
            imageResolution?: csstype.Property.ImageResolution | undefined;
            initialLetter?: csstype.Property.InitialLetter | undefined;
            inlineSize?: csstype.Property.InlineSize<string | number> | undefined;
            inputSecurity?: csstype.Property.InputSecurity | undefined;
            insetBlockEnd?: csstype.Property.InsetBlockEnd<string | number> | undefined;
            insetBlockStart?: csstype.Property.InsetBlockStart<string | number> | undefined;
            insetInlineEnd?: csstype.Property.InsetInlineEnd<string | number> | undefined;
            insetInlineStart?: csstype.Property.InsetInlineStart<string | number> | undefined;
            isolation?: csstype.Property.Isolation | undefined;
            justifyContent?: csstype.Property.JustifyContent | undefined;
            justifyItems?: csstype.Property.JustifyItems | undefined;
            justifySelf?: csstype.Property.JustifySelf | undefined;
            justifyTracks?: csstype.Property.JustifyTracks | undefined;
            left?: csstype.Property.Left<string | number> | undefined;
            letterSpacing?: csstype.Property.LetterSpacing<string | number> | undefined;
            lineBreak?: csstype.Property.LineBreak | undefined;
            lineHeight?: csstype.Property.LineHeight<string | number> | undefined;
            lineHeightStep?: csstype.Property.LineHeightStep<string | number> | undefined;
            listStyleImage?: csstype.Property.ListStyleImage | undefined;
            listStylePosition?: csstype.Property.ListStylePosition | undefined;
            listStyleType?: csstype.Property.ListStyleType | undefined;
            marginBlockEnd?: csstype.Property.MarginBlockEnd<string | number> | undefined;
            marginBlockStart?: csstype.Property.MarginBlockStart<string | number> | undefined;
            marginBottom?: csstype.Property.MarginBottom<string | number> | undefined;
            marginInlineEnd?: csstype.Property.MarginInlineEnd<string | number> | undefined;
            marginInlineStart?: csstype.Property.MarginInlineStart<string | number> | undefined;
            marginLeft?: csstype.Property.MarginLeft<string | number> | undefined;
            marginRight?: csstype.Property.MarginRight<string | number> | undefined;
            marginTop?: csstype.Property.MarginTop<string | number> | undefined;
            marginTrim?: csstype.Property.MarginTrim | undefined;
            maskBorderMode?: csstype.Property.MaskBorderMode | undefined;
            maskBorderOutset?: csstype.Property.MaskBorderOutset<string | number> | undefined;
            maskBorderRepeat?: csstype.Property.MaskBorderRepeat | undefined;
            maskBorderSlice?: csstype.Property.MaskBorderSlice | undefined;
            maskBorderSource?: csstype.Property.MaskBorderSource | undefined;
            maskBorderWidth?: csstype.Property.MaskBorderWidth<string | number> | undefined;
            maskClip?: csstype.Property.MaskClip | undefined;
            maskComposite?: csstype.Property.MaskComposite | undefined;
            maskImage?: csstype.Property.MaskImage | undefined;
            maskMode?: csstype.Property.MaskMode | undefined;
            maskOrigin?: csstype.Property.MaskOrigin | undefined;
            maskPosition?: csstype.Property.MaskPosition<string | number> | undefined;
            maskRepeat?: csstype.Property.MaskRepeat | undefined;
            maskSize?: csstype.Property.MaskSize<string | number> | undefined;
            maskType?: csstype.Property.MaskType | undefined;
            masonryAutoFlow?: csstype.Property.MasonryAutoFlow | undefined;
            mathDepth?: csstype.Property.MathDepth | undefined;
            mathShift?: csstype.Property.MathShift | undefined;
            mathStyle?: csstype.Property.MathStyle | undefined;
            maxBlockSize?: csstype.Property.MaxBlockSize<string | number> | undefined;
            maxHeight?: csstype.Property.MaxHeight<string | number> | undefined;
            maxInlineSize?: csstype.Property.MaxInlineSize<string | number> | undefined;
            maxLines?: csstype.Property.MaxLines | undefined;
            maxWidth?: csstype.Property.MaxWidth<string | number> | undefined;
            minBlockSize?: csstype.Property.MinBlockSize<string | number> | undefined;
            minHeight?: csstype.Property.MinHeight<string | number> | undefined;
            minInlineSize?: csstype.Property.MinInlineSize<string | number> | undefined;
            minWidth?: csstype.Property.MinWidth<string | number> | undefined;
            mixBlendMode?: csstype.Property.MixBlendMode | undefined;
            motionDistance?: csstype.Property.OffsetDistance<string | number> | undefined;
            motionPath?: csstype.Property.OffsetPath | undefined;
            motionRotation?: csstype.Property.OffsetRotate | undefined;
            objectFit?: csstype.Property.ObjectFit | undefined;
            objectPosition?: csstype.Property.ObjectPosition<string | number> | undefined;
            offsetAnchor?: csstype.Property.OffsetAnchor<string | number> | undefined;
            offsetDistance?: csstype.Property.OffsetDistance<string | number> | undefined;
            offsetPath?: csstype.Property.OffsetPath | undefined;
            offsetPosition?: csstype.Property.OffsetPosition<string | number> | undefined;
            offsetRotate?: csstype.Property.OffsetRotate | undefined;
            offsetRotation?: csstype.Property.OffsetRotate | undefined;
            opacity?: csstype.Property.Opacity | undefined;
            order?: csstype.Property.Order | undefined;
            orphans?: csstype.Property.Orphans | undefined;
            outlineColor?: csstype.Property.OutlineColor | undefined;
            outlineOffset?: csstype.Property.OutlineOffset<string | number> | undefined;
            outlineStyle?: csstype.Property.OutlineStyle | undefined;
            outlineWidth?: csstype.Property.OutlineWidth<string | number> | undefined;
            overflowAnchor?: csstype.Property.OverflowAnchor | undefined;
            overflowBlock?: csstype.Property.OverflowBlock | undefined;
            overflowClipBox?: csstype.Property.OverflowClipBox | undefined;
            overflowClipMargin?: csstype.Property.OverflowClipMargin<string | number> | undefined;
            overflowInline?: csstype.Property.OverflowInline | undefined;
            overflowWrap?: csstype.Property.OverflowWrap | undefined;
            overflowX?: csstype.Property.OverflowX | undefined;
            overflowY?: csstype.Property.OverflowY | undefined;
            overlay?: csstype.Property.Overlay | undefined;
            overscrollBehaviorBlock?: csstype.Property.OverscrollBehaviorBlock | undefined;
            overscrollBehaviorInline?: csstype.Property.OverscrollBehaviorInline | undefined;
            overscrollBehaviorX?: csstype.Property.OverscrollBehaviorX | undefined;
            overscrollBehaviorY?: csstype.Property.OverscrollBehaviorY | undefined;
            paddingBlockEnd?: csstype.Property.PaddingBlockEnd<string | number> | undefined;
            paddingBlockStart?: csstype.Property.PaddingBlockStart<string | number> | undefined;
            paddingBottom?: csstype.Property.PaddingBottom<string | number> | undefined;
            paddingInlineEnd?: csstype.Property.PaddingInlineEnd<string | number> | undefined;
            paddingInlineStart?: csstype.Property.PaddingInlineStart<string | number> | undefined;
            paddingLeft?: csstype.Property.PaddingLeft<string | number> | undefined;
            paddingRight?: csstype.Property.PaddingRight<string | number> | undefined;
            paddingTop?: csstype.Property.PaddingTop<string | number> | undefined;
            page?: csstype.Property.Page | undefined;
            pageBreakAfter?: csstype.Property.PageBreakAfter | undefined;
            pageBreakBefore?: csstype.Property.PageBreakBefore | undefined;
            pageBreakInside?: csstype.Property.PageBreakInside | undefined;
            paintOrder?: csstype.Property.PaintOrder | undefined;
            perspective?: csstype.Property.Perspective<string | number> | undefined;
            perspectiveOrigin?: csstype.Property.PerspectiveOrigin<string | number> | undefined;
            pointerEvents?: csstype.Property.PointerEvents | undefined;
            position?: csstype.Property.Position | undefined;
            printColorAdjust?: csstype.Property.PrintColorAdjust | undefined;
            quotes?: csstype.Property.Quotes | undefined;
            resize?: csstype.Property.Resize | undefined;
            right?: csstype.Property.Right<string | number> | undefined;
            rotate?: csstype.Property.Rotate | undefined;
            rowGap?: csstype.Property.RowGap<string | number> | undefined;
            rubyAlign?: csstype.Property.RubyAlign | undefined;
            rubyMerge?: csstype.Property.RubyMerge | undefined;
            rubyPosition?: csstype.Property.RubyPosition | undefined;
            scale?: csstype.Property.Scale | undefined;
            scrollBehavior?: csstype.Property.ScrollBehavior | undefined;
            scrollMarginBlockEnd?: csstype.Property.ScrollMarginBlockEnd<string | number> | undefined;
            scrollMarginBlockStart?: csstype.Property.ScrollMarginBlockStart<string | number> | undefined;
            scrollMarginBottom?: csstype.Property.ScrollMarginBottom<string | number> | undefined;
            scrollMarginInlineEnd?: csstype.Property.ScrollMarginInlineEnd<string | number> | undefined;
            scrollMarginInlineStart?: csstype.Property.ScrollMarginInlineStart<string | number> | undefined;
            scrollMarginLeft?: csstype.Property.ScrollMarginLeft<string | number> | undefined;
            scrollMarginRight?: csstype.Property.ScrollMarginRight<string | number> | undefined;
            scrollMarginTop?: csstype.Property.ScrollMarginTop<string | number> | undefined;
            scrollPaddingBlockEnd?: csstype.Property.ScrollPaddingBlockEnd<string | number> | undefined;
            scrollPaddingBlockStart?: csstype.Property.ScrollPaddingBlockStart<string | number> | undefined;
            scrollPaddingBottom?: csstype.Property.ScrollPaddingBottom<string | number> | undefined;
            scrollPaddingInlineEnd?: csstype.Property.ScrollPaddingInlineEnd<string | number> | undefined;
            scrollPaddingInlineStart?: csstype.Property.ScrollPaddingInlineStart<string | number> | undefined;
            scrollPaddingLeft?: csstype.Property.ScrollPaddingLeft<string | number> | undefined;
            scrollPaddingRight?: csstype.Property.ScrollPaddingRight<string | number> | undefined;
            scrollPaddingTop?: csstype.Property.ScrollPaddingTop<string | number> | undefined;
            scrollSnapAlign?: csstype.Property.ScrollSnapAlign | undefined;
            scrollSnapMarginBottom?: csstype.Property.ScrollMarginBottom<string | number> | undefined;
            scrollSnapMarginLeft?: csstype.Property.ScrollMarginLeft<string | number> | undefined;
            scrollSnapMarginRight?: csstype.Property.ScrollMarginRight<string | number> | undefined;
            scrollSnapMarginTop?: csstype.Property.ScrollMarginTop<string | number> | undefined;
            scrollSnapStop?: csstype.Property.ScrollSnapStop | undefined;
            scrollSnapType?: csstype.Property.ScrollSnapType | undefined;
            scrollTimelineAxis?: csstype.Property.ScrollTimelineAxis | undefined;
            scrollTimelineName?: csstype.Property.ScrollTimelineName | undefined;
            scrollbarColor?: csstype.Property.ScrollbarColor | undefined;
            scrollbarGutter?: csstype.Property.ScrollbarGutter | undefined;
            scrollbarWidth?: csstype.Property.ScrollbarWidth | undefined;
            shapeImageThreshold?: csstype.Property.ShapeImageThreshold | undefined;
            shapeMargin?: csstype.Property.ShapeMargin<string | number> | undefined;
            shapeOutside?: csstype.Property.ShapeOutside | undefined;
            tabSize?: csstype.Property.TabSize<string | number> | undefined;
            tableLayout?: csstype.Property.TableLayout | undefined;
            textAlign?: csstype.Property.TextAlign | undefined;
            textAlignLast?: csstype.Property.TextAlignLast | undefined;
            textCombineUpright?: csstype.Property.TextCombineUpright | undefined;
            textDecorationColor?: csstype.Property.TextDecorationColor | undefined;
            textDecorationLine?: csstype.Property.TextDecorationLine | undefined;
            textDecorationSkip?: csstype.Property.TextDecorationSkip | undefined;
            textDecorationSkipInk?: csstype.Property.TextDecorationSkipInk | undefined;
            textDecorationStyle?: csstype.Property.TextDecorationStyle | undefined;
            textDecorationThickness?: csstype.Property.TextDecorationThickness<string | number> | undefined;
            textEmphasisColor?: csstype.Property.TextEmphasisColor | undefined;
            textEmphasisPosition?: csstype.Property.TextEmphasisPosition | undefined;
            textEmphasisStyle?: csstype.Property.TextEmphasisStyle | undefined;
            textIndent?: csstype.Property.TextIndent<string | number> | undefined;
            textJustify?: csstype.Property.TextJustify | undefined;
            textOrientation?: csstype.Property.TextOrientation | undefined;
            textOverflow?: csstype.Property.TextOverflow | undefined;
            textRendering?: csstype.Property.TextRendering | undefined;
            textShadow?: csstype.Property.TextShadow | undefined;
            textSizeAdjust?: csstype.Property.TextSizeAdjust | undefined;
            textTransform?: csstype.Property.TextTransform | undefined;
            textUnderlineOffset?: csstype.Property.TextUnderlineOffset<string | number> | undefined;
            textUnderlinePosition?: csstype.Property.TextUnderlinePosition | undefined;
            textWrap?: csstype.Property.TextWrap | undefined;
            timelineScope?: csstype.Property.TimelineScope | undefined;
            top?: csstype.Property.Top<string | number> | undefined;
            touchAction?: csstype.Property.TouchAction | undefined;
            transform?: csstype.Property.Transform | undefined;
            transformBox?: csstype.Property.TransformBox | undefined;
            transformOrigin?: csstype.Property.TransformOrigin<string | number> | undefined;
            transformStyle?: csstype.Property.TransformStyle | undefined;
            transitionBehavior?: csstype.Property.TransitionBehavior | undefined;
            transitionDelay?: csstype.Property.TransitionDelay<string & {}> | undefined;
            transitionDuration?: csstype.Property.TransitionDuration<string & {}> | undefined;
            transitionProperty?: csstype.Property.TransitionProperty | undefined;
            transitionTimingFunction?: csstype.Property.TransitionTimingFunction | undefined;
            translate?: csstype.Property.Translate<string | number> | undefined;
            unicodeBidi?: csstype.Property.UnicodeBidi | undefined;
            userSelect?: csstype.Property.UserSelect | undefined;
            verticalAlign?: csstype.Property.VerticalAlign<string | number> | undefined;
            viewTimelineAxis?: csstype.Property.ViewTimelineAxis | undefined;
            viewTimelineInset?: csstype.Property.ViewTimelineInset<string | number> | undefined;
            viewTimelineName?: csstype.Property.ViewTimelineName | undefined;
            viewTransitionName?: csstype.Property.ViewTransitionName | undefined;
            visibility?: csstype.Property.Visibility | undefined;
            whiteSpace?: csstype.Property.WhiteSpace | undefined;
            whiteSpaceCollapse?: csstype.Property.WhiteSpaceCollapse | undefined;
            whiteSpaceTrim?: csstype.Property.WhiteSpaceTrim | undefined;
            widows?: csstype.Property.Widows | undefined;
            width?: csstype.Property.Width<string | number> | undefined;
            willChange?: csstype.Property.WillChange | undefined;
            wordBreak?: csstype.Property.WordBreak | undefined;
            wordSpacing?: csstype.Property.WordSpacing<string | number> | undefined;
            wordWrap?: csstype.Property.WordWrap | undefined;
            writingMode?: csstype.Property.WritingMode | undefined;
            zoom?: csstype.Property.Zoom | undefined;
            all?: csstype.Globals | undefined;
            animation?: csstype.Property.Animation<string & {}> | undefined;
            animationRange?: csstype.Property.AnimationRange<string | number> | undefined;
            background?: csstype.Property.Background<string | number> | undefined;
            backgroundPosition?: csstype.Property.BackgroundPosition<string | number> | undefined;
            border?: csstype.Property.Border<string | number> | undefined;
            borderBlock?: csstype.Property.BorderBlock<string | number> | undefined;
            borderBlockEnd?: csstype.Property.BorderBlockEnd<string | number> | undefined;
            borderBlockStart?: csstype.Property.BorderBlockStart<string | number> | undefined;
            borderBottom?: csstype.Property.BorderBottom<string | number> | undefined;
            borderColor?: csstype.Property.BorderColor | undefined;
            borderImage?: csstype.Property.BorderImage | undefined;
            borderInline?: csstype.Property.BorderInline<string | number> | undefined;
            borderInlineEnd?: csstype.Property.BorderInlineEnd<string | number> | undefined;
            borderInlineStart?: csstype.Property.BorderInlineStart<string | number> | undefined;
            borderLeft?: csstype.Property.BorderLeft<string | number> | undefined;
            borderRadius?: csstype.Property.BorderRadius<string | number> | undefined;
            borderRight?: csstype.Property.BorderRight<string | number> | undefined;
            borderStyle?: csstype.Property.BorderStyle | undefined;
            borderTop?: csstype.Property.BorderTop<string | number> | undefined;
            borderWidth?: csstype.Property.BorderWidth<string | number> | undefined;
            caret?: csstype.Property.Caret | undefined;
            columnRule?: csstype.Property.ColumnRule<string | number> | undefined;
            columns?: csstype.Property.Columns<string | number> | undefined;
            containIntrinsicSize?: csstype.Property.ContainIntrinsicSize<string | number> | undefined;
            container?: csstype.Property.Container | undefined;
            flex?: csstype.Property.Flex<string | number> | undefined;
            flexFlow?: csstype.Property.FlexFlow | undefined;
            font?: csstype.Property.Font | undefined;
            gap?: csstype.Property.Gap<string | number> | undefined;
            grid?: csstype.Property.Grid | undefined;
            gridArea?: csstype.Property.GridArea | undefined;
            gridColumn?: csstype.Property.GridColumn | undefined;
            gridRow?: csstype.Property.GridRow | undefined;
            gridTemplate?: csstype.Property.GridTemplate | undefined;
            inset?: csstype.Property.Inset<string | number> | undefined;
            insetBlock?: csstype.Property.InsetBlock<string | number> | undefined;
            insetInline?: csstype.Property.InsetInline<string | number> | undefined;
            lineClamp?: csstype.Property.LineClamp | undefined;
            listStyle?: csstype.Property.ListStyle | undefined;
            margin?: csstype.Property.Margin<string | number> | undefined;
            marginBlock?: csstype.Property.MarginBlock<string | number> | undefined;
            marginInline?: csstype.Property.MarginInline<string | number> | undefined;
            mask?: csstype.Property.Mask<string | number> | undefined;
            maskBorder?: csstype.Property.MaskBorder | undefined;
            motion?: csstype.Property.Offset<string | number> | undefined;
            offset?: csstype.Property.Offset<string | number> | undefined;
            outline?: csstype.Property.Outline<string | number> | undefined;
            overflow?: csstype.Property.Overflow | undefined;
            overscrollBehavior?: csstype.Property.OverscrollBehavior | undefined;
            padding?: csstype.Property.Padding<string | number> | undefined;
            paddingBlock?: csstype.Property.PaddingBlock<string | number> | undefined;
            paddingInline?: csstype.Property.PaddingInline<string | number> | undefined;
            placeContent?: csstype.Property.PlaceContent | undefined;
            placeItems?: csstype.Property.PlaceItems | undefined;
            placeSelf?: csstype.Property.PlaceSelf | undefined;
            scrollMargin?: csstype.Property.ScrollMargin<string | number> | undefined;
            scrollMarginBlock?: csstype.Property.ScrollMarginBlock<string | number> | undefined;
            scrollMarginInline?: csstype.Property.ScrollMarginInline<string | number> | undefined;
            scrollPadding?: csstype.Property.ScrollPadding<string | number> | undefined;
            scrollPaddingBlock?: csstype.Property.ScrollPaddingBlock<string | number> | undefined;
            scrollPaddingInline?: csstype.Property.ScrollPaddingInline<string | number> | undefined;
            scrollSnapMargin?: csstype.Property.ScrollMargin<string | number> | undefined;
            scrollTimeline?: csstype.Property.ScrollTimeline | undefined;
            textDecoration?: csstype.Property.TextDecoration<string | number> | undefined;
            textEmphasis?: csstype.Property.TextEmphasis | undefined;
            transition?: csstype.Property.Transition<string & {}> | undefined;
            viewTimeline?: csstype.Property.ViewTimeline | undefined;
            MozAnimationDelay?: csstype.Property.AnimationDelay<string & {}> | undefined;
            MozAnimationDirection?: csstype.Property.AnimationDirection | undefined;
            MozAnimationDuration?: csstype.Property.AnimationDuration<string & {}> | undefined;
            MozAnimationFillMode?: csstype.Property.AnimationFillMode | undefined;
            MozAnimationIterationCount?: csstype.Property.AnimationIterationCount | undefined;
            MozAnimationName?: csstype.Property.AnimationName | undefined;
            MozAnimationPlayState?: csstype.Property.AnimationPlayState | undefined;
            MozAnimationTimingFunction?: csstype.Property.AnimationTimingFunction | undefined;
            MozAppearance?: csstype.Property.MozAppearance | undefined;
            MozBinding?: csstype.Property.MozBinding | undefined;
            MozBorderBottomColors?: csstype.Property.MozBorderBottomColors | undefined;
            MozBorderEndColor?: csstype.Property.BorderInlineEndColor | undefined;
            MozBorderEndStyle?: csstype.Property.BorderInlineEndStyle | undefined;
            MozBorderEndWidth?: csstype.Property.BorderInlineEndWidth<string | number> | undefined;
            MozBorderLeftColors?: csstype.Property.MozBorderLeftColors | undefined;
            MozBorderRightColors?: csstype.Property.MozBorderRightColors | undefined;
            MozBorderStartColor?: csstype.Property.BorderInlineStartColor | undefined;
            MozBorderStartStyle?: csstype.Property.BorderInlineStartStyle | undefined;
            MozBorderTopColors?: csstype.Property.MozBorderTopColors | undefined;
            MozBoxSizing?: csstype.Property.BoxSizing | undefined;
            MozColumnCount?: csstype.Property.ColumnCount | undefined;
            MozColumnFill?: csstype.Property.ColumnFill | undefined;
            MozColumnRuleColor?: csstype.Property.ColumnRuleColor | undefined;
            MozColumnRuleStyle?: csstype.Property.ColumnRuleStyle | undefined;
            MozColumnRuleWidth?: csstype.Property.ColumnRuleWidth<string | number> | undefined;
            MozColumnWidth?: csstype.Property.ColumnWidth<string | number> | undefined;
            MozContextProperties?: csstype.Property.MozContextProperties | undefined;
            MozFontFeatureSettings?: csstype.Property.FontFeatureSettings | undefined;
            MozFontLanguageOverride?: csstype.Property.FontLanguageOverride | undefined;
            MozHyphens?: csstype.Property.Hyphens | undefined;
            MozImageRegion?: csstype.Property.MozImageRegion | undefined;
            MozMarginEnd?: csstype.Property.MarginInlineEnd<string | number> | undefined;
            MozMarginStart?: csstype.Property.MarginInlineStart<string | number> | undefined;
            MozOrient?: csstype.Property.MozOrient | undefined;
            MozOsxFontSmoothing?: csstype.Property.FontSmooth<string | number> | undefined;
            MozOutlineRadiusBottomleft?: csstype.Property.MozOutlineRadiusBottomleft<string | number> | undefined;
            MozOutlineRadiusBottomright?: csstype.Property.MozOutlineRadiusBottomright<string | number> | undefined;
            MozOutlineRadiusTopleft?: csstype.Property.MozOutlineRadiusTopleft<string | number> | undefined;
            MozOutlineRadiusTopright?: csstype.Property.MozOutlineRadiusTopright<string | number> | undefined;
            MozPaddingEnd?: csstype.Property.PaddingInlineEnd<string | number> | undefined;
            MozPaddingStart?: csstype.Property.PaddingInlineStart<string | number> | undefined;
            MozStackSizing?: csstype.Property.MozStackSizing | undefined;
            MozTabSize?: csstype.Property.TabSize<string | number> | undefined;
            MozTextBlink?: csstype.Property.MozTextBlink | undefined;
            MozTextSizeAdjust?: csstype.Property.TextSizeAdjust | undefined;
            MozUserFocus?: csstype.Property.MozUserFocus | undefined;
            MozUserModify?: csstype.Property.MozUserModify | undefined;
            MozUserSelect?: csstype.Property.UserSelect | undefined;
            MozWindowDragging?: csstype.Property.MozWindowDragging | undefined;
            MozWindowShadow?: csstype.Property.MozWindowShadow | undefined;
            msAccelerator?: csstype.Property.MsAccelerator | undefined;
            msBlockProgression?: csstype.Property.MsBlockProgression | undefined;
            msContentZoomChaining?: csstype.Property.MsContentZoomChaining | undefined;
            msContentZoomLimitMax?: csstype.Property.MsContentZoomLimitMax | undefined;
            msContentZoomLimitMin?: csstype.Property.MsContentZoomLimitMin | undefined;
            msContentZoomSnapPoints?: csstype.Property.MsContentZoomSnapPoints | undefined;
            msContentZoomSnapType?: csstype.Property.MsContentZoomSnapType | undefined;
            msContentZooming?: csstype.Property.MsContentZooming | undefined;
            msFilter?: csstype.Property.MsFilter | undefined;
            msFlexDirection?: csstype.Property.FlexDirection | undefined;
            msFlexPositive?: csstype.Property.FlexGrow | undefined;
            msFlowFrom?: csstype.Property.MsFlowFrom | undefined;
            msFlowInto?: csstype.Property.MsFlowInto | undefined;
            msGridColumns?: csstype.Property.MsGridColumns<string | number> | undefined;
            msGridRows?: csstype.Property.MsGridRows<string | number> | undefined;
            msHighContrastAdjust?: csstype.Property.MsHighContrastAdjust | undefined;
            msHyphenateLimitChars?: csstype.Property.MsHyphenateLimitChars | undefined;
            msHyphenateLimitLines?: csstype.Property.MsHyphenateLimitLines | undefined;
            msHyphenateLimitZone?: csstype.Property.MsHyphenateLimitZone<string | number> | undefined;
            msHyphens?: csstype.Property.Hyphens | undefined;
            msImeAlign?: csstype.Property.MsImeAlign | undefined;
            msLineBreak?: csstype.Property.LineBreak | undefined;
            msOrder?: csstype.Property.Order | undefined;
            msOverflowStyle?: csstype.Property.MsOverflowStyle | undefined;
            msOverflowX?: csstype.Property.OverflowX | undefined;
            msOverflowY?: csstype.Property.OverflowY | undefined;
            msScrollChaining?: csstype.Property.MsScrollChaining | undefined;
            msScrollLimitXMax?: csstype.Property.MsScrollLimitXMax<string | number> | undefined;
            msScrollLimitXMin?: csstype.Property.MsScrollLimitXMin<string | number> | undefined;
            msScrollLimitYMax?: csstype.Property.MsScrollLimitYMax<string | number> | undefined;
            msScrollLimitYMin?: csstype.Property.MsScrollLimitYMin<string | number> | undefined;
            msScrollRails?: csstype.Property.MsScrollRails | undefined;
            msScrollSnapPointsX?: csstype.Property.MsScrollSnapPointsX | undefined;
            msScrollSnapPointsY?: csstype.Property.MsScrollSnapPointsY | undefined;
            msScrollSnapType?: csstype.Property.MsScrollSnapType | undefined;
            msScrollTranslation?: csstype.Property.MsScrollTranslation | undefined;
            msScrollbar3dlightColor?: csstype.Property.MsScrollbar3dlightColor | undefined;
            msScrollbarArrowColor?: csstype.Property.MsScrollbarArrowColor | undefined;
            msScrollbarBaseColor?: csstype.Property.MsScrollbarBaseColor | undefined;
            msScrollbarDarkshadowColor?: csstype.Property.MsScrollbarDarkshadowColor | undefined;
            msScrollbarFaceColor?: csstype.Property.MsScrollbarFaceColor | undefined;
            msScrollbarHighlightColor?: csstype.Property.MsScrollbarHighlightColor | undefined;
            msScrollbarShadowColor?: csstype.Property.MsScrollbarShadowColor | undefined;
            msScrollbarTrackColor?: csstype.Property.MsScrollbarTrackColor | undefined;
            msTextAutospace?: csstype.Property.MsTextAutospace | undefined;
            msTextCombineHorizontal?: csstype.Property.TextCombineUpright | undefined;
            msTextOverflow?: csstype.Property.TextOverflow | undefined;
            msTouchAction?: csstype.Property.TouchAction | undefined;
            msTouchSelect?: csstype.Property.MsTouchSelect | undefined;
            msTransform?: csstype.Property.Transform | undefined;
            msTransformOrigin?: csstype.Property.TransformOrigin<string | number> | undefined;
            msTransitionDelay?: csstype.Property.TransitionDelay<string & {}> | undefined;
            msTransitionDuration?: csstype.Property.TransitionDuration<string & {}> | undefined;
            msTransitionProperty?: csstype.Property.TransitionProperty | undefined;
            msTransitionTimingFunction?: csstype.Property.TransitionTimingFunction | undefined;
            msUserSelect?: csstype.Property.MsUserSelect | undefined;
            msWordBreak?: csstype.Property.WordBreak | undefined;
            msWrapFlow?: csstype.Property.MsWrapFlow | undefined;
            msWrapMargin?: csstype.Property.MsWrapMargin<string | number> | undefined;
            msWrapThrough?: csstype.Property.MsWrapThrough | undefined;
            msWritingMode?: csstype.Property.WritingMode | undefined;
            WebkitAlignContent?: csstype.Property.AlignContent | undefined;
            WebkitAlignItems?: csstype.Property.AlignItems | undefined;
            WebkitAlignSelf?: csstype.Property.AlignSelf | undefined;
            WebkitAnimationDelay?: csstype.Property.AnimationDelay<string & {}> | undefined;
            WebkitAnimationDirection?: csstype.Property.AnimationDirection | undefined;
            WebkitAnimationDuration?: csstype.Property.AnimationDuration<string & {}> | undefined;
            WebkitAnimationFillMode?: csstype.Property.AnimationFillMode | undefined;
            WebkitAnimationIterationCount?: csstype.Property.AnimationIterationCount | undefined;
            WebkitAnimationName?: csstype.Property.AnimationName | undefined;
            WebkitAnimationPlayState?: csstype.Property.AnimationPlayState | undefined;
            WebkitAnimationTimingFunction?: csstype.Property.AnimationTimingFunction | undefined;
            WebkitAppearance?: csstype.Property.WebkitAppearance | undefined;
            WebkitBackdropFilter?: csstype.Property.BackdropFilter | undefined;
            WebkitBackfaceVisibility?: csstype.Property.BackfaceVisibility | undefined;
            WebkitBackgroundClip?: csstype.Property.BackgroundClip | undefined;
            WebkitBackgroundOrigin?: csstype.Property.BackgroundOrigin | undefined;
            WebkitBackgroundSize?: csstype.Property.BackgroundSize<string | number> | undefined;
            WebkitBorderBeforeColor?: csstype.Property.WebkitBorderBeforeColor | undefined;
            WebkitBorderBeforeStyle?: csstype.Property.WebkitBorderBeforeStyle | undefined;
            WebkitBorderBeforeWidth?: csstype.Property.WebkitBorderBeforeWidth<string | number> | undefined;
            WebkitBorderBottomLeftRadius?: csstype.Property.BorderBottomLeftRadius<string | number> | undefined;
            WebkitBorderBottomRightRadius?: csstype.Property.BorderBottomRightRadius<string | number> | undefined;
            WebkitBorderImageSlice?: csstype.Property.BorderImageSlice | undefined;
            WebkitBorderTopLeftRadius?: csstype.Property.BorderTopLeftRadius<string | number> | undefined;
            WebkitBorderTopRightRadius?: csstype.Property.BorderTopRightRadius<string | number> | undefined;
            WebkitBoxDecorationBreak?: csstype.Property.BoxDecorationBreak | undefined;
            WebkitBoxReflect?: csstype.Property.WebkitBoxReflect<string | number> | undefined;
            WebkitBoxShadow?: csstype.Property.BoxShadow | undefined;
            WebkitBoxSizing?: csstype.Property.BoxSizing | undefined;
            WebkitClipPath?: csstype.Property.ClipPath | undefined;
            WebkitColumnCount?: csstype.Property.ColumnCount | undefined;
            WebkitColumnFill?: csstype.Property.ColumnFill | undefined;
            WebkitColumnRuleColor?: csstype.Property.ColumnRuleColor | undefined;
            WebkitColumnRuleStyle?: csstype.Property.ColumnRuleStyle | undefined;
            WebkitColumnRuleWidth?: csstype.Property.ColumnRuleWidth<string | number> | undefined;
            WebkitColumnSpan?: csstype.Property.ColumnSpan | undefined;
            WebkitColumnWidth?: csstype.Property.ColumnWidth<string | number> | undefined;
            WebkitFilter?: csstype.Property.Filter | undefined;
            WebkitFlexBasis?: csstype.Property.FlexBasis<string | number> | undefined;
            WebkitFlexDirection?: csstype.Property.FlexDirection | undefined;
            WebkitFlexGrow?: csstype.Property.FlexGrow | undefined;
            WebkitFlexShrink?: csstype.Property.FlexShrink | undefined;
            WebkitFlexWrap?: csstype.Property.FlexWrap | undefined;
            WebkitFontFeatureSettings?: csstype.Property.FontFeatureSettings | undefined;
            WebkitFontKerning?: csstype.Property.FontKerning | undefined;
            WebkitFontSmoothing?: csstype.Property.FontSmooth<string | number> | undefined;
            WebkitFontVariantLigatures?: csstype.Property.FontVariantLigatures | undefined;
            WebkitHyphenateCharacter?: csstype.Property.HyphenateCharacter | undefined;
            WebkitHyphens?: csstype.Property.Hyphens | undefined;
            WebkitInitialLetter?: csstype.Property.InitialLetter | undefined;
            WebkitJustifyContent?: csstype.Property.JustifyContent | undefined;
            WebkitLineBreak?: csstype.Property.LineBreak | undefined;
            WebkitLineClamp?: csstype.Property.WebkitLineClamp | undefined;
            WebkitMarginEnd?: csstype.Property.MarginInlineEnd<string | number> | undefined;
            WebkitMarginStart?: csstype.Property.MarginInlineStart<string | number> | undefined;
            WebkitMaskAttachment?: csstype.Property.WebkitMaskAttachment | undefined;
            WebkitMaskBoxImageOutset?: csstype.Property.MaskBorderOutset<string | number> | undefined;
            WebkitMaskBoxImageRepeat?: csstype.Property.MaskBorderRepeat | undefined;
            WebkitMaskBoxImageSlice?: csstype.Property.MaskBorderSlice | undefined;
            WebkitMaskBoxImageSource?: csstype.Property.MaskBorderSource | undefined;
            WebkitMaskBoxImageWidth?: csstype.Property.MaskBorderWidth<string | number> | undefined;
            WebkitMaskClip?: csstype.Property.WebkitMaskClip | undefined;
            WebkitMaskComposite?: csstype.Property.WebkitMaskComposite | undefined;
            WebkitMaskImage?: csstype.Property.WebkitMaskImage | undefined;
            WebkitMaskOrigin?: csstype.Property.WebkitMaskOrigin | undefined;
            WebkitMaskPosition?: csstype.Property.WebkitMaskPosition<string | number> | undefined;
            WebkitMaskPositionX?: csstype.Property.WebkitMaskPositionX<string | number> | undefined;
            WebkitMaskPositionY?: csstype.Property.WebkitMaskPositionY<string | number> | undefined;
            WebkitMaskRepeat?: csstype.Property.WebkitMaskRepeat | undefined;
            WebkitMaskRepeatX?: csstype.Property.WebkitMaskRepeatX | undefined;
            WebkitMaskRepeatY?: csstype.Property.WebkitMaskRepeatY | undefined;
            WebkitMaskSize?: csstype.Property.WebkitMaskSize<string | number> | undefined;
            WebkitMaxInlineSize?: csstype.Property.MaxInlineSize<string | number> | undefined;
            WebkitOrder?: csstype.Property.Order | undefined;
            WebkitOverflowScrolling?: csstype.Property.WebkitOverflowScrolling | undefined;
            WebkitPaddingEnd?: csstype.Property.PaddingInlineEnd<string | number> | undefined;
            WebkitPaddingStart?: csstype.Property.PaddingInlineStart<string | number> | undefined;
            WebkitPerspective?: csstype.Property.Perspective<string | number> | undefined;
            WebkitPerspectiveOrigin?: csstype.Property.PerspectiveOrigin<string | number> | undefined;
            WebkitPrintColorAdjust?: csstype.Property.PrintColorAdjust | undefined;
            WebkitRubyPosition?: csstype.Property.RubyPosition | undefined;
            WebkitScrollSnapType?: csstype.Property.ScrollSnapType | undefined;
            WebkitShapeMargin?: csstype.Property.ShapeMargin<string | number> | undefined;
            WebkitTapHighlightColor?: csstype.Property.WebkitTapHighlightColor | undefined;
            WebkitTextCombine?: csstype.Property.TextCombineUpright | undefined;
            WebkitTextDecorationColor?: csstype.Property.TextDecorationColor | undefined;
            WebkitTextDecorationLine?: csstype.Property.TextDecorationLine | undefined;
            WebkitTextDecorationSkip?: csstype.Property.TextDecorationSkip | undefined;
            WebkitTextDecorationStyle?: csstype.Property.TextDecorationStyle | undefined;
            WebkitTextEmphasisColor?: csstype.Property.TextEmphasisColor | undefined;
            WebkitTextEmphasisPosition?: csstype.Property.TextEmphasisPosition | undefined;
            WebkitTextEmphasisStyle?: csstype.Property.TextEmphasisStyle | undefined;
            WebkitTextFillColor?: csstype.Property.WebkitTextFillColor | undefined;
            WebkitTextOrientation?: csstype.Property.TextOrientation | undefined;
            WebkitTextSizeAdjust?: csstype.Property.TextSizeAdjust | undefined;
            WebkitTextStrokeColor?: csstype.Property.WebkitTextStrokeColor | undefined;
            WebkitTextStrokeWidth?: csstype.Property.WebkitTextStrokeWidth<string | number> | undefined;
            WebkitTextUnderlinePosition?: csstype.Property.TextUnderlinePosition | undefined;
            WebkitTouchCallout?: csstype.Property.WebkitTouchCallout | undefined;
            WebkitTransform?: csstype.Property.Transform | undefined;
            WebkitTransformOrigin?: csstype.Property.TransformOrigin<string | number> | undefined;
            WebkitTransformStyle?: csstype.Property.TransformStyle | undefined;
            WebkitTransitionDelay?: csstype.Property.TransitionDelay<string & {}> | undefined;
            WebkitTransitionDuration?: csstype.Property.TransitionDuration<string & {}> | undefined;
            WebkitTransitionProperty?: csstype.Property.TransitionProperty | undefined;
            WebkitTransitionTimingFunction?: csstype.Property.TransitionTimingFunction | undefined;
            WebkitUserModify?: csstype.Property.WebkitUserModify | undefined;
            WebkitUserSelect?: csstype.Property.UserSelect | undefined;
            WebkitWritingMode?: csstype.Property.WritingMode | undefined;
            MozAnimation?: csstype.Property.Animation<string & {}> | undefined;
            MozBorderImage?: csstype.Property.BorderImage | undefined;
            MozColumnRule?: csstype.Property.ColumnRule<string | number> | undefined;
            MozColumns?: csstype.Property.Columns<string | number> | undefined;
            MozOutlineRadius?: csstype.Property.MozOutlineRadius<string | number> | undefined;
            msContentZoomLimit?: csstype.Property.MsContentZoomLimit | undefined;
            msContentZoomSnap?: csstype.Property.MsContentZoomSnap | undefined;
            msFlex?: csstype.Property.Flex<string | number> | undefined;
            msScrollLimit?: csstype.Property.MsScrollLimit | undefined;
            msScrollSnapX?: csstype.Property.MsScrollSnapX | undefined;
            msScrollSnapY?: csstype.Property.MsScrollSnapY | undefined;
            msTransition?: csstype.Property.Transition<string & {}> | undefined;
            WebkitAnimation?: csstype.Property.Animation<string & {}> | undefined;
            WebkitBorderBefore?: csstype.Property.WebkitBorderBefore<string | number> | undefined;
            WebkitBorderImage?: csstype.Property.BorderImage | undefined;
            WebkitBorderRadius?: csstype.Property.BorderRadius<string | number> | undefined;
            WebkitColumnRule?: csstype.Property.ColumnRule<string | number> | undefined;
            WebkitColumns?: csstype.Property.Columns<string | number> | undefined;
            WebkitFlex?: csstype.Property.Flex<string | number> | undefined;
            WebkitFlexFlow?: csstype.Property.FlexFlow | undefined;
            WebkitMask?: csstype.Property.WebkitMask<string | number> | undefined;
            WebkitMaskBoxImage?: csstype.Property.MaskBorder | undefined;
            WebkitTextEmphasis?: csstype.Property.TextEmphasis | undefined;
            WebkitTextStroke?: csstype.Property.WebkitTextStroke<string | number> | undefined;
            WebkitTransition?: csstype.Property.Transition<string & {}> | undefined;
            azimuth?: csstype.Property.Azimuth | undefined;
            boxAlign?: csstype.Property.BoxAlign | undefined;
            boxDirection?: csstype.Property.BoxDirection | undefined;
            boxFlex?: csstype.Property.BoxFlex | undefined;
            boxFlexGroup?: csstype.Property.BoxFlexGroup | undefined;
            boxLines?: csstype.Property.BoxLines | undefined;
            boxOrdinalGroup?: csstype.Property.BoxOrdinalGroup | undefined;
            boxOrient?: csstype.Property.BoxOrient | undefined;
            boxPack?: csstype.Property.BoxPack | undefined;
            clip?: csstype.Property.Clip | undefined;
            gridColumnGap?: csstype.Property.GridColumnGap<string | number> | undefined;
            gridGap?: csstype.Property.GridGap<string | number> | undefined;
            gridRowGap?: csstype.Property.GridRowGap<string | number> | undefined;
            imeMode?: csstype.Property.ImeMode | undefined;
            offsetBlock?: csstype.Property.InsetBlock<string | number> | undefined;
            offsetBlockEnd?: csstype.Property.InsetBlockEnd<string | number> | undefined;
            offsetBlockStart?: csstype.Property.InsetBlockStart<string | number> | undefined;
            offsetInline?: csstype.Property.InsetInline<string | number> | undefined;
            offsetInlineEnd?: csstype.Property.InsetInlineEnd<string | number> | undefined;
            offsetInlineStart?: csstype.Property.InsetInlineStart<string | number> | undefined;
            scrollSnapCoordinate?: csstype.Property.ScrollSnapCoordinate<string | number> | undefined;
            scrollSnapDestination?: csstype.Property.ScrollSnapDestination<string | number> | undefined;
            scrollSnapPointsX?: csstype.Property.ScrollSnapPointsX | undefined;
            scrollSnapPointsY?: csstype.Property.ScrollSnapPointsY | undefined;
            scrollSnapTypeX?: csstype.Property.ScrollSnapTypeX | undefined;
            scrollSnapTypeY?: csstype.Property.ScrollSnapTypeY | undefined;
            KhtmlBoxAlign?: csstype.Property.BoxAlign | undefined;
            KhtmlBoxDirection?: csstype.Property.BoxDirection | undefined;
            KhtmlBoxFlex?: csstype.Property.BoxFlex | undefined;
            KhtmlBoxFlexGroup?: csstype.Property.BoxFlexGroup | undefined;
            KhtmlBoxLines?: csstype.Property.BoxLines | undefined;
            KhtmlBoxOrdinalGroup?: csstype.Property.BoxOrdinalGroup | undefined;
            KhtmlBoxOrient?: csstype.Property.BoxOrient | undefined;
            KhtmlBoxPack?: csstype.Property.BoxPack | undefined;
            KhtmlLineBreak?: csstype.Property.LineBreak | undefined;
            KhtmlOpacity?: csstype.Property.Opacity | undefined;
            KhtmlUserSelect?: csstype.Property.UserSelect | undefined;
            MozBackfaceVisibility?: csstype.Property.BackfaceVisibility | undefined;
            MozBackgroundClip?: csstype.Property.BackgroundClip | undefined;
            MozBackgroundInlinePolicy?: csstype.Property.BoxDecorationBreak | undefined;
            MozBackgroundOrigin?: csstype.Property.BackgroundOrigin | undefined;
            MozBackgroundSize?: csstype.Property.BackgroundSize<string | number> | undefined;
            MozBorderRadius?: csstype.Property.BorderRadius<string | number> | undefined;
            MozBorderRadiusBottomleft?: csstype.Property.BorderBottomLeftRadius<string | number> | undefined;
            MozBorderRadiusBottomright?: csstype.Property.BorderBottomRightRadius<string | number> | undefined;
            MozBorderRadiusTopleft?: csstype.Property.BorderTopLeftRadius<string | number> | undefined;
            MozBorderRadiusTopright?: csstype.Property.BorderTopRightRadius<string | number> | undefined;
            MozBoxAlign?: csstype.Property.BoxAlign | undefined;
            MozBoxDirection?: csstype.Property.BoxDirection | undefined;
            MozBoxFlex?: csstype.Property.BoxFlex | undefined;
            MozBoxOrdinalGroup?: csstype.Property.BoxOrdinalGroup | undefined;
            MozBoxOrient?: csstype.Property.BoxOrient | undefined;
            MozBoxPack?: csstype.Property.BoxPack | undefined;
            MozBoxShadow?: csstype.Property.BoxShadow | undefined;
            MozFloatEdge?: csstype.Property.MozFloatEdge | undefined;
            MozForceBrokenImageIcon?: csstype.Property.MozForceBrokenImageIcon | undefined;
            MozOpacity?: csstype.Property.Opacity | undefined;
            MozOutline?: csstype.Property.Outline<string | number> | undefined;
            MozOutlineColor?: csstype.Property.OutlineColor | undefined;
            MozOutlineStyle?: csstype.Property.OutlineStyle | undefined;
            MozOutlineWidth?: csstype.Property.OutlineWidth<string | number> | undefined;
            MozPerspective?: csstype.Property.Perspective<string | number> | undefined;
            MozPerspectiveOrigin?: csstype.Property.PerspectiveOrigin<string | number> | undefined;
            MozTextAlignLast?: csstype.Property.TextAlignLast | undefined;
            MozTextDecorationColor?: csstype.Property.TextDecorationColor | undefined;
            MozTextDecorationLine?: csstype.Property.TextDecorationLine | undefined;
            MozTextDecorationStyle?: csstype.Property.TextDecorationStyle | undefined;
            MozTransform?: csstype.Property.Transform | undefined;
            MozTransformOrigin?: csstype.Property.TransformOrigin<string | number> | undefined;
            MozTransformStyle?: csstype.Property.TransformStyle | undefined;
            MozTransition?: csstype.Property.Transition<string & {}> | undefined;
            MozTransitionDelay?: csstype.Property.TransitionDelay<string & {}> | undefined;
            MozTransitionDuration?: csstype.Property.TransitionDuration<string & {}> | undefined;
            MozTransitionProperty?: csstype.Property.TransitionProperty | undefined;
            MozTransitionTimingFunction?: csstype.Property.TransitionTimingFunction | undefined;
            MozUserInput?: csstype.Property.MozUserInput | undefined;
            msImeMode?: csstype.Property.ImeMode | undefined;
            OAnimation?: csstype.Property.Animation<string & {}> | undefined;
            OAnimationDelay?: csstype.Property.AnimationDelay<string & {}> | undefined;
            OAnimationDirection?: csstype.Property.AnimationDirection | undefined;
            OAnimationDuration?: csstype.Property.AnimationDuration<string & {}> | undefined;
            OAnimationFillMode?: csstype.Property.AnimationFillMode | undefined;
            OAnimationIterationCount?: csstype.Property.AnimationIterationCount | undefined;
            OAnimationName?: csstype.Property.AnimationName | undefined;
            OAnimationPlayState?: csstype.Property.AnimationPlayState | undefined;
            OAnimationTimingFunction?: csstype.Property.AnimationTimingFunction | undefined;
            OBackgroundSize?: csstype.Property.BackgroundSize<string | number> | undefined;
            OBorderImage?: csstype.Property.BorderImage | undefined;
            OObjectFit?: csstype.Property.ObjectFit | undefined;
            OObjectPosition?: csstype.Property.ObjectPosition<string | number> | undefined;
            OTabSize?: csstype.Property.TabSize<string | number> | undefined;
            OTextOverflow?: csstype.Property.TextOverflow | undefined;
            OTransform?: csstype.Property.Transform | undefined;
            OTransformOrigin?: csstype.Property.TransformOrigin<string | number> | undefined;
            OTransition?: csstype.Property.Transition<string & {}> | undefined;
            OTransitionDelay?: csstype.Property.TransitionDelay<string & {}> | undefined;
            OTransitionDuration?: csstype.Property.TransitionDuration<string & {}> | undefined;
            OTransitionProperty?: csstype.Property.TransitionProperty | undefined;
            OTransitionTimingFunction?: csstype.Property.TransitionTimingFunction | undefined;
            WebkitBoxAlign?: csstype.Property.BoxAlign | undefined;
            WebkitBoxDirection?: csstype.Property.BoxDirection | undefined;
            WebkitBoxFlex?: csstype.Property.BoxFlex | undefined;
            WebkitBoxFlexGroup?: csstype.Property.BoxFlexGroup | undefined;
            WebkitBoxLines?: csstype.Property.BoxLines | undefined;
            WebkitBoxOrdinalGroup?: csstype.Property.BoxOrdinalGroup | undefined;
            WebkitBoxOrient?: csstype.Property.BoxOrient | undefined;
            WebkitBoxPack?: csstype.Property.BoxPack | undefined;
            alignmentBaseline?: csstype.Property.AlignmentBaseline | undefined;
            baselineShift?: csstype.Property.BaselineShift<string | number> | undefined;
            clipRule?: csstype.Property.ClipRule | undefined;
            colorInterpolation?: csstype.Property.ColorInterpolation | undefined;
            colorRendering?: csstype.Property.ColorRendering | undefined;
            dominantBaseline?: csstype.Property.DominantBaseline | undefined;
            fill?: csstype.Property.Fill | undefined;
            fillOpacity?: csstype.Property.FillOpacity | undefined;
            fillRule?: csstype.Property.FillRule | undefined;
            floodColor?: csstype.Property.FloodColor | undefined;
            floodOpacity?: csstype.Property.FloodOpacity | undefined;
            glyphOrientationVertical?: csstype.Property.GlyphOrientationVertical | undefined;
            lightingColor?: csstype.Property.LightingColor | undefined;
            marker?: csstype.Property.Marker | undefined;
            markerEnd?: csstype.Property.MarkerEnd | undefined;
            markerMid?: csstype.Property.MarkerMid | undefined;
            markerStart?: csstype.Property.MarkerStart | undefined;
            shapeRendering?: csstype.Property.ShapeRendering | undefined;
            stopColor?: csstype.Property.StopColor | undefined;
            stopOpacity?: csstype.Property.StopOpacity | undefined;
            stroke?: csstype.Property.Stroke | undefined;
            strokeDasharray?: csstype.Property.StrokeDasharray<string | number> | undefined;
            strokeDashoffset?: csstype.Property.StrokeDashoffset<string | number> | undefined;
            strokeLinecap?: csstype.Property.StrokeLinecap | undefined;
            strokeLinejoin?: csstype.Property.StrokeLinejoin | undefined;
            strokeMiterlimit?: csstype.Property.StrokeMiterlimit | undefined;
            strokeOpacity?: csstype.Property.StrokeOpacity | undefined;
            strokeWidth?: csstype.Property.StrokeWidth<string | number> | undefined;
            textAnchor?: csstype.Property.TextAnchor | undefined;
            vectorEffect?: csstype.Property.VectorEffect | undefined;
        };
    };
    ref: (node: HTMLElement | null) => void;
    unlinkButtonProps: {
        onClick: () => void;
        onMouseDown: (e: React__default.MouseEvent<HTMLButtonElement>) => void;
    };
};

declare const useFloatingLinkEnter: () => void;

declare const useFloatingLinkEscape: () => void;

type LinkFloatingToolbarState = {
    floatingOptions?: UseVirtualFloatingOptions;
};
declare const useFloatingLinkInsertState: ({ floatingOptions, }?: LinkFloatingToolbarState) => {
    editor: _udecode_plate_common.PlateEditor<_udecode_slate.Value>;
    floating: _udecode_plate_floating.UseVirtualFloatingReturn<_udecode_plate_floating.ReferenceType>;
    focused: boolean;
    isOpen: boolean;
    readOnly: boolean;
    triggerFloatingLinkHotkeys: string | string[] | undefined;
};
declare const useFloatingLinkInsert: ({ editor, floating, focused, isOpen, readOnly, triggerFloatingLinkHotkeys, }: ReturnType<typeof useFloatingLinkInsertState>) => {
    hidden: boolean;
    props: {
        style: {
            zIndex: number;
            accentColor?: csstype.Property.AccentColor | undefined;
            alignContent?: csstype.Property.AlignContent | undefined;
            alignItems?: csstype.Property.AlignItems | undefined;
            alignSelf?: csstype.Property.AlignSelf | undefined;
            alignTracks?: csstype.Property.AlignTracks | undefined;
            animationComposition?: csstype.Property.AnimationComposition | undefined;
            animationDelay?: csstype.Property.AnimationDelay<string & {}> | undefined;
            animationDirection?: csstype.Property.AnimationDirection | undefined;
            animationDuration?: csstype.Property.AnimationDuration<string & {}> | undefined;
            animationFillMode?: csstype.Property.AnimationFillMode | undefined;
            animationIterationCount?: csstype.Property.AnimationIterationCount | undefined;
            animationName?: csstype.Property.AnimationName | undefined;
            animationPlayState?: csstype.Property.AnimationPlayState | undefined;
            animationRangeEnd?: csstype.Property.AnimationRangeEnd<string | number> | undefined;
            animationRangeStart?: csstype.Property.AnimationRangeStart<string | number> | undefined;
            animationTimeline?: csstype.Property.AnimationTimeline | undefined;
            animationTimingFunction?: csstype.Property.AnimationTimingFunction | undefined;
            appearance?: csstype.Property.Appearance | undefined;
            aspectRatio?: csstype.Property.AspectRatio | undefined;
            backdropFilter?: csstype.Property.BackdropFilter | undefined;
            backfaceVisibility?: csstype.Property.BackfaceVisibility | undefined;
            backgroundAttachment?: csstype.Property.BackgroundAttachment | undefined;
            backgroundBlendMode?: csstype.Property.BackgroundBlendMode | undefined;
            backgroundClip?: csstype.Property.BackgroundClip | undefined;
            backgroundColor?: csstype.Property.BackgroundColor | undefined;
            backgroundImage?: csstype.Property.BackgroundImage | undefined;
            backgroundOrigin?: csstype.Property.BackgroundOrigin | undefined;
            backgroundPositionX?: csstype.Property.BackgroundPositionX<string | number> | undefined;
            backgroundPositionY?: csstype.Property.BackgroundPositionY<string | number> | undefined;
            backgroundRepeat?: csstype.Property.BackgroundRepeat | undefined;
            backgroundSize?: csstype.Property.BackgroundSize<string | number> | undefined;
            blockOverflow?: csstype.Property.BlockOverflow | undefined;
            blockSize?: csstype.Property.BlockSize<string | number> | undefined;
            borderBlockColor?: csstype.Property.BorderBlockColor | undefined;
            borderBlockEndColor?: csstype.Property.BorderBlockEndColor | undefined;
            borderBlockEndStyle?: csstype.Property.BorderBlockEndStyle | undefined;
            borderBlockEndWidth?: csstype.Property.BorderBlockEndWidth<string | number> | undefined;
            borderBlockStartColor?: csstype.Property.BorderBlockStartColor | undefined;
            borderBlockStartStyle?: csstype.Property.BorderBlockStartStyle | undefined;
            borderBlockStartWidth?: csstype.Property.BorderBlockStartWidth<string | number> | undefined;
            borderBlockStyle?: csstype.Property.BorderBlockStyle | undefined;
            borderBlockWidth?: csstype.Property.BorderBlockWidth<string | number> | undefined;
            borderBottomColor?: csstype.Property.BorderBottomColor | undefined;
            borderBottomLeftRadius?: csstype.Property.BorderBottomLeftRadius<string | number> | undefined;
            borderBottomRightRadius?: csstype.Property.BorderBottomRightRadius<string | number> | undefined;
            borderBottomStyle?: csstype.Property.BorderBottomStyle | undefined;
            borderBottomWidth?: csstype.Property.BorderBottomWidth<string | number> | undefined;
            borderCollapse?: csstype.Property.BorderCollapse | undefined;
            borderEndEndRadius?: csstype.Property.BorderEndEndRadius<string | number> | undefined;
            borderEndStartRadius?: csstype.Property.BorderEndStartRadius<string | number> | undefined;
            borderImageOutset?: csstype.Property.BorderImageOutset<string | number> | undefined;
            borderImageRepeat?: csstype.Property.BorderImageRepeat | undefined;
            borderImageSlice?: csstype.Property.BorderImageSlice | undefined;
            borderImageSource?: csstype.Property.BorderImageSource | undefined;
            borderImageWidth?: csstype.Property.BorderImageWidth<string | number> | undefined;
            borderInlineColor?: csstype.Property.BorderInlineColor | undefined;
            borderInlineEndColor?: csstype.Property.BorderInlineEndColor | undefined;
            borderInlineEndStyle?: csstype.Property.BorderInlineEndStyle | undefined;
            borderInlineEndWidth?: csstype.Property.BorderInlineEndWidth<string | number> | undefined;
            borderInlineStartColor?: csstype.Property.BorderInlineStartColor | undefined;
            borderInlineStartStyle?: csstype.Property.BorderInlineStartStyle | undefined;
            borderInlineStartWidth?: csstype.Property.BorderInlineStartWidth<string | number> | undefined;
            borderInlineStyle?: csstype.Property.BorderInlineStyle | undefined;
            borderInlineWidth?: csstype.Property.BorderInlineWidth<string | number> | undefined;
            borderLeftColor?: csstype.Property.BorderLeftColor | undefined;
            borderLeftStyle?: csstype.Property.BorderLeftStyle | undefined;
            borderLeftWidth?: csstype.Property.BorderLeftWidth<string | number> | undefined;
            borderRightColor?: csstype.Property.BorderRightColor | undefined;
            borderRightStyle?: csstype.Property.BorderRightStyle | undefined;
            borderRightWidth?: csstype.Property.BorderRightWidth<string | number> | undefined;
            borderSpacing?: csstype.Property.BorderSpacing<string | number> | undefined;
            borderStartEndRadius?: csstype.Property.BorderStartEndRadius<string | number> | undefined;
            borderStartStartRadius?: csstype.Property.BorderStartStartRadius<string | number> | undefined;
            borderTopColor?: csstype.Property.BorderTopColor | undefined;
            borderTopLeftRadius?: csstype.Property.BorderTopLeftRadius<string | number> | undefined;
            borderTopRightRadius?: csstype.Property.BorderTopRightRadius<string | number> | undefined;
            borderTopStyle?: csstype.Property.BorderTopStyle | undefined;
            borderTopWidth?: csstype.Property.BorderTopWidth<string | number> | undefined;
            bottom?: csstype.Property.Bottom<string | number> | undefined;
            boxDecorationBreak?: csstype.Property.BoxDecorationBreak | undefined;
            boxShadow?: csstype.Property.BoxShadow | undefined;
            boxSizing?: csstype.Property.BoxSizing | undefined;
            breakAfter?: csstype.Property.BreakAfter | undefined;
            breakBefore?: csstype.Property.BreakBefore | undefined;
            breakInside?: csstype.Property.BreakInside | undefined;
            captionSide?: csstype.Property.CaptionSide | undefined;
            caretColor?: csstype.Property.CaretColor | undefined;
            caretShape?: csstype.Property.CaretShape | undefined;
            clear?: csstype.Property.Clear | undefined;
            clipPath?: csstype.Property.ClipPath | undefined;
            color?: csstype.Property.Color | undefined;
            colorAdjust?: csstype.Property.PrintColorAdjust | undefined;
            colorScheme?: csstype.Property.ColorScheme | undefined;
            columnCount?: csstype.Property.ColumnCount | undefined;
            columnFill?: csstype.Property.ColumnFill | undefined;
            columnGap?: csstype.Property.ColumnGap<string | number> | undefined;
            columnRuleColor?: csstype.Property.ColumnRuleColor | undefined;
            columnRuleStyle?: csstype.Property.ColumnRuleStyle | undefined;
            columnRuleWidth?: csstype.Property.ColumnRuleWidth<string | number> | undefined;
            columnSpan?: csstype.Property.ColumnSpan | undefined;
            columnWidth?: csstype.Property.ColumnWidth<string | number> | undefined;
            contain?: csstype.Property.Contain | undefined;
            containIntrinsicBlockSize?: csstype.Property.ContainIntrinsicBlockSize<string | number> | undefined;
            containIntrinsicHeight?: csstype.Property.ContainIntrinsicHeight<string | number> | undefined;
            containIntrinsicInlineSize?: csstype.Property.ContainIntrinsicInlineSize<string | number> | undefined;
            containIntrinsicWidth?: csstype.Property.ContainIntrinsicWidth<string | number> | undefined;
            containerName?: csstype.Property.ContainerName | undefined;
            containerType?: csstype.Property.ContainerType | undefined;
            content?: csstype.Property.Content | undefined;
            contentVisibility?: csstype.Property.ContentVisibility | undefined;
            counterIncrement?: csstype.Property.CounterIncrement | undefined;
            counterReset?: csstype.Property.CounterReset | undefined;
            counterSet?: csstype.Property.CounterSet | undefined;
            cursor?: csstype.Property.Cursor | undefined;
            direction?: csstype.Property.Direction | undefined;
            display?: csstype.Property.Display | undefined;
            emptyCells?: csstype.Property.EmptyCells | undefined;
            filter?: csstype.Property.Filter | undefined;
            flexBasis?: csstype.Property.FlexBasis<string | number> | undefined;
            flexDirection?: csstype.Property.FlexDirection | undefined;
            flexGrow?: csstype.Property.FlexGrow | undefined;
            flexShrink?: csstype.Property.FlexShrink | undefined;
            flexWrap?: csstype.Property.FlexWrap | undefined;
            float?: csstype.Property.Float | undefined;
            fontFamily?: csstype.Property.FontFamily | undefined;
            fontFeatureSettings?: csstype.Property.FontFeatureSettings | undefined;
            fontKerning?: csstype.Property.FontKerning | undefined;
            fontLanguageOverride?: csstype.Property.FontLanguageOverride | undefined;
            fontOpticalSizing?: csstype.Property.FontOpticalSizing | undefined;
            fontPalette?: csstype.Property.FontPalette | undefined;
            fontSize?: csstype.Property.FontSize<string | number> | undefined;
            fontSizeAdjust?: csstype.Property.FontSizeAdjust | undefined;
            fontSmooth?: csstype.Property.FontSmooth<string | number> | undefined;
            fontStretch?: csstype.Property.FontStretch | undefined;
            fontStyle?: csstype.Property.FontStyle | undefined;
            fontSynthesis?: csstype.Property.FontSynthesis | undefined;
            fontSynthesisPosition?: csstype.Property.FontSynthesisPosition | undefined;
            fontSynthesisSmallCaps?: csstype.Property.FontSynthesisSmallCaps | undefined;
            fontSynthesisStyle?: csstype.Property.FontSynthesisStyle | undefined;
            fontSynthesisWeight?: csstype.Property.FontSynthesisWeight | undefined;
            fontVariant?: csstype.Property.FontVariant | undefined;
            fontVariantAlternates?: csstype.Property.FontVariantAlternates | undefined;
            fontVariantCaps?: csstype.Property.FontVariantCaps | undefined;
            fontVariantEastAsian?: csstype.Property.FontVariantEastAsian | undefined;
            fontVariantEmoji?: csstype.Property.FontVariantEmoji | undefined;
            fontVariantLigatures?: csstype.Property.FontVariantLigatures | undefined;
            fontVariantNumeric?: csstype.Property.FontVariantNumeric | undefined;
            fontVariantPosition?: csstype.Property.FontVariantPosition | undefined;
            fontVariationSettings?: csstype.Property.FontVariationSettings | undefined;
            fontWeight?: csstype.Property.FontWeight | undefined;
            forcedColorAdjust?: csstype.Property.ForcedColorAdjust | undefined;
            gridAutoColumns?: csstype.Property.GridAutoColumns<string | number> | undefined;
            gridAutoFlow?: csstype.Property.GridAutoFlow | undefined;
            gridAutoRows?: csstype.Property.GridAutoRows<string | number> | undefined;
            gridColumnEnd?: csstype.Property.GridColumnEnd | undefined;
            gridColumnStart?: csstype.Property.GridColumnStart | undefined;
            gridRowEnd?: csstype.Property.GridRowEnd | undefined;
            gridRowStart?: csstype.Property.GridRowStart | undefined;
            gridTemplateAreas?: csstype.Property.GridTemplateAreas | undefined;
            gridTemplateColumns?: csstype.Property.GridTemplateColumns<string | number> | undefined;
            gridTemplateRows?: csstype.Property.GridTemplateRows<string | number> | undefined;
            hangingPunctuation?: csstype.Property.HangingPunctuation | undefined;
            height?: csstype.Property.Height<string | number> | undefined;
            hyphenateCharacter?: csstype.Property.HyphenateCharacter | undefined;
            hyphenateLimitChars?: csstype.Property.HyphenateLimitChars | undefined;
            hyphens?: csstype.Property.Hyphens | undefined;
            imageOrientation?: csstype.Property.ImageOrientation | undefined;
            imageRendering?: csstype.Property.ImageRendering | undefined;
            imageResolution?: csstype.Property.ImageResolution | undefined;
            initialLetter?: csstype.Property.InitialLetter | undefined;
            inlineSize?: csstype.Property.InlineSize<string | number> | undefined;
            inputSecurity?: csstype.Property.InputSecurity | undefined;
            insetBlockEnd?: csstype.Property.InsetBlockEnd<string | number> | undefined;
            insetBlockStart?: csstype.Property.InsetBlockStart<string | number> | undefined;
            insetInlineEnd?: csstype.Property.InsetInlineEnd<string | number> | undefined;
            insetInlineStart?: csstype.Property.InsetInlineStart<string | number> | undefined;
            isolation?: csstype.Property.Isolation | undefined;
            justifyContent?: csstype.Property.JustifyContent | undefined;
            justifyItems?: csstype.Property.JustifyItems | undefined;
            justifySelf?: csstype.Property.JustifySelf | undefined;
            justifyTracks?: csstype.Property.JustifyTracks | undefined;
            left?: csstype.Property.Left<string | number> | undefined;
            letterSpacing?: csstype.Property.LetterSpacing<string | number> | undefined;
            lineBreak?: csstype.Property.LineBreak | undefined;
            lineHeight?: csstype.Property.LineHeight<string | number> | undefined;
            lineHeightStep?: csstype.Property.LineHeightStep<string | number> | undefined;
            listStyleImage?: csstype.Property.ListStyleImage | undefined;
            listStylePosition?: csstype.Property.ListStylePosition | undefined;
            listStyleType?: csstype.Property.ListStyleType | undefined;
            marginBlockEnd?: csstype.Property.MarginBlockEnd<string | number> | undefined;
            marginBlockStart?: csstype.Property.MarginBlockStart<string | number> | undefined;
            marginBottom?: csstype.Property.MarginBottom<string | number> | undefined;
            marginInlineEnd?: csstype.Property.MarginInlineEnd<string | number> | undefined;
            marginInlineStart?: csstype.Property.MarginInlineStart<string | number> | undefined;
            marginLeft?: csstype.Property.MarginLeft<string | number> | undefined;
            marginRight?: csstype.Property.MarginRight<string | number> | undefined;
            marginTop?: csstype.Property.MarginTop<string | number> | undefined;
            marginTrim?: csstype.Property.MarginTrim | undefined;
            maskBorderMode?: csstype.Property.MaskBorderMode | undefined;
            maskBorderOutset?: csstype.Property.MaskBorderOutset<string | number> | undefined;
            maskBorderRepeat?: csstype.Property.MaskBorderRepeat | undefined;
            maskBorderSlice?: csstype.Property.MaskBorderSlice | undefined;
            maskBorderSource?: csstype.Property.MaskBorderSource | undefined;
            maskBorderWidth?: csstype.Property.MaskBorderWidth<string | number> | undefined;
            maskClip?: csstype.Property.MaskClip | undefined;
            maskComposite?: csstype.Property.MaskComposite | undefined;
            maskImage?: csstype.Property.MaskImage | undefined;
            maskMode?: csstype.Property.MaskMode | undefined;
            maskOrigin?: csstype.Property.MaskOrigin | undefined;
            maskPosition?: csstype.Property.MaskPosition<string | number> | undefined;
            maskRepeat?: csstype.Property.MaskRepeat | undefined;
            maskSize?: csstype.Property.MaskSize<string | number> | undefined;
            maskType?: csstype.Property.MaskType | undefined;
            masonryAutoFlow?: csstype.Property.MasonryAutoFlow | undefined;
            mathDepth?: csstype.Property.MathDepth | undefined;
            mathShift?: csstype.Property.MathShift | undefined;
            mathStyle?: csstype.Property.MathStyle | undefined;
            maxBlockSize?: csstype.Property.MaxBlockSize<string | number> | undefined;
            maxHeight?: csstype.Property.MaxHeight<string | number> | undefined;
            maxInlineSize?: csstype.Property.MaxInlineSize<string | number> | undefined;
            maxLines?: csstype.Property.MaxLines | undefined;
            maxWidth?: csstype.Property.MaxWidth<string | number> | undefined;
            minBlockSize?: csstype.Property.MinBlockSize<string | number> | undefined;
            minHeight?: csstype.Property.MinHeight<string | number> | undefined;
            minInlineSize?: csstype.Property.MinInlineSize<string | number> | undefined;
            minWidth?: csstype.Property.MinWidth<string | number> | undefined;
            mixBlendMode?: csstype.Property.MixBlendMode | undefined;
            motionDistance?: csstype.Property.OffsetDistance<string | number> | undefined;
            motionPath?: csstype.Property.OffsetPath | undefined;
            motionRotation?: csstype.Property.OffsetRotate | undefined;
            objectFit?: csstype.Property.ObjectFit | undefined;
            objectPosition?: csstype.Property.ObjectPosition<string | number> | undefined;
            offsetAnchor?: csstype.Property.OffsetAnchor<string | number> | undefined;
            offsetDistance?: csstype.Property.OffsetDistance<string | number> | undefined;
            offsetPath?: csstype.Property.OffsetPath | undefined;
            offsetPosition?: csstype.Property.OffsetPosition<string | number> | undefined;
            offsetRotate?: csstype.Property.OffsetRotate | undefined;
            offsetRotation?: csstype.Property.OffsetRotate | undefined;
            opacity?: csstype.Property.Opacity | undefined;
            order?: csstype.Property.Order | undefined;
            orphans?: csstype.Property.Orphans | undefined;
            outlineColor?: csstype.Property.OutlineColor | undefined;
            outlineOffset?: csstype.Property.OutlineOffset<string | number> | undefined;
            outlineStyle?: csstype.Property.OutlineStyle | undefined;
            outlineWidth?: csstype.Property.OutlineWidth<string | number> | undefined;
            overflowAnchor?: csstype.Property.OverflowAnchor | undefined;
            overflowBlock?: csstype.Property.OverflowBlock | undefined;
            overflowClipBox?: csstype.Property.OverflowClipBox | undefined;
            overflowClipMargin?: csstype.Property.OverflowClipMargin<string | number> | undefined;
            overflowInline?: csstype.Property.OverflowInline | undefined;
            overflowWrap?: csstype.Property.OverflowWrap | undefined;
            overflowX?: csstype.Property.OverflowX | undefined;
            overflowY?: csstype.Property.OverflowY | undefined;
            overlay?: csstype.Property.Overlay | undefined;
            overscrollBehaviorBlock?: csstype.Property.OverscrollBehaviorBlock | undefined;
            overscrollBehaviorInline?: csstype.Property.OverscrollBehaviorInline | undefined;
            overscrollBehaviorX?: csstype.Property.OverscrollBehaviorX | undefined;
            overscrollBehaviorY?: csstype.Property.OverscrollBehaviorY | undefined;
            paddingBlockEnd?: csstype.Property.PaddingBlockEnd<string | number> | undefined;
            paddingBlockStart?: csstype.Property.PaddingBlockStart<string | number> | undefined;
            paddingBottom?: csstype.Property.PaddingBottom<string | number> | undefined;
            paddingInlineEnd?: csstype.Property.PaddingInlineEnd<string | number> | undefined;
            paddingInlineStart?: csstype.Property.PaddingInlineStart<string | number> | undefined;
            paddingLeft?: csstype.Property.PaddingLeft<string | number> | undefined;
            paddingRight?: csstype.Property.PaddingRight<string | number> | undefined;
            paddingTop?: csstype.Property.PaddingTop<string | number> | undefined;
            page?: csstype.Property.Page | undefined;
            pageBreakAfter?: csstype.Property.PageBreakAfter | undefined;
            pageBreakBefore?: csstype.Property.PageBreakBefore | undefined;
            pageBreakInside?: csstype.Property.PageBreakInside | undefined;
            paintOrder?: csstype.Property.PaintOrder | undefined;
            perspective?: csstype.Property.Perspective<string | number> | undefined;
            perspectiveOrigin?: csstype.Property.PerspectiveOrigin<string | number> | undefined;
            pointerEvents?: csstype.Property.PointerEvents | undefined;
            position?: csstype.Property.Position | undefined;
            printColorAdjust?: csstype.Property.PrintColorAdjust | undefined;
            quotes?: csstype.Property.Quotes | undefined;
            resize?: csstype.Property.Resize | undefined;
            right?: csstype.Property.Right<string | number> | undefined;
            rotate?: csstype.Property.Rotate | undefined;
            rowGap?: csstype.Property.RowGap<string | number> | undefined;
            rubyAlign?: csstype.Property.RubyAlign | undefined;
            rubyMerge?: csstype.Property.RubyMerge | undefined;
            rubyPosition?: csstype.Property.RubyPosition | undefined;
            scale?: csstype.Property.Scale | undefined;
            scrollBehavior?: csstype.Property.ScrollBehavior | undefined;
            scrollMarginBlockEnd?: csstype.Property.ScrollMarginBlockEnd<string | number> | undefined;
            scrollMarginBlockStart?: csstype.Property.ScrollMarginBlockStart<string | number> | undefined;
            scrollMarginBottom?: csstype.Property.ScrollMarginBottom<string | number> | undefined;
            scrollMarginInlineEnd?: csstype.Property.ScrollMarginInlineEnd<string | number> | undefined;
            scrollMarginInlineStart?: csstype.Property.ScrollMarginInlineStart<string | number> | undefined;
            scrollMarginLeft?: csstype.Property.ScrollMarginLeft<string | number> | undefined;
            scrollMarginRight?: csstype.Property.ScrollMarginRight<string | number> | undefined;
            scrollMarginTop?: csstype.Property.ScrollMarginTop<string | number> | undefined;
            scrollPaddingBlockEnd?: csstype.Property.ScrollPaddingBlockEnd<string | number> | undefined;
            scrollPaddingBlockStart?: csstype.Property.ScrollPaddingBlockStart<string | number> | undefined;
            scrollPaddingBottom?: csstype.Property.ScrollPaddingBottom<string | number> | undefined;
            scrollPaddingInlineEnd?: csstype.Property.ScrollPaddingInlineEnd<string | number> | undefined;
            scrollPaddingInlineStart?: csstype.Property.ScrollPaddingInlineStart<string | number> | undefined;
            scrollPaddingLeft?: csstype.Property.ScrollPaddingLeft<string | number> | undefined;
            scrollPaddingRight?: csstype.Property.ScrollPaddingRight<string | number> | undefined;
            scrollPaddingTop?: csstype.Property.ScrollPaddingTop<string | number> | undefined;
            scrollSnapAlign?: csstype.Property.ScrollSnapAlign | undefined;
            scrollSnapMarginBottom?: csstype.Property.ScrollMarginBottom<string | number> | undefined;
            scrollSnapMarginLeft?: csstype.Property.ScrollMarginLeft<string | number> | undefined;
            scrollSnapMarginRight?: csstype.Property.ScrollMarginRight<string | number> | undefined;
            scrollSnapMarginTop?: csstype.Property.ScrollMarginTop<string | number> | undefined;
            scrollSnapStop?: csstype.Property.ScrollSnapStop | undefined;
            scrollSnapType?: csstype.Property.ScrollSnapType | undefined;
            scrollTimelineAxis?: csstype.Property.ScrollTimelineAxis | undefined;
            scrollTimelineName?: csstype.Property.ScrollTimelineName | undefined;
            scrollbarColor?: csstype.Property.ScrollbarColor | undefined;
            scrollbarGutter?: csstype.Property.ScrollbarGutter | undefined;
            scrollbarWidth?: csstype.Property.ScrollbarWidth | undefined;
            shapeImageThreshold?: csstype.Property.ShapeImageThreshold | undefined;
            shapeMargin?: csstype.Property.ShapeMargin<string | number> | undefined;
            shapeOutside?: csstype.Property.ShapeOutside | undefined;
            tabSize?: csstype.Property.TabSize<string | number> | undefined;
            tableLayout?: csstype.Property.TableLayout | undefined;
            textAlign?: csstype.Property.TextAlign | undefined;
            textAlignLast?: csstype.Property.TextAlignLast | undefined;
            textCombineUpright?: csstype.Property.TextCombineUpright | undefined;
            textDecorationColor?: csstype.Property.TextDecorationColor | undefined;
            textDecorationLine?: csstype.Property.TextDecorationLine | undefined;
            textDecorationSkip?: csstype.Property.TextDecorationSkip | undefined;
            textDecorationSkipInk?: csstype.Property.TextDecorationSkipInk | undefined;
            textDecorationStyle?: csstype.Property.TextDecorationStyle | undefined;
            textDecorationThickness?: csstype.Property.TextDecorationThickness<string | number> | undefined;
            textEmphasisColor?: csstype.Property.TextEmphasisColor | undefined;
            textEmphasisPosition?: csstype.Property.TextEmphasisPosition | undefined;
            textEmphasisStyle?: csstype.Property.TextEmphasisStyle | undefined;
            textIndent?: csstype.Property.TextIndent<string | number> | undefined;
            textJustify?: csstype.Property.TextJustify | undefined;
            textOrientation?: csstype.Property.TextOrientation | undefined;
            textOverflow?: csstype.Property.TextOverflow | undefined;
            textRendering?: csstype.Property.TextRendering | undefined;
            textShadow?: csstype.Property.TextShadow | undefined;
            textSizeAdjust?: csstype.Property.TextSizeAdjust | undefined;
            textTransform?: csstype.Property.TextTransform | undefined;
            textUnderlineOffset?: csstype.Property.TextUnderlineOffset<string | number> | undefined;
            textUnderlinePosition?: csstype.Property.TextUnderlinePosition | undefined;
            textWrap?: csstype.Property.TextWrap | undefined;
            timelineScope?: csstype.Property.TimelineScope | undefined;
            top?: csstype.Property.Top<string | number> | undefined;
            touchAction?: csstype.Property.TouchAction | undefined;
            transform?: csstype.Property.Transform | undefined;
            transformBox?: csstype.Property.TransformBox | undefined;
            transformOrigin?: csstype.Property.TransformOrigin<string | number> | undefined;
            transformStyle?: csstype.Property.TransformStyle | undefined;
            transitionBehavior?: csstype.Property.TransitionBehavior | undefined;
            transitionDelay?: csstype.Property.TransitionDelay<string & {}> | undefined;
            transitionDuration?: csstype.Property.TransitionDuration<string & {}> | undefined;
            transitionProperty?: csstype.Property.TransitionProperty | undefined;
            transitionTimingFunction?: csstype.Property.TransitionTimingFunction | undefined;
            translate?: csstype.Property.Translate<string | number> | undefined;
            unicodeBidi?: csstype.Property.UnicodeBidi | undefined;
            userSelect?: csstype.Property.UserSelect | undefined;
            verticalAlign?: csstype.Property.VerticalAlign<string | number> | undefined;
            viewTimelineAxis?: csstype.Property.ViewTimelineAxis | undefined;
            viewTimelineInset?: csstype.Property.ViewTimelineInset<string | number> | undefined;
            viewTimelineName?: csstype.Property.ViewTimelineName | undefined;
            viewTransitionName?: csstype.Property.ViewTransitionName | undefined;
            visibility?: csstype.Property.Visibility | undefined;
            whiteSpace?: csstype.Property.WhiteSpace | undefined;
            whiteSpaceCollapse?: csstype.Property.WhiteSpaceCollapse | undefined;
            whiteSpaceTrim?: csstype.Property.WhiteSpaceTrim | undefined;
            widows?: csstype.Property.Widows | undefined;
            width?: csstype.Property.Width<string | number> | undefined;
            willChange?: csstype.Property.WillChange | undefined;
            wordBreak?: csstype.Property.WordBreak | undefined;
            wordSpacing?: csstype.Property.WordSpacing<string | number> | undefined;
            wordWrap?: csstype.Property.WordWrap | undefined;
            writingMode?: csstype.Property.WritingMode | undefined;
            zoom?: csstype.Property.Zoom | undefined;
            all?: csstype.Globals | undefined;
            animation?: csstype.Property.Animation<string & {}> | undefined;
            animationRange?: csstype.Property.AnimationRange<string | number> | undefined;
            background?: csstype.Property.Background<string | number> | undefined;
            backgroundPosition?: csstype.Property.BackgroundPosition<string | number> | undefined;
            border?: csstype.Property.Border<string | number> | undefined;
            borderBlock?: csstype.Property.BorderBlock<string | number> | undefined;
            borderBlockEnd?: csstype.Property.BorderBlockEnd<string | number> | undefined;
            borderBlockStart?: csstype.Property.BorderBlockStart<string | number> | undefined;
            borderBottom?: csstype.Property.BorderBottom<string | number> | undefined;
            borderColor?: csstype.Property.BorderColor | undefined;
            borderImage?: csstype.Property.BorderImage | undefined;
            borderInline?: csstype.Property.BorderInline<string | number> | undefined;
            borderInlineEnd?: csstype.Property.BorderInlineEnd<string | number> | undefined;
            borderInlineStart?: csstype.Property.BorderInlineStart<string | number> | undefined;
            borderLeft?: csstype.Property.BorderLeft<string | number> | undefined;
            borderRadius?: csstype.Property.BorderRadius<string | number> | undefined;
            borderRight?: csstype.Property.BorderRight<string | number> | undefined;
            borderStyle?: csstype.Property.BorderStyle | undefined;
            borderTop?: csstype.Property.BorderTop<string | number> | undefined;
            borderWidth?: csstype.Property.BorderWidth<string | number> | undefined;
            caret?: csstype.Property.Caret | undefined;
            columnRule?: csstype.Property.ColumnRule<string | number> | undefined;
            columns?: csstype.Property.Columns<string | number> | undefined;
            containIntrinsicSize?: csstype.Property.ContainIntrinsicSize<string | number> | undefined;
            container?: csstype.Property.Container | undefined;
            flex?: csstype.Property.Flex<string | number> | undefined;
            flexFlow?: csstype.Property.FlexFlow | undefined;
            font?: csstype.Property.Font | undefined;
            gap?: csstype.Property.Gap<string | number> | undefined;
            grid?: csstype.Property.Grid | undefined;
            gridArea?: csstype.Property.GridArea | undefined;
            gridColumn?: csstype.Property.GridColumn | undefined;
            gridRow?: csstype.Property.GridRow | undefined;
            gridTemplate?: csstype.Property.GridTemplate | undefined;
            inset?: csstype.Property.Inset<string | number> | undefined;
            insetBlock?: csstype.Property.InsetBlock<string | number> | undefined;
            insetInline?: csstype.Property.InsetInline<string | number> | undefined;
            lineClamp?: csstype.Property.LineClamp | undefined;
            listStyle?: csstype.Property.ListStyle | undefined;
            margin?: csstype.Property.Margin<string | number> | undefined;
            marginBlock?: csstype.Property.MarginBlock<string | number> | undefined;
            marginInline?: csstype.Property.MarginInline<string | number> | undefined;
            mask?: csstype.Property.Mask<string | number> | undefined;
            maskBorder?: csstype.Property.MaskBorder | undefined;
            motion?: csstype.Property.Offset<string | number> | undefined;
            offset?: csstype.Property.Offset<string | number> | undefined;
            outline?: csstype.Property.Outline<string | number> | undefined;
            overflow?: csstype.Property.Overflow | undefined;
            overscrollBehavior?: csstype.Property.OverscrollBehavior | undefined;
            padding?: csstype.Property.Padding<string | number> | undefined;
            paddingBlock?: csstype.Property.PaddingBlock<string | number> | undefined;
            paddingInline?: csstype.Property.PaddingInline<string | number> | undefined;
            placeContent?: csstype.Property.PlaceContent | undefined;
            placeItems?: csstype.Property.PlaceItems | undefined;
            placeSelf?: csstype.Property.PlaceSelf | undefined;
            scrollMargin?: csstype.Property.ScrollMargin<string | number> | undefined;
            scrollMarginBlock?: csstype.Property.ScrollMarginBlock<string | number> | undefined;
            scrollMarginInline?: csstype.Property.ScrollMarginInline<string | number> | undefined;
            scrollPadding?: csstype.Property.ScrollPadding<string | number> | undefined;
            scrollPaddingBlock?: csstype.Property.ScrollPaddingBlock<string | number> | undefined;
            scrollPaddingInline?: csstype.Property.ScrollPaddingInline<string | number> | undefined;
            scrollSnapMargin?: csstype.Property.ScrollMargin<string | number> | undefined;
            scrollTimeline?: csstype.Property.ScrollTimeline | undefined;
            textDecoration?: csstype.Property.TextDecoration<string | number> | undefined;
            textEmphasis?: csstype.Property.TextEmphasis | undefined;
            transition?: csstype.Property.Transition<string & {}> | undefined;
            viewTimeline?: csstype.Property.ViewTimeline | undefined;
            MozAnimationDelay?: csstype.Property.AnimationDelay<string & {}> | undefined;
            MozAnimationDirection?: csstype.Property.AnimationDirection | undefined;
            MozAnimationDuration?: csstype.Property.AnimationDuration<string & {}> | undefined;
            MozAnimationFillMode?: csstype.Property.AnimationFillMode | undefined;
            MozAnimationIterationCount?: csstype.Property.AnimationIterationCount | undefined;
            MozAnimationName?: csstype.Property.AnimationName | undefined;
            MozAnimationPlayState?: csstype.Property.AnimationPlayState | undefined;
            MozAnimationTimingFunction?: csstype.Property.AnimationTimingFunction | undefined;
            MozAppearance?: csstype.Property.MozAppearance | undefined;
            MozBinding?: csstype.Property.MozBinding | undefined;
            MozBorderBottomColors?: csstype.Property.MozBorderBottomColors | undefined;
            MozBorderEndColor?: csstype.Property.BorderInlineEndColor | undefined;
            MozBorderEndStyle?: csstype.Property.BorderInlineEndStyle | undefined;
            MozBorderEndWidth?: csstype.Property.BorderInlineEndWidth<string | number> | undefined;
            MozBorderLeftColors?: csstype.Property.MozBorderLeftColors | undefined;
            MozBorderRightColors?: csstype.Property.MozBorderRightColors | undefined;
            MozBorderStartColor?: csstype.Property.BorderInlineStartColor | undefined;
            MozBorderStartStyle?: csstype.Property.BorderInlineStartStyle | undefined;
            MozBorderTopColors?: csstype.Property.MozBorderTopColors | undefined;
            MozBoxSizing?: csstype.Property.BoxSizing | undefined;
            MozColumnCount?: csstype.Property.ColumnCount | undefined;
            MozColumnFill?: csstype.Property.ColumnFill | undefined;
            MozColumnRuleColor?: csstype.Property.ColumnRuleColor | undefined;
            MozColumnRuleStyle?: csstype.Property.ColumnRuleStyle | undefined;
            MozColumnRuleWidth?: csstype.Property.ColumnRuleWidth<string | number> | undefined;
            MozColumnWidth?: csstype.Property.ColumnWidth<string | number> | undefined;
            MozContextProperties?: csstype.Property.MozContextProperties | undefined;
            MozFontFeatureSettings?: csstype.Property.FontFeatureSettings | undefined;
            MozFontLanguageOverride?: csstype.Property.FontLanguageOverride | undefined;
            MozHyphens?: csstype.Property.Hyphens | undefined;
            MozImageRegion?: csstype.Property.MozImageRegion | undefined;
            MozMarginEnd?: csstype.Property.MarginInlineEnd<string | number> | undefined;
            MozMarginStart?: csstype.Property.MarginInlineStart<string | number> | undefined;
            MozOrient?: csstype.Property.MozOrient | undefined;
            MozOsxFontSmoothing?: csstype.Property.FontSmooth<string | number> | undefined;
            MozOutlineRadiusBottomleft?: csstype.Property.MozOutlineRadiusBottomleft<string | number> | undefined;
            MozOutlineRadiusBottomright?: csstype.Property.MozOutlineRadiusBottomright<string | number> | undefined;
            MozOutlineRadiusTopleft?: csstype.Property.MozOutlineRadiusTopleft<string | number> | undefined;
            MozOutlineRadiusTopright?: csstype.Property.MozOutlineRadiusTopright<string | number> | undefined;
            MozPaddingEnd?: csstype.Property.PaddingInlineEnd<string | number> | undefined;
            MozPaddingStart?: csstype.Property.PaddingInlineStart<string | number> | undefined;
            MozStackSizing?: csstype.Property.MozStackSizing | undefined;
            MozTabSize?: csstype.Property.TabSize<string | number> | undefined;
            MozTextBlink?: csstype.Property.MozTextBlink | undefined;
            MozTextSizeAdjust?: csstype.Property.TextSizeAdjust | undefined;
            MozUserFocus?: csstype.Property.MozUserFocus | undefined;
            MozUserModify?: csstype.Property.MozUserModify | undefined;
            MozUserSelect?: csstype.Property.UserSelect | undefined;
            MozWindowDragging?: csstype.Property.MozWindowDragging | undefined;
            MozWindowShadow?: csstype.Property.MozWindowShadow | undefined;
            msAccelerator?: csstype.Property.MsAccelerator | undefined;
            msBlockProgression?: csstype.Property.MsBlockProgression | undefined;
            msContentZoomChaining?: csstype.Property.MsContentZoomChaining | undefined;
            msContentZoomLimitMax?: csstype.Property.MsContentZoomLimitMax | undefined;
            msContentZoomLimitMin?: csstype.Property.MsContentZoomLimitMin | undefined;
            msContentZoomSnapPoints?: csstype.Property.MsContentZoomSnapPoints | undefined;
            msContentZoomSnapType?: csstype.Property.MsContentZoomSnapType | undefined;
            msContentZooming?: csstype.Property.MsContentZooming | undefined;
            msFilter?: csstype.Property.MsFilter | undefined;
            msFlexDirection?: csstype.Property.FlexDirection | undefined;
            msFlexPositive?: csstype.Property.FlexGrow | undefined;
            msFlowFrom?: csstype.Property.MsFlowFrom | undefined;
            msFlowInto?: csstype.Property.MsFlowInto | undefined;
            msGridColumns?: csstype.Property.MsGridColumns<string | number> | undefined;
            msGridRows?: csstype.Property.MsGridRows<string | number> | undefined;
            msHighContrastAdjust?: csstype.Property.MsHighContrastAdjust | undefined;
            msHyphenateLimitChars?: csstype.Property.MsHyphenateLimitChars | undefined;
            msHyphenateLimitLines?: csstype.Property.MsHyphenateLimitLines | undefined;
            msHyphenateLimitZone?: csstype.Property.MsHyphenateLimitZone<string | number> | undefined;
            msHyphens?: csstype.Property.Hyphens | undefined;
            msImeAlign?: csstype.Property.MsImeAlign | undefined;
            msLineBreak?: csstype.Property.LineBreak | undefined;
            msOrder?: csstype.Property.Order | undefined;
            msOverflowStyle?: csstype.Property.MsOverflowStyle | undefined;
            msOverflowX?: csstype.Property.OverflowX | undefined;
            msOverflowY?: csstype.Property.OverflowY | undefined;
            msScrollChaining?: csstype.Property.MsScrollChaining | undefined;
            msScrollLimitXMax?: csstype.Property.MsScrollLimitXMax<string | number> | undefined;
            msScrollLimitXMin?: csstype.Property.MsScrollLimitXMin<string | number> | undefined;
            msScrollLimitYMax?: csstype.Property.MsScrollLimitYMax<string | number> | undefined;
            msScrollLimitYMin?: csstype.Property.MsScrollLimitYMin<string | number> | undefined;
            msScrollRails?: csstype.Property.MsScrollRails | undefined;
            msScrollSnapPointsX?: csstype.Property.MsScrollSnapPointsX | undefined;
            msScrollSnapPointsY?: csstype.Property.MsScrollSnapPointsY | undefined;
            msScrollSnapType?: csstype.Property.MsScrollSnapType | undefined;
            msScrollTranslation?: csstype.Property.MsScrollTranslation | undefined;
            msScrollbar3dlightColor?: csstype.Property.MsScrollbar3dlightColor | undefined;
            msScrollbarArrowColor?: csstype.Property.MsScrollbarArrowColor | undefined;
            msScrollbarBaseColor?: csstype.Property.MsScrollbarBaseColor | undefined;
            msScrollbarDarkshadowColor?: csstype.Property.MsScrollbarDarkshadowColor | undefined;
            msScrollbarFaceColor?: csstype.Property.MsScrollbarFaceColor | undefined;
            msScrollbarHighlightColor?: csstype.Property.MsScrollbarHighlightColor | undefined;
            msScrollbarShadowColor?: csstype.Property.MsScrollbarShadowColor | undefined;
            msScrollbarTrackColor?: csstype.Property.MsScrollbarTrackColor | undefined;
            msTextAutospace?: csstype.Property.MsTextAutospace | undefined;
            msTextCombineHorizontal?: csstype.Property.TextCombineUpright | undefined;
            msTextOverflow?: csstype.Property.TextOverflow | undefined;
            msTouchAction?: csstype.Property.TouchAction | undefined;
            msTouchSelect?: csstype.Property.MsTouchSelect | undefined;
            msTransform?: csstype.Property.Transform | undefined;
            msTransformOrigin?: csstype.Property.TransformOrigin<string | number> | undefined;
            msTransitionDelay?: csstype.Property.TransitionDelay<string & {}> | undefined;
            msTransitionDuration?: csstype.Property.TransitionDuration<string & {}> | undefined;
            msTransitionProperty?: csstype.Property.TransitionProperty | undefined;
            msTransitionTimingFunction?: csstype.Property.TransitionTimingFunction | undefined;
            msUserSelect?: csstype.Property.MsUserSelect | undefined;
            msWordBreak?: csstype.Property.WordBreak | undefined;
            msWrapFlow?: csstype.Property.MsWrapFlow | undefined;
            msWrapMargin?: csstype.Property.MsWrapMargin<string | number> | undefined;
            msWrapThrough?: csstype.Property.MsWrapThrough | undefined;
            msWritingMode?: csstype.Property.WritingMode | undefined;
            WebkitAlignContent?: csstype.Property.AlignContent | undefined;
            WebkitAlignItems?: csstype.Property.AlignItems | undefined;
            WebkitAlignSelf?: csstype.Property.AlignSelf | undefined;
            WebkitAnimationDelay?: csstype.Property.AnimationDelay<string & {}> | undefined;
            WebkitAnimationDirection?: csstype.Property.AnimationDirection | undefined;
            WebkitAnimationDuration?: csstype.Property.AnimationDuration<string & {}> | undefined;
            WebkitAnimationFillMode?: csstype.Property.AnimationFillMode | undefined;
            WebkitAnimationIterationCount?: csstype.Property.AnimationIterationCount | undefined;
            WebkitAnimationName?: csstype.Property.AnimationName | undefined;
            WebkitAnimationPlayState?: csstype.Property.AnimationPlayState | undefined;
            WebkitAnimationTimingFunction?: csstype.Property.AnimationTimingFunction | undefined;
            WebkitAppearance?: csstype.Property.WebkitAppearance | undefined;
            WebkitBackdropFilter?: csstype.Property.BackdropFilter | undefined;
            WebkitBackfaceVisibility?: csstype.Property.BackfaceVisibility | undefined;
            WebkitBackgroundClip?: csstype.Property.BackgroundClip | undefined;
            WebkitBackgroundOrigin?: csstype.Property.BackgroundOrigin | undefined;
            WebkitBackgroundSize?: csstype.Property.BackgroundSize<string | number> | undefined;
            WebkitBorderBeforeColor?: csstype.Property.WebkitBorderBeforeColor | undefined;
            WebkitBorderBeforeStyle?: csstype.Property.WebkitBorderBeforeStyle | undefined;
            WebkitBorderBeforeWidth?: csstype.Property.WebkitBorderBeforeWidth<string | number> | undefined;
            WebkitBorderBottomLeftRadius?: csstype.Property.BorderBottomLeftRadius<string | number> | undefined;
            WebkitBorderBottomRightRadius?: csstype.Property.BorderBottomRightRadius<string | number> | undefined;
            WebkitBorderImageSlice?: csstype.Property.BorderImageSlice | undefined;
            WebkitBorderTopLeftRadius?: csstype.Property.BorderTopLeftRadius<string | number> | undefined;
            WebkitBorderTopRightRadius?: csstype.Property.BorderTopRightRadius<string | number> | undefined;
            WebkitBoxDecorationBreak?: csstype.Property.BoxDecorationBreak | undefined;
            WebkitBoxReflect?: csstype.Property.WebkitBoxReflect<string | number> | undefined;
            WebkitBoxShadow?: csstype.Property.BoxShadow | undefined;
            WebkitBoxSizing?: csstype.Property.BoxSizing | undefined;
            WebkitClipPath?: csstype.Property.ClipPath | undefined;
            WebkitColumnCount?: csstype.Property.ColumnCount | undefined;
            WebkitColumnFill?: csstype.Property.ColumnFill | undefined;
            WebkitColumnRuleColor?: csstype.Property.ColumnRuleColor | undefined;
            WebkitColumnRuleStyle?: csstype.Property.ColumnRuleStyle | undefined;
            WebkitColumnRuleWidth?: csstype.Property.ColumnRuleWidth<string | number> | undefined;
            WebkitColumnSpan?: csstype.Property.ColumnSpan | undefined;
            WebkitColumnWidth?: csstype.Property.ColumnWidth<string | number> | undefined;
            WebkitFilter?: csstype.Property.Filter | undefined;
            WebkitFlexBasis?: csstype.Property.FlexBasis<string | number> | undefined;
            WebkitFlexDirection?: csstype.Property.FlexDirection | undefined;
            WebkitFlexGrow?: csstype.Property.FlexGrow | undefined;
            WebkitFlexShrink?: csstype.Property.FlexShrink | undefined;
            WebkitFlexWrap?: csstype.Property.FlexWrap | undefined;
            WebkitFontFeatureSettings?: csstype.Property.FontFeatureSettings | undefined;
            WebkitFontKerning?: csstype.Property.FontKerning | undefined;
            WebkitFontSmoothing?: csstype.Property.FontSmooth<string | number> | undefined;
            WebkitFontVariantLigatures?: csstype.Property.FontVariantLigatures | undefined;
            WebkitHyphenateCharacter?: csstype.Property.HyphenateCharacter | undefined;
            WebkitHyphens?: csstype.Property.Hyphens | undefined;
            WebkitInitialLetter?: csstype.Property.InitialLetter | undefined;
            WebkitJustifyContent?: csstype.Property.JustifyContent | undefined;
            WebkitLineBreak?: csstype.Property.LineBreak | undefined;
            WebkitLineClamp?: csstype.Property.WebkitLineClamp | undefined;
            WebkitMarginEnd?: csstype.Property.MarginInlineEnd<string | number> | undefined;
            WebkitMarginStart?: csstype.Property.MarginInlineStart<string | number> | undefined;
            WebkitMaskAttachment?: csstype.Property.WebkitMaskAttachment | undefined;
            WebkitMaskBoxImageOutset?: csstype.Property.MaskBorderOutset<string | number> | undefined;
            WebkitMaskBoxImageRepeat?: csstype.Property.MaskBorderRepeat | undefined;
            WebkitMaskBoxImageSlice?: csstype.Property.MaskBorderSlice | undefined;
            WebkitMaskBoxImageSource?: csstype.Property.MaskBorderSource | undefined;
            WebkitMaskBoxImageWidth?: csstype.Property.MaskBorderWidth<string | number> | undefined;
            WebkitMaskClip?: csstype.Property.WebkitMaskClip | undefined;
            WebkitMaskComposite?: csstype.Property.WebkitMaskComposite | undefined;
            WebkitMaskImage?: csstype.Property.WebkitMaskImage | undefined;
            WebkitMaskOrigin?: csstype.Property.WebkitMaskOrigin | undefined;
            WebkitMaskPosition?: csstype.Property.WebkitMaskPosition<string | number> | undefined;
            WebkitMaskPositionX?: csstype.Property.WebkitMaskPositionX<string | number> | undefined;
            WebkitMaskPositionY?: csstype.Property.WebkitMaskPositionY<string | number> | undefined;
            WebkitMaskRepeat?: csstype.Property.WebkitMaskRepeat | undefined;
            WebkitMaskRepeatX?: csstype.Property.WebkitMaskRepeatX | undefined;
            WebkitMaskRepeatY?: csstype.Property.WebkitMaskRepeatY | undefined;
            WebkitMaskSize?: csstype.Property.WebkitMaskSize<string | number> | undefined;
            WebkitMaxInlineSize?: csstype.Property.MaxInlineSize<string | number> | undefined;
            WebkitOrder?: csstype.Property.Order | undefined;
            WebkitOverflowScrolling?: csstype.Property.WebkitOverflowScrolling | undefined;
            WebkitPaddingEnd?: csstype.Property.PaddingInlineEnd<string | number> | undefined;
            WebkitPaddingStart?: csstype.Property.PaddingInlineStart<string | number> | undefined;
            WebkitPerspective?: csstype.Property.Perspective<string | number> | undefined;
            WebkitPerspectiveOrigin?: csstype.Property.PerspectiveOrigin<string | number> | undefined;
            WebkitPrintColorAdjust?: csstype.Property.PrintColorAdjust | undefined;
            WebkitRubyPosition?: csstype.Property.RubyPosition | undefined;
            WebkitScrollSnapType?: csstype.Property.ScrollSnapType | undefined;
            WebkitShapeMargin?: csstype.Property.ShapeMargin<string | number> | undefined;
            WebkitTapHighlightColor?: csstype.Property.WebkitTapHighlightColor | undefined;
            WebkitTextCombine?: csstype.Property.TextCombineUpright | undefined;
            WebkitTextDecorationColor?: csstype.Property.TextDecorationColor | undefined;
            WebkitTextDecorationLine?: csstype.Property.TextDecorationLine | undefined;
            WebkitTextDecorationSkip?: csstype.Property.TextDecorationSkip | undefined;
            WebkitTextDecorationStyle?: csstype.Property.TextDecorationStyle | undefined;
            WebkitTextEmphasisColor?: csstype.Property.TextEmphasisColor | undefined;
            WebkitTextEmphasisPosition?: csstype.Property.TextEmphasisPosition | undefined;
            WebkitTextEmphasisStyle?: csstype.Property.TextEmphasisStyle | undefined;
            WebkitTextFillColor?: csstype.Property.WebkitTextFillColor | undefined;
            WebkitTextOrientation?: csstype.Property.TextOrientation | undefined;
            WebkitTextSizeAdjust?: csstype.Property.TextSizeAdjust | undefined;
            WebkitTextStrokeColor?: csstype.Property.WebkitTextStrokeColor | undefined;
            WebkitTextStrokeWidth?: csstype.Property.WebkitTextStrokeWidth<string | number> | undefined;
            WebkitTextUnderlinePosition?: csstype.Property.TextUnderlinePosition | undefined;
            WebkitTouchCallout?: csstype.Property.WebkitTouchCallout | undefined;
            WebkitTransform?: csstype.Property.Transform | undefined;
            WebkitTransformOrigin?: csstype.Property.TransformOrigin<string | number> | undefined;
            WebkitTransformStyle?: csstype.Property.TransformStyle | undefined;
            WebkitTransitionDelay?: csstype.Property.TransitionDelay<string & {}> | undefined;
            WebkitTransitionDuration?: csstype.Property.TransitionDuration<string & {}> | undefined;
            WebkitTransitionProperty?: csstype.Property.TransitionProperty | undefined;
            WebkitTransitionTimingFunction?: csstype.Property.TransitionTimingFunction | undefined;
            WebkitUserModify?: csstype.Property.WebkitUserModify | undefined;
            WebkitUserSelect?: csstype.Property.UserSelect | undefined;
            WebkitWritingMode?: csstype.Property.WritingMode | undefined;
            MozAnimation?: csstype.Property.Animation<string & {}> | undefined;
            MozBorderImage?: csstype.Property.BorderImage | undefined;
            MozColumnRule?: csstype.Property.ColumnRule<string | number> | undefined;
            MozColumns?: csstype.Property.Columns<string | number> | undefined;
            MozOutlineRadius?: csstype.Property.MozOutlineRadius<string | number> | undefined;
            msContentZoomLimit?: csstype.Property.MsContentZoomLimit | undefined;
            msContentZoomSnap?: csstype.Property.MsContentZoomSnap | undefined;
            msFlex?: csstype.Property.Flex<string | number> | undefined;
            msScrollLimit?: csstype.Property.MsScrollLimit | undefined;
            msScrollSnapX?: csstype.Property.MsScrollSnapX | undefined;
            msScrollSnapY?: csstype.Property.MsScrollSnapY | undefined;
            msTransition?: csstype.Property.Transition<string & {}> | undefined;
            WebkitAnimation?: csstype.Property.Animation<string & {}> | undefined;
            WebkitBorderBefore?: csstype.Property.WebkitBorderBefore<string | number> | undefined;
            WebkitBorderImage?: csstype.Property.BorderImage | undefined;
            WebkitBorderRadius?: csstype.Property.BorderRadius<string | number> | undefined;
            WebkitColumnRule?: csstype.Property.ColumnRule<string | number> | undefined;
            WebkitColumns?: csstype.Property.Columns<string | number> | undefined;
            WebkitFlex?: csstype.Property.Flex<string | number> | undefined;
            WebkitFlexFlow?: csstype.Property.FlexFlow | undefined;
            WebkitMask?: csstype.Property.WebkitMask<string | number> | undefined;
            WebkitMaskBoxImage?: csstype.Property.MaskBorder | undefined;
            WebkitTextEmphasis?: csstype.Property.TextEmphasis | undefined;
            WebkitTextStroke?: csstype.Property.WebkitTextStroke<string | number> | undefined;
            WebkitTransition?: csstype.Property.Transition<string & {}> | undefined;
            azimuth?: csstype.Property.Azimuth | undefined;
            boxAlign?: csstype.Property.BoxAlign | undefined;
            boxDirection?: csstype.Property.BoxDirection | undefined;
            boxFlex?: csstype.Property.BoxFlex | undefined;
            boxFlexGroup?: csstype.Property.BoxFlexGroup | undefined;
            boxLines?: csstype.Property.BoxLines | undefined;
            boxOrdinalGroup?: csstype.Property.BoxOrdinalGroup | undefined;
            boxOrient?: csstype.Property.BoxOrient | undefined;
            boxPack?: csstype.Property.BoxPack | undefined;
            clip?: csstype.Property.Clip | undefined;
            gridColumnGap?: csstype.Property.GridColumnGap<string | number> | undefined;
            gridGap?: csstype.Property.GridGap<string | number> | undefined;
            gridRowGap?: csstype.Property.GridRowGap<string | number> | undefined;
            imeMode?: csstype.Property.ImeMode | undefined;
            offsetBlock?: csstype.Property.InsetBlock<string | number> | undefined;
            offsetBlockEnd?: csstype.Property.InsetBlockEnd<string | number> | undefined;
            offsetBlockStart?: csstype.Property.InsetBlockStart<string | number> | undefined;
            offsetInline?: csstype.Property.InsetInline<string | number> | undefined;
            offsetInlineEnd?: csstype.Property.InsetInlineEnd<string | number> | undefined;
            offsetInlineStart?: csstype.Property.InsetInlineStart<string | number> | undefined;
            scrollSnapCoordinate?: csstype.Property.ScrollSnapCoordinate<string | number> | undefined;
            scrollSnapDestination?: csstype.Property.ScrollSnapDestination<string | number> | undefined;
            scrollSnapPointsX?: csstype.Property.ScrollSnapPointsX | undefined;
            scrollSnapPointsY?: csstype.Property.ScrollSnapPointsY | undefined;
            scrollSnapTypeX?: csstype.Property.ScrollSnapTypeX | undefined;
            scrollSnapTypeY?: csstype.Property.ScrollSnapTypeY | undefined;
            KhtmlBoxAlign?: csstype.Property.BoxAlign | undefined;
            KhtmlBoxDirection?: csstype.Property.BoxDirection | undefined;
            KhtmlBoxFlex?: csstype.Property.BoxFlex | undefined;
            KhtmlBoxFlexGroup?: csstype.Property.BoxFlexGroup | undefined;
            KhtmlBoxLines?: csstype.Property.BoxLines | undefined;
            KhtmlBoxOrdinalGroup?: csstype.Property.BoxOrdinalGroup | undefined;
            KhtmlBoxOrient?: csstype.Property.BoxOrient | undefined;
            KhtmlBoxPack?: csstype.Property.BoxPack | undefined;
            KhtmlLineBreak?: csstype.Property.LineBreak | undefined;
            KhtmlOpacity?: csstype.Property.Opacity | undefined;
            KhtmlUserSelect?: csstype.Property.UserSelect | undefined;
            MozBackfaceVisibility?: csstype.Property.BackfaceVisibility | undefined;
            MozBackgroundClip?: csstype.Property.BackgroundClip | undefined;
            MozBackgroundInlinePolicy?: csstype.Property.BoxDecorationBreak | undefined;
            MozBackgroundOrigin?: csstype.Property.BackgroundOrigin | undefined;
            MozBackgroundSize?: csstype.Property.BackgroundSize<string | number> | undefined;
            MozBorderRadius?: csstype.Property.BorderRadius<string | number> | undefined;
            MozBorderRadiusBottomleft?: csstype.Property.BorderBottomLeftRadius<string | number> | undefined;
            MozBorderRadiusBottomright?: csstype.Property.BorderBottomRightRadius<string | number> | undefined;
            MozBorderRadiusTopleft?: csstype.Property.BorderTopLeftRadius<string | number> | undefined;
            MozBorderRadiusTopright?: csstype.Property.BorderTopRightRadius<string | number> | undefined;
            MozBoxAlign?: csstype.Property.BoxAlign | undefined;
            MozBoxDirection?: csstype.Property.BoxDirection | undefined;
            MozBoxFlex?: csstype.Property.BoxFlex | undefined;
            MozBoxOrdinalGroup?: csstype.Property.BoxOrdinalGroup | undefined;
            MozBoxOrient?: csstype.Property.BoxOrient | undefined;
            MozBoxPack?: csstype.Property.BoxPack | undefined;
            MozBoxShadow?: csstype.Property.BoxShadow | undefined;
            MozFloatEdge?: csstype.Property.MozFloatEdge | undefined;
            MozForceBrokenImageIcon?: csstype.Property.MozForceBrokenImageIcon | undefined;
            MozOpacity?: csstype.Property.Opacity | undefined;
            MozOutline?: csstype.Property.Outline<string | number> | undefined;
            MozOutlineColor?: csstype.Property.OutlineColor | undefined;
            MozOutlineStyle?: csstype.Property.OutlineStyle | undefined;
            MozOutlineWidth?: csstype.Property.OutlineWidth<string | number> | undefined;
            MozPerspective?: csstype.Property.Perspective<string | number> | undefined;
            MozPerspectiveOrigin?: csstype.Property.PerspectiveOrigin<string | number> | undefined;
            MozTextAlignLast?: csstype.Property.TextAlignLast | undefined;
            MozTextDecorationColor?: csstype.Property.TextDecorationColor | undefined;
            MozTextDecorationLine?: csstype.Property.TextDecorationLine | undefined;
            MozTextDecorationStyle?: csstype.Property.TextDecorationStyle | undefined;
            MozTransform?: csstype.Property.Transform | undefined;
            MozTransformOrigin?: csstype.Property.TransformOrigin<string | number> | undefined;
            MozTransformStyle?: csstype.Property.TransformStyle | undefined;
            MozTransition?: csstype.Property.Transition<string & {}> | undefined;
            MozTransitionDelay?: csstype.Property.TransitionDelay<string & {}> | undefined;
            MozTransitionDuration?: csstype.Property.TransitionDuration<string & {}> | undefined;
            MozTransitionProperty?: csstype.Property.TransitionProperty | undefined;
            MozTransitionTimingFunction?: csstype.Property.TransitionTimingFunction | undefined;
            MozUserInput?: csstype.Property.MozUserInput | undefined;
            msImeMode?: csstype.Property.ImeMode | undefined;
            OAnimation?: csstype.Property.Animation<string & {}> | undefined;
            OAnimationDelay?: csstype.Property.AnimationDelay<string & {}> | undefined;
            OAnimationDirection?: csstype.Property.AnimationDirection | undefined;
            OAnimationDuration?: csstype.Property.AnimationDuration<string & {}> | undefined;
            OAnimationFillMode?: csstype.Property.AnimationFillMode | undefined;
            OAnimationIterationCount?: csstype.Property.AnimationIterationCount | undefined;
            OAnimationName?: csstype.Property.AnimationName | undefined;
            OAnimationPlayState?: csstype.Property.AnimationPlayState | undefined;
            OAnimationTimingFunction?: csstype.Property.AnimationTimingFunction | undefined;
            OBackgroundSize?: csstype.Property.BackgroundSize<string | number> | undefined;
            OBorderImage?: csstype.Property.BorderImage | undefined;
            OObjectFit?: csstype.Property.ObjectFit | undefined;
            OObjectPosition?: csstype.Property.ObjectPosition<string | number> | undefined;
            OTabSize?: csstype.Property.TabSize<string | number> | undefined;
            OTextOverflow?: csstype.Property.TextOverflow | undefined;
            OTransform?: csstype.Property.Transform | undefined;
            OTransformOrigin?: csstype.Property.TransformOrigin<string | number> | undefined;
            OTransition?: csstype.Property.Transition<string & {}> | undefined;
            OTransitionDelay?: csstype.Property.TransitionDelay<string & {}> | undefined;
            OTransitionDuration?: csstype.Property.TransitionDuration<string & {}> | undefined;
            OTransitionProperty?: csstype.Property.TransitionProperty | undefined;
            OTransitionTimingFunction?: csstype.Property.TransitionTimingFunction | undefined;
            WebkitBoxAlign?: csstype.Property.BoxAlign | undefined;
            WebkitBoxDirection?: csstype.Property.BoxDirection | undefined;
            WebkitBoxFlex?: csstype.Property.BoxFlex | undefined;
            WebkitBoxFlexGroup?: csstype.Property.BoxFlexGroup | undefined;
            WebkitBoxLines?: csstype.Property.BoxLines | undefined;
            WebkitBoxOrdinalGroup?: csstype.Property.BoxOrdinalGroup | undefined;
            WebkitBoxOrient?: csstype.Property.BoxOrient | undefined;
            WebkitBoxPack?: csstype.Property.BoxPack | undefined;
            alignmentBaseline?: csstype.Property.AlignmentBaseline | undefined;
            baselineShift?: csstype.Property.BaselineShift<string | number> | undefined;
            clipRule?: csstype.Property.ClipRule | undefined;
            colorInterpolation?: csstype.Property.ColorInterpolation | undefined;
            colorRendering?: csstype.Property.ColorRendering | undefined;
            dominantBaseline?: csstype.Property.DominantBaseline | undefined;
            fill?: csstype.Property.Fill | undefined;
            fillOpacity?: csstype.Property.FillOpacity | undefined;
            fillRule?: csstype.Property.FillRule | undefined;
            floodColor?: csstype.Property.FloodColor | undefined;
            floodOpacity?: csstype.Property.FloodOpacity | undefined;
            glyphOrientationVertical?: csstype.Property.GlyphOrientationVertical | undefined;
            lightingColor?: csstype.Property.LightingColor | undefined;
            marker?: csstype.Property.Marker | undefined;
            markerEnd?: csstype.Property.MarkerEnd | undefined;
            markerMid?: csstype.Property.MarkerMid | undefined;
            markerStart?: csstype.Property.MarkerStart | undefined;
            shapeRendering?: csstype.Property.ShapeRendering | undefined;
            stopColor?: csstype.Property.StopColor | undefined;
            stopOpacity?: csstype.Property.StopOpacity | undefined;
            stroke?: csstype.Property.Stroke | undefined;
            strokeDasharray?: csstype.Property.StrokeDasharray<string | number> | undefined;
            strokeDashoffset?: csstype.Property.StrokeDashoffset<string | number> | undefined;
            strokeLinecap?: csstype.Property.StrokeLinecap | undefined;
            strokeLinejoin?: csstype.Property.StrokeLinejoin | undefined;
            strokeMiterlimit?: csstype.Property.StrokeMiterlimit | undefined;
            strokeOpacity?: csstype.Property.StrokeOpacity | undefined;
            strokeWidth?: csstype.Property.StrokeWidth<string | number> | undefined;
            textAnchor?: csstype.Property.TextAnchor | undefined;
            vectorEffect?: csstype.Property.VectorEffect | undefined;
        };
    };
    ref: (node: HTMLDivElement) => void;
    textInputProps: {
        defaultValue: string;
        onChange: React__default.ChangeEventHandler<HTMLInputElement>;
        ref: (el: HTMLInputElement) => void;
    };
};

declare const useVirtualFloatingLink: ({ editorId, ...floatingOptions }: {
    editorId: string;
} & UseVirtualFloatingOptions) => _udecode_plate_floating.UseVirtualFloatingReturn<_udecode_plate_floating.ReferenceType>;

interface CreateLinkNodeOptions {
    url: string;
    children?: TText[];
    target?: string;
    text?: string;
}
declare const createLinkNode: <V extends Value>(editor: PlateEditor<V>, { children, target, text, url }: CreateLinkNodeOptions) => TLinkElement;

/**
 * If a URL has not already been encoded and contains characters that require
 * encoding, encode the URL.
 *
 * @param url URL to encode
 */
declare const encodeUrlIfNeeded: (url: string) => string;

declare const getLinkAttributes: <V extends Value>(editor: PlateEditor<V>, link: TLinkElement) => {
    download?: any;
    href?: string | undefined;
    hrefLang?: string | undefined;
    media?: string | undefined;
    ping?: string | undefined;
    target?: React$1.HTMLAttributeAnchorTarget | undefined;
    type?: string | undefined;
    referrerPolicy?: React$1.HTMLAttributeReferrerPolicy | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    autoFocus?: boolean | undefined;
    className?: string | undefined;
    contentEditable?: (boolean | "true" | "false") | "inherit" | "plaintext-only" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    hidden?: boolean | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    nonce?: string | undefined;
    slot?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    style?: React$1.CSSProperties | undefined;
    tabIndex?: number | undefined;
    title?: string | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    role?: React$1.AriaRole | undefined;
    about?: string | undefined;
    content?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    rel?: string | undefined;
    resource?: string | undefined;
    rev?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "url" | "text" | "none" | "search" | "tel" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "true" | "false") | undefined;
    "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "true" | "false") | undefined;
    "aria-checked"?: boolean | "true" | "false" | "mixed" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "true" | "false" | "page" | "step" | "location" | "date" | "time" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "true" | "false") | undefined;
    "aria-dropeffect"?: "move" | "link" | "none" | "copy" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "true" | "false") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "true" | "false") | undefined;
    "aria-haspopup"?: boolean | "true" | "false" | "dialog" | "grid" | "listbox" | "menu" | "tree" | undefined;
    "aria-hidden"?: (boolean | "true" | "false") | undefined;
    "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "true" | "false") | undefined;
    "aria-multiline"?: (boolean | "true" | "false") | undefined;
    "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "true" | "false" | "mixed" | undefined;
    "aria-readonly"?: (boolean | "true" | "false") | undefined;
    "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "true" | "false") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "true" | "false") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    children?: React$1.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    } | undefined;
    onCopy?: React$1.ClipboardEventHandler<HTMLAnchorElement> | undefined;
    onCopyCapture?: React$1.ClipboardEventHandler<HTMLAnchorElement> | undefined;
    onCut?: React$1.ClipboardEventHandler<HTMLAnchorElement> | undefined;
    onCutCapture?: React$1.ClipboardEventHandler<HTMLAnchorElement> | undefined;
    onPaste?: React$1.ClipboardEventHandler<HTMLAnchorElement> | undefined;
    onPasteCapture?: React$1.ClipboardEventHandler<HTMLAnchorElement> | undefined;
    onCompositionEnd?: React$1.CompositionEventHandler<HTMLAnchorElement> | undefined;
    onCompositionEndCapture?: React$1.CompositionEventHandler<HTMLAnchorElement> | undefined;
    onCompositionStart?: React$1.CompositionEventHandler<HTMLAnchorElement> | undefined;
    onCompositionStartCapture?: React$1.CompositionEventHandler<HTMLAnchorElement> | undefined;
    onCompositionUpdate?: React$1.CompositionEventHandler<HTMLAnchorElement> | undefined;
    onCompositionUpdateCapture?: React$1.CompositionEventHandler<HTMLAnchorElement> | undefined;
    onFocus?: React$1.FocusEventHandler<HTMLAnchorElement> | undefined;
    onFocusCapture?: React$1.FocusEventHandler<HTMLAnchorElement> | undefined;
    onBlur?: React$1.FocusEventHandler<HTMLAnchorElement> | undefined;
    onBlurCapture?: React$1.FocusEventHandler<HTMLAnchorElement> | undefined;
    onChange?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
    onChangeCapture?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
    onBeforeInput?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
    onBeforeInputCapture?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
    onInput?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
    onInputCapture?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
    onReset?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
    onResetCapture?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
    onSubmit?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
    onSubmitCapture?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
    onInvalid?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
    onInvalidCapture?: React$1.FormEventHandler<HTMLAnchorElement> | undefined;
    onLoad?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onLoadCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onError?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onErrorCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onKeyDown?: React$1.KeyboardEventHandler<HTMLAnchorElement> | undefined;
    onKeyDownCapture?: React$1.KeyboardEventHandler<HTMLAnchorElement> | undefined;
    onKeyPress?: React$1.KeyboardEventHandler<HTMLAnchorElement> | undefined;
    onKeyPressCapture?: React$1.KeyboardEventHandler<HTMLAnchorElement> | undefined;
    onKeyUp?: React$1.KeyboardEventHandler<HTMLAnchorElement> | undefined;
    onKeyUpCapture?: React$1.KeyboardEventHandler<HTMLAnchorElement> | undefined;
    onAbort?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onAbortCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onCanPlay?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onCanPlayCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onCanPlayThrough?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onCanPlayThroughCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onDurationChange?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onDurationChangeCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onEmptied?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onEmptiedCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onEncrypted?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onEncryptedCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onEnded?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onEndedCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onLoadedData?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onLoadedDataCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onLoadedMetadata?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onLoadedMetadataCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onLoadStart?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onLoadStartCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onPause?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onPauseCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onPlay?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onPlayCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onPlaying?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onPlayingCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onProgress?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onProgressCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onRateChange?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onRateChangeCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onResize?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onResizeCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onSeeked?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onSeekedCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onSeeking?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onSeekingCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onStalled?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onStalledCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onSuspend?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onSuspendCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onTimeUpdate?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onTimeUpdateCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onVolumeChange?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onVolumeChangeCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onWaiting?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onWaitingCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onAuxClick?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onAuxClickCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onClick?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onClickCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onContextMenu?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onContextMenuCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onDoubleClick?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onDoubleClickCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onDrag?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragEnd?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragEndCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragEnter?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragEnterCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragExit?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragExitCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragLeave?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragLeaveCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragOver?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragOverCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragStart?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDragStartCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDrop?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onDropCapture?: React$1.DragEventHandler<HTMLAnchorElement> | undefined;
    onMouseDown?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseDownCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseEnter?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseLeave?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseMove?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseMoveCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseOut?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseOutCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseOver?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseOverCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseUp?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onMouseUpCapture?: React$1.MouseEventHandler<HTMLAnchorElement> | undefined;
    onSelect?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onSelectCapture?: React$1.ReactEventHandler<HTMLAnchorElement> | undefined;
    onTouchCancel?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
    onTouchCancelCapture?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
    onTouchEnd?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
    onTouchEndCapture?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
    onTouchMove?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
    onTouchMoveCapture?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
    onTouchStart?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
    onTouchStartCapture?: React$1.TouchEventHandler<HTMLAnchorElement> | undefined;
    onPointerDown?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerDownCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerMove?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerMoveCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerUp?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerUpCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerCancel?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerCancelCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerEnter?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerLeave?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerOver?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerOverCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerOut?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onPointerOutCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onGotPointerCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onGotPointerCaptureCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onLostPointerCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onLostPointerCaptureCapture?: React$1.PointerEventHandler<HTMLAnchorElement> | undefined;
    onScroll?: React$1.UIEventHandler<HTMLAnchorElement> | undefined;
    onScrollCapture?: React$1.UIEventHandler<HTMLAnchorElement> | undefined;
    onWheel?: React$1.WheelEventHandler<HTMLAnchorElement> | undefined;
    onWheelCapture?: React$1.WheelEventHandler<HTMLAnchorElement> | undefined;
    onAnimationStart?: React$1.AnimationEventHandler<HTMLAnchorElement> | undefined;
    onAnimationStartCapture?: React$1.AnimationEventHandler<HTMLAnchorElement> | undefined;
    onAnimationEnd?: React$1.AnimationEventHandler<HTMLAnchorElement> | undefined;
    onAnimationEndCapture?: React$1.AnimationEventHandler<HTMLAnchorElement> | undefined;
    onAnimationIteration?: React$1.AnimationEventHandler<HTMLAnchorElement> | undefined;
    onAnimationIterationCapture?: React$1.AnimationEventHandler<HTMLAnchorElement> | undefined;
    onTransitionEnd?: React$1.TransitionEventHandler<HTMLAnchorElement> | undefined;
    onTransitionEndCapture?: React$1.TransitionEventHandler<HTMLAnchorElement> | undefined;
};

declare const safeDecodeUrl: (url: string) => string;

declare const triggerFloatingLink: <V extends Value>(editor: PlateEditor<V>, { focused, }?: {
    focused?: boolean | undefined;
}) => void;

declare const triggerFloatingLinkEdit: <V extends Value>(editor: PlateEditor<V>) => true | undefined;

/**
 * Trigger floating link.
 *
 * Do not trigger when:
 *
 * - Selection is across blocks
 * - Selection has more than one leaf node
 * - Lowest selection is not text
 * - Selection has a link node
 */
declare const triggerFloatingLinkInsert: <V extends Value>(editor: PlateEditor<V>, { focused, }?: {
    focused?: boolean | undefined;
}) => true | undefined;

declare const validateUrl: <V extends Value>(editor: PlateEditor<V>, url: string) => boolean;

/** Insert a link node. */
declare const insertLink: <V extends Value>(editor: PlateEditor<V>, createLinkNodeOptions: CreateLinkNodeOptions, options?: InsertNodesOptions<V>) => void;

/**
 * Insert link if url is valid. Text is url if empty. Close floating link. Focus
 * editor.
 */
declare const submitFloatingLink: <V extends Value>(editor: PlateEditor<V>) => true | undefined;

/** Unwrap link node. */
declare const unwrapLink: <V extends Value>(editor: PlateEditor<V>, options?: {
    split?: boolean;
} & UnwrapNodesOptions) => boolean;

type UpsertLinkOptions<V extends Value = Value> = {
    insertNodesOptions?: InsertNodesOptions<V>;
    /** If true, insert text when selection is in url. */
    insertTextInLink?: boolean;
    skipValidation?: boolean;
    unwrapNodesOptions?: UnwrapNodesOptions<V>;
    wrapNodesOptions?: WrapNodesOptions<V>;
} & CreateLinkNodeOptions;
/**
 * If selection in a link or is not url:
 *
 * - Insert text with url, exit If selection is expanded or `update` in a link:
 * - Remove link node, get link text Then:
 * - Insert link node
 */
declare const upsertLink: <V extends Value>(editor: PlateEditor<V>, { insertNodesOptions, insertTextInLink, skipValidation, target, text, url, }: UpsertLinkOptions<V>) => true | undefined;

/**
 * If the text is different than the link above text, replace link children by a
 * new text. The new text has the same marks than the first text replaced.
 */
declare const upsertLinkText: <V extends Value>(editor: PlateEditor<V>, { text }: UpsertLinkOptions<V>) => void;

interface WrapLinkOptions<V extends Value = Value> extends WrapNodesOptions<V> {
    url: string;
    target?: string;
}
/** Wrap a link node with split. */
declare const wrapLink: <V extends Value>(editor: PlateEditor<V>, { target, url, ...options }: WrapLinkOptions<V>) => void;

export { type CreateLinkNodeOptions, ELEMENT_LINK, type FloatingLinkMode, FloatingLinkNewTabInput, FloatingLinkUrlInput, type LinkFloatingToolbarState, LinkOpenButton, type LinkPlugin, type TLinkElement, type UpsertLinkOptions, type WrapLinkOptions, createLinkNode, createLinkPlugin, encodeUrlIfNeeded, floatingLinkActions, floatingLinkSelectors, floatingLinkStore, getLinkAttributes, insertLink, safeDecodeUrl, submitFloatingLink, triggerFloatingLink, triggerFloatingLinkEdit, triggerFloatingLinkInsert, unwrapLink, upsertLink, upsertLinkText, useFloatingLinkEdit, useFloatingLinkEditState, useFloatingLinkEnter, useFloatingLinkEscape, useFloatingLinkInsert, useFloatingLinkInsertState, useFloatingLinkNewTabInput, useFloatingLinkNewTabInputState, useFloatingLinkSelectors, useFloatingLinkUrlInput, useFloatingLinkUrlInputState, useLink, useLinkOpenButton, useLinkOpenButtonState, useLinkToolbarButton, useLinkToolbarButtonState, useVirtualFloatingLink, validateUrl, withLink, wrapLink };
