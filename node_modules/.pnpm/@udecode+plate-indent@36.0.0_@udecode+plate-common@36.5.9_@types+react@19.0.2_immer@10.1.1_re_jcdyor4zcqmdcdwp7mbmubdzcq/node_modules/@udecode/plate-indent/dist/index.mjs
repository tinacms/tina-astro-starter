var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/createIndentPlugin.ts
import {
  ELEMENT_DEFAULT,
  createPluginFactory,
  getPluginType
} from "@udecode/plate-common/server";

// src/onKeyDownIndent.ts
import { Hotkeys } from "@udecode/plate-common";

// src/transforms/setIndent.ts
import {
  getNodeEntries,
  getPluginInjectProps,
  setElements,
  unsetNodes,
  withoutNormalizing
} from "@udecode/plate-common/server";
var setIndent = (editor, {
  getNodesOptions,
  offset = 1,
  setNodesProps,
  unsetNodesProps = []
}) => {
  const { nodeKey } = getPluginInjectProps(editor, KEY_INDENT);
  const _nodes = getNodeEntries(editor, __spreadValues({
    block: true,
    mode: "lowest"
  }, getNodesOptions));
  const nodes = Array.from(_nodes);
  withoutNormalizing(editor, () => {
    nodes.forEach(([node, path]) => {
      var _a, _b;
      const blockIndent = (_a = node[nodeKey]) != null ? _a : 0;
      const newIndent = blockIndent + offset;
      const props = (_b = setNodesProps == null ? void 0 : setNodesProps({ indent: newIndent })) != null ? _b : {};
      if (newIndent <= 0) {
        unsetNodes(editor, [nodeKey, ...unsetNodesProps], {
          at: path
        });
      } else {
        setElements(editor, __spreadValues({ [nodeKey]: newIndent }, props), { at: path });
      }
    });
  });
};

// src/transforms/indent.ts
var indent = (editor, options) => {
  setIndent(editor, __spreadValues({ offset: 1 }, options));
};

// src/transforms/outdent.ts
var outdent = (editor, options) => {
  setIndent(editor, __spreadValues({ offset: -1 }, options));
};

// src/onKeyDownIndent.ts
var onKeyDownIndent = (editor) => (e) => {
  if (e.defaultPrevented)
    return;
  if (Hotkeys.isTab(editor, e)) {
    e.preventDefault();
    indent(editor);
  }
  if (Hotkeys.isUntab(editor, e)) {
    e.preventDefault();
    outdent(editor);
  }
};

// src/withIndent.ts
import {
  setElements as setElements2,
  unsetNodes as unsetNodes2
} from "@udecode/plate-common/server";
var withIndent = (editor, {
  inject: { props: { validTypes } = {} },
  options: { indentMax }
}) => {
  const { normalizeNode } = editor;
  editor.normalizeNode = ([node, path]) => {
    const element = node;
    const { type } = element;
    if (type) {
      if (validTypes.includes(type)) {
        if (indentMax && element.indent && element.indent > indentMax) {
          setElements2(editor, { indent: indentMax }, { at: path });
          return;
        }
      } else if (element.indent) {
        unsetNodes2(editor, "indent", { at: path });
        return;
      }
    }
    return normalizeNode([node, path]);
  };
  return editor;
};

// src/createIndentPlugin.ts
var KEY_INDENT = "indent";
var createIndentPlugin = createPluginFactory({
  handlers: {
    onKeyDown: onKeyDownIndent
  },
  key: KEY_INDENT,
  options: {
    offset: 24,
    unit: "px"
  },
  then: (editor, { options: { offset, unit } = {} }) => ({
    inject: {
      props: {
        nodeKey: KEY_INDENT,
        styleKey: "marginLeft",
        transformNodeValue: ({ nodeValue }) => nodeValue * offset + unit,
        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)]
      }
    }
  }),
  withOverrides: withIndent
});

// src/createTextIndentPlugin.ts
import {
  ELEMENT_DEFAULT as ELEMENT_DEFAULT2,
  createPluginFactory as createPluginFactory2,
  getPluginType as getPluginType2
} from "@udecode/plate-common/server";
var KEY_TEXT_INDENT = "textIndent";
var createTextIndentPlugin = createPluginFactory2({
  key: KEY_TEXT_INDENT,
  options: {
    offset: 24,
    unit: "px"
  },
  then: (editor, { options: { offset, unit } = {} }) => ({
    inject: {
      props: {
        nodeKey: KEY_TEXT_INDENT,
        styleKey: "textIndent",
        transformNodeValue({ nodeValue }) {
          return nodeValue * offset + unit;
        },
        validTypes: [getPluginType2(editor, ELEMENT_DEFAULT2)]
      }
    }
  })
});

// src/hooks/useIndentButton.ts
import { useEditorRef } from "@udecode/plate-common";
var useIndentButton = () => {
  const editor = useEditorRef();
  return {
    props: {
      onClick: () => {
        indent(editor);
      },
      onMouseDown: (e) => {
        e.preventDefault();
      }
    }
  };
};

// src/hooks/useOutdentButton.ts
import { useEditorRef as useEditorRef2 } from "@udecode/plate-common";
var useOutdentButton = () => {
  const editor = useEditorRef2();
  return {
    props: {
      onClick: () => {
        outdent(editor);
      },
      onMouseDown: (e) => {
        e.preventDefault();
      }
    }
  };
};
export {
  KEY_INDENT,
  KEY_TEXT_INDENT,
  createIndentPlugin,
  createTextIndentPlugin,
  indent,
  onKeyDownIndent,
  outdent,
  setIndent,
  useIndentButton,
  useOutdentButton,
  withIndent
};
//# sourceMappingURL=index.mjs.map