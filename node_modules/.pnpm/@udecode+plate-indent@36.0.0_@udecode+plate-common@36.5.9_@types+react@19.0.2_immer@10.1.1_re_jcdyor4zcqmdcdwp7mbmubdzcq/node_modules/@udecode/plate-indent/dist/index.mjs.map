{"version":3,"sources":["../src/createIndentPlugin.ts","../src/onKeyDownIndent.ts","../src/transforms/setIndent.ts","../src/transforms/indent.ts","../src/transforms/outdent.ts","../src/withIndent.ts","../src/createTextIndentPlugin.ts","../src/hooks/useIndentButton.ts","../src/hooks/useOutdentButton.ts"],"sourcesContent":["import {\n  ELEMENT_DEFAULT,\n  createPluginFactory,\n  getPluginType,\n} from '@udecode/plate-common/server';\n\nimport type { IndentPlugin } from './types';\n\nimport { onKeyDownIndent } from './onKeyDownIndent';\nimport { withIndent } from './withIndent';\n\nexport const KEY_INDENT = 'indent';\n\nexport const createIndentPlugin = createPluginFactory<IndentPlugin>({\n  handlers: {\n    onKeyDown: onKeyDownIndent,\n  },\n  key: KEY_INDENT,\n  options: {\n    offset: 24,\n    unit: 'px',\n  },\n  then: (editor, { options: { offset, unit } = {} }) => ({\n    inject: {\n      props: {\n        nodeKey: KEY_INDENT,\n        styleKey: 'marginLeft',\n        transformNodeValue: ({ nodeValue }) => nodeValue * offset! + unit!,\n        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],\n      },\n    },\n  }),\n  withOverrides: withIndent,\n});\n","import type {\n  KeyboardHandlerReturnType,\n  PlateEditor,\n  Value,\n} from '@udecode/plate-common/server';\n\nimport { Hotkeys } from '@udecode/plate-common';\n\nimport { indent, outdent } from './transforms/index';\n\nexport const onKeyDownIndent =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E\n  ): KeyboardHandlerReturnType =>\n  (e) => {\n    if (e.defaultPrevented) return;\n    if (Hotkeys.isTab(editor, e)) {\n      e.preventDefault();\n      indent(editor);\n    }\n    if (Hotkeys.isUntab(editor, e)) {\n      e.preventDefault();\n      outdent(editor);\n    }\n  };\n","import {\n  type AnyObject,\n  type GetNodeEntriesOptions,\n  type PlateEditor,\n  type UnhangRangeOptions,\n  type Value,\n  getNodeEntries,\n  getPluginInjectProps,\n  setElements,\n  unsetNodes,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\n\nimport { KEY_INDENT } from '../createIndentPlugin';\n\nexport interface SetIndentOptions<V extends Value = Value> {\n  /** GetNodeEntries options */\n  getNodesOptions?: GetNodeEntriesOptions<V> & UnhangRangeOptions;\n\n  /**\n   * 1 to indent -1 to outdent\n   *\n   * @default 1\n   */\n  offset?: number;\n\n  /** Set other props than the indent one. These will be unset if indent = 0. */\n  setNodesProps?: ({ indent }: { indent: number }) => AnyObject;\n\n  /** Nodes props to unset when indent = 0. */\n  unsetNodesProps?: string[];\n}\n\n/** Add offset to the indentation of the selected blocks. */\nexport const setIndent = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    getNodesOptions,\n    offset = 1,\n    setNodesProps,\n    unsetNodesProps = [],\n  }: SetIndentOptions<V>\n) => {\n  const { nodeKey } = getPluginInjectProps(editor, KEY_INDENT);\n\n  const _nodes = getNodeEntries(editor, {\n    block: true,\n    mode: 'lowest',\n    ...getNodesOptions,\n  });\n  const nodes = Array.from(_nodes);\n\n  withoutNormalizing(editor, () => {\n    nodes.forEach(([node, path]) => {\n      const blockIndent = (node[nodeKey!] as number) ?? 0;\n      const newIndent = blockIndent + offset;\n\n      const props = setNodesProps?.({ indent: newIndent }) ?? {};\n\n      if (newIndent <= 0) {\n        unsetNodes(editor, [nodeKey!, ...unsetNodesProps], {\n          at: path,\n        });\n      } else {\n        setElements(editor, { [nodeKey!]: newIndent, ...props }, { at: path });\n      }\n    });\n  });\n};\n","import type { PlateEditor, Value } from '@udecode/plate-common/server';\n\nimport { type SetIndentOptions, setIndent } from './setIndent';\n\n/** Increase the indentation of the selected blocks. */\nexport const indent = <V extends Value>(\n  editor: PlateEditor<V>,\n  options?: SetIndentOptions<V>\n) => {\n  setIndent(editor, { offset: 1, ...options });\n};\n","import type { PlateEditor, Value } from '@udecode/plate-common/server';\n\nimport { type SetIndentOptions, setIndent } from './setIndent';\n\n/** Decrease the indentation of the selected blocks. */\nexport const outdent = <V extends Value>(\n  editor: PlateEditor<V>,\n  options?: SetIndentOptions<V>\n) => {\n  setIndent(editor, { offset: -1, ...options });\n};\n","import {\n  type PlateEditor,\n  type Value,\n  type WithPlatePlugin,\n  setElements,\n  unsetNodes,\n} from '@udecode/plate-common/server';\n\nimport type { IndentPlugin, TIndentElement } from './types';\n\n/**\n * - `node.indent` can not exceed `indentMax`\n * - `node.indent` is unset if `node.type` is not in `types`\n */\nexport const withIndent = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  {\n    inject: { props: { validTypes } = {} },\n    options: { indentMax },\n  }: WithPlatePlugin<IndentPlugin, V, E>\n) => {\n  const { normalizeNode } = editor;\n\n  editor.normalizeNode = ([node, path]) => {\n    const element = node as TIndentElement;\n    const { type } = element;\n\n    if (type) {\n      if (validTypes!.includes(type)) {\n        if (indentMax && element.indent && element.indent > indentMax) {\n          setElements(editor, { indent: indentMax }, { at: path });\n\n          return;\n        }\n      } else if (element.indent) {\n        unsetNodes(editor, 'indent', { at: path });\n\n        return;\n      }\n    }\n\n    return normalizeNode([node, path]);\n  };\n\n  return editor;\n};\n","import {\n  ELEMENT_DEFAULT,\n  createPluginFactory,\n  getPluginType,\n} from '@udecode/plate-common/server';\n\nimport type { IndentPlugin } from './types';\n\nexport const KEY_TEXT_INDENT = 'textIndent';\n\nexport const createTextIndentPlugin = createPluginFactory<IndentPlugin>({\n  key: KEY_TEXT_INDENT,\n  options: {\n    offset: 24,\n    unit: 'px',\n  },\n  then: (editor, { options: { offset, unit } = {} }) => ({\n    inject: {\n      props: {\n        nodeKey: KEY_TEXT_INDENT,\n        styleKey: 'textIndent',\n        transformNodeValue({ nodeValue }) {\n          return nodeValue * offset! + unit!;\n        },\n        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],\n      },\n    },\n  }),\n});\n","import { useEditorRef } from '@udecode/plate-common';\n\nimport { indent } from '../index';\n\nexport const useIndentButton = () => {\n  const editor = useEditorRef();\n\n  return {\n    props: {\n      onClick: () => {\n        indent(editor);\n      },\n      onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n      },\n    },\n  };\n};\n","import { useEditorRef } from '@udecode/plate-common';\n\nimport { outdent } from '../index';\n\nexport const useOutdentButton = () => {\n  const editor = useEditorRef();\n\n  return {\n    props: {\n      onClick: () => {\n        outdent(editor);\n      },\n      onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n      },\n    },\n  };\n};\n"],"mappings":"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","names":["setElements","unsetNodes","ELEMENT_DEFAULT","createPluginFactory","getPluginType","useEditorRef","useEditorRef"]}