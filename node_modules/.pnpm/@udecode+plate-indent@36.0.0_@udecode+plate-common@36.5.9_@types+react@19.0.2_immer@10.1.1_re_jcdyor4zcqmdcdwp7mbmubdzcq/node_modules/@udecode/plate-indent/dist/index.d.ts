import * as _udecode_plate_common_server from '@udecode/plate-common/server';
import { Value, PlateEditor, KeyboardHandlerReturnType, WithPlatePlugin, GetNodeEntriesOptions, UnhangRangeOptions, AnyObject } from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';
import { TElement } from '@udecode/plate-common';

interface TIndentElement extends TElement {
    indent: number;
}
type IndentPlugin = {
    /** Maximum number of indentation. */
    indentMax?: number;
    /**
     * Indentation offset used in `(offset * element.indent) + unit`.
     *
     * @default 40
     */
    offset?: number;
    /**
     * Indentation unit used in `(offset * element.indent) + unit`.
     *
     * @default 'px'
     */
    unit?: string;
};

declare const KEY_INDENT = "indent";
declare const createIndentPlugin: <OP = IndentPlugin, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

declare const KEY_TEXT_INDENT = "textIndent";
declare const createTextIndentPlugin: <OP = IndentPlugin, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

declare const onKeyDownIndent: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E) => KeyboardHandlerReturnType;

/**
 * - `node.indent` can not exceed `indentMax`
 * - `node.indent` is unset if `node.type` is not in `types`
 */
declare const withIndent: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, { inject: { props: { validTypes } }, options: { indentMax }, }: WithPlatePlugin<IndentPlugin, V, E>) => E;

declare const useIndentButton: () => {
    props: {
        onClick: () => void;
        onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => void;
    };
};

declare const useOutdentButton: () => {
    props: {
        onClick: () => void;
        onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => void;
    };
};

interface SetIndentOptions<V extends Value = Value> {
    /** GetNodeEntries options */
    getNodesOptions?: GetNodeEntriesOptions<V> & UnhangRangeOptions;
    /**
     * 1 to indent -1 to outdent
     *
     * @default 1
     */
    offset?: number;
    /** Set other props than the indent one. These will be unset if indent = 0. */
    setNodesProps?: ({ indent }: {
        indent: number;
    }) => AnyObject;
    /** Nodes props to unset when indent = 0. */
    unsetNodesProps?: string[];
}
/** Add offset to the indentation of the selected blocks. */
declare const setIndent: <V extends Value>(editor: PlateEditor<V>, { getNodesOptions, offset, setNodesProps, unsetNodesProps, }: SetIndentOptions<V>) => void;

/** Increase the indentation of the selected blocks. */
declare const indent: <V extends Value>(editor: PlateEditor<V>, options?: SetIndentOptions<V>) => void;

/** Decrease the indentation of the selected blocks. */
declare const outdent: <V extends Value>(editor: PlateEditor<V>, options?: SetIndentOptions<V>) => void;

export { type IndentPlugin, KEY_INDENT, KEY_TEXT_INDENT, type SetIndentOptions, type TIndentElement, createIndentPlugin, createTextIndentPlugin, indent, onKeyDownIndent, outdent, setIndent, useIndentButton, useOutdentButton, withIndent };
