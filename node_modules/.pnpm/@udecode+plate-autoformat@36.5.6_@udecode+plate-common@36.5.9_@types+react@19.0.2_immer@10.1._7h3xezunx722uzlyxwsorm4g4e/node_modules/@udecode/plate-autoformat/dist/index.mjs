var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/createAutoformatPlugin.ts
import { createPluginFactory } from "@udecode/plate-common/server";

// src/onKeyDownAutoformat.ts
import {
  deleteBackward,
  getEditorString,
  getPointBefore,
  insertText,
  isHotkey
} from "@udecode/plate-common/server";
import { Range } from "slate";
var onKeyDownAutoformat = (editor, {
  options: { enableUndoOnDelete, rules }
}) => (e) => {
  if (e.defaultPrevented)
    return false;
  if (!isHotkey("backspace", { byKey: true }, e))
    return false;
  if (!rules)
    return false;
  if (!enableUndoOnDelete)
    return false;
  const { selection } = editor;
  if (!selection || !Range.isCollapsed(selection))
    return;
  const [start, end] = Range.edges(selection);
  const before = getPointBefore(editor, end, {
    distance: 1,
    unit: "character"
  });
  if (!start)
    return false;
  if (!before)
    return false;
  const charRange = { anchor: before, focus: start };
  if (!charRange)
    return false;
  const char = getEditorString(editor, charRange);
  if (!char)
    return false;
  const matchers = [...rules].filter((rule2) => {
    const textRule = rule2;
    if (textRule) {
      return textRule.mode === "text" && textRule.format === char;
    }
    return false;
  });
  if (!matchers || matchers.length === 0)
    return false;
  e.preventDefault();
  deleteBackward(editor, { unit: "character" });
  const rule = matchers[0];
  if (rule && typeof rule.match === "string") {
    insertText(editor, rule.match);
  } else {
    const matchArray = rule.match;
    if (matchArray && matchArray.length > 0) {
      insertText(editor, matchArray[0]);
    }
  }
  return true;
};

// src/withAutoformat.ts
import {
  isCollapsed
} from "@udecode/plate-common/server";

// src/transforms/autoformatBlock.ts
import {
  ELEMENT_DEFAULT,
  deleteText,
  getEditorString as getEditorString2,
  getRangeBefore,
  getRangeFromBlockStart,
  isBlock,
  isVoid,
  setElements,
  someNode
} from "@udecode/plate-common/server";
import castArray2 from "lodash/castArray.js";

// src/utils/getMatchRange.ts
import castArray from "lodash/castArray.js";
var getMatchRange = ({
  match,
  trigger
}) => {
  let start;
  let end;
  if (typeof match === "object") {
    start = match.start;
    end = match.end;
  } else {
    start = match;
    end = start.split("").reverse().join("");
  }
  const triggers = trigger ? castArray(trigger) : [end.slice(-1)];
  end = trigger ? end : end.slice(0, -1);
  return {
    end,
    start,
    triggers
  };
};

// src/transforms/autoformatBlock.ts
var autoformatBlock = (editor, {
  allowSameTypeAbove = false,
  format,
  match: _match,
  matchByRegex = false,
  preFormat,
  text,
  trigger,
  triggerAtBlockStart = true,
  type = ELEMENT_DEFAULT
}) => {
  const matches = castArray2(_match);
  for (const match of matches) {
    const { end, triggers } = getMatchRange({
      match: { end: match, start: "" },
      trigger
    });
    if (!triggers.includes(text))
      continue;
    let matchRange;
    if (triggerAtBlockStart) {
      matchRange = getRangeFromBlockStart(editor);
      const hasVoidNode = someNode(editor, {
        at: matchRange,
        match: (n) => isVoid(editor, n)
      });
      if (hasVoidNode)
        continue;
      const textFromBlockStart = getEditorString2(editor, matchRange);
      const isMatched = matchByRegex ? !!textFromBlockStart.match(end) : end === textFromBlockStart;
      if (!isMatched)
        continue;
    } else {
      matchRange = getRangeBefore(editor, editor.selection, {
        matchByRegex,
        matchString: end
      });
      if (!matchRange)
        continue;
    }
    if (!allowSameTypeAbove) {
      const isBelowSameBlockType = someNode(editor, { match: { type } });
      if (isBelowSameBlockType)
        continue;
    }
    if (match.length > 1) {
      deleteText(editor, {
        at: matchRange
      });
    }
    if (preFormat) {
      preFormat(editor);
    }
    if (format) {
      format(editor);
    } else {
      setElements(
        editor,
        { type },
        {
          match: (n) => isBlock(editor, n)
        }
      );
    }
    return true;
  }
  return false;
};

// src/transforms/autoformatMark.ts
import {
  collapseSelection,
  deleteText as deleteText2,
  getEditorString as getEditorString4,
  removeMark,
  select
} from "@udecode/plate-common/server";
import castArray3 from "lodash/castArray.js";

// src/utils/getMatchPoints.ts
import {
  getPointBeforeLocation
} from "@udecode/plate-common/server";

// src/utils/isPreviousCharacterEmpty.ts
import {
  getEditorString as getEditorString3,
  getRangeBefore as getRangeBefore2
} from "@udecode/plate-common/server";
var isPreviousCharacterEmpty = (editor, at) => {
  const range = getRangeBefore2(editor, at);
  if (range) {
    const text = getEditorString3(editor, range);
    if (text) {
      const noWhiteSpaceRegex = new RegExp(`\\S+`);
      return !text.match(noWhiteSpaceRegex);
    }
  }
  return true;
};

// src/utils/getMatchPoints.ts
var getMatchPoints = (editor, { end, start }) => {
  const selection = editor.selection;
  let beforeEndMatchPoint = selection.anchor;
  if (end) {
    beforeEndMatchPoint = getPointBeforeLocation(editor, selection, {
      matchString: end
    });
    if (!beforeEndMatchPoint)
      return;
  }
  let afterStartMatchPoint;
  let beforeStartMatchPoint;
  if (start) {
    afterStartMatchPoint = getPointBeforeLocation(editor, beforeEndMatchPoint, {
      afterMatch: true,
      matchString: start,
      skipInvalid: true
    });
    if (!afterStartMatchPoint)
      return;
    beforeStartMatchPoint = getPointBeforeLocation(
      editor,
      beforeEndMatchPoint,
      {
        matchString: start,
        skipInvalid: true
      }
    );
    if (!isPreviousCharacterEmpty(editor, beforeStartMatchPoint))
      return;
  }
  return {
    afterStartMatchPoint,
    beforeEndMatchPoint,
    beforeStartMatchPoint
  };
};

// src/transforms/autoformatMark.ts
var autoformatMark = (editor, { ignoreTrim, match: _match, text, trigger, type }) => {
  if (!type)
    return false;
  const selection = editor.selection;
  const matches = castArray3(_match);
  for (const match of matches) {
    const { end, start, triggers } = getMatchRange({
      match,
      trigger
    });
    if (!triggers.includes(text))
      continue;
    const matched = getMatchPoints(editor, { end, start });
    if (!matched)
      continue;
    const { afterStartMatchPoint, beforeEndMatchPoint, beforeStartMatchPoint } = matched;
    const matchRange = {
      anchor: afterStartMatchPoint,
      focus: beforeEndMatchPoint
    };
    if (!ignoreTrim) {
      const matchText = getEditorString4(editor, matchRange);
      if (matchText.trim() !== matchText)
        continue;
    }
    if (end) {
      deleteText2(editor, {
        at: {
          anchor: beforeEndMatchPoint,
          focus: selection.anchor
        }
      });
    }
    const marks = castArray3(type);
    select(editor, matchRange);
    marks.forEach((mark) => {
      editor.addMark(mark, true);
    });
    collapseSelection(editor, { edge: "end" });
    removeMark(editor, { key: marks, shouldChange: false });
    deleteText2(editor, {
      at: {
        anchor: beforeStartMatchPoint,
        focus: afterStartMatchPoint
      }
    });
    return true;
  }
  return false;
};

// src/transforms/autoformatText.ts
import {
  deleteText as deleteText3,
  insertText as insertText2
} from "@udecode/plate-common/server";
import castArray4 from "lodash/castArray.js";
var autoformatText = (editor, { format, match: _match, text, trigger }) => {
  const selection = editor.selection;
  const matches = castArray4(_match);
  for (const match of matches) {
    const { end, start, triggers } = getMatchRange({
      match: Array.isArray(format) ? match : {
        end: match,
        start: ""
      },
      trigger
    });
    if (!triggers.includes(text))
      continue;
    const matched = getMatchPoints(editor, { end, start });
    if (!matched)
      continue;
    const { afterStartMatchPoint, beforeEndMatchPoint, beforeStartMatchPoint } = matched;
    if (end) {
      deleteText3(editor, {
        at: {
          anchor: beforeEndMatchPoint,
          focus: selection.anchor
        }
      });
    }
    if (typeof format === "function") {
      format(editor, matched);
    } else {
      const formatEnd = Array.isArray(format) ? format[1] : format;
      editor.insertText(formatEnd);
      if (beforeStartMatchPoint) {
        const formatStart = Array.isArray(format) ? format[0] : format;
        deleteText3(editor, {
          at: {
            anchor: beforeStartMatchPoint,
            focus: afterStartMatchPoint
          }
        });
        insertText2(editor, formatStart, {
          at: beforeStartMatchPoint
        });
      }
    }
    return true;
  }
  return false;
};

// src/withAutoformat.ts
var withAutoformat = (editor, { options: { rules } }) => {
  const { insertText: insertText3 } = editor;
  editor.insertText = (text) => {
    var _a;
    if (!isCollapsed(editor.selection))
      return insertText3(text);
    for (const rule of rules) {
      const { insertTrigger, mode = "text", query } = rule;
      if (query && !query(editor, __spreadProps(__spreadValues({}, rule), { text })))
        continue;
      const autoformatter = {
        block: autoformatBlock,
        mark: autoformatMark,
        text: autoformatText
      };
      if ((_a = autoformatter[mode]) == null ? void 0 : _a.call(autoformatter, editor, __spreadProps(__spreadValues({}, rule), {
        text
      }))) {
        return insertTrigger && insertText3(text);
      }
    }
    insertText3(text);
  };
  return editor;
};

// src/createAutoformatPlugin.ts
var KEY_AUTOFORMAT = "autoformat";
var createAutoformatPlugin = createPluginFactory({
  handlers: {
    onKeyDown: onKeyDownAutoformat
  },
  key: KEY_AUTOFORMAT,
  options: {
    rules: []
  },
  withOverrides: withAutoformat
});

// src/rules/autoformatArrow.ts
var autoformatArrow = [
  {
    format: "\u2192",
    match: "->",
    mode: "text"
  },
  {
    format: "\u2190",
    match: "<-",
    mode: "text"
  },
  {
    format: "\u21D2",
    match: "=>",
    mode: "text"
  },
  {
    format: "\u21D0",
    match: ["<=", "\u2264="],
    mode: "text"
  }
];

// src/rules/autoformatLegal.ts
var autoformatLegal = [
  {
    format: "\u2122",
    match: ["(tm)", "(TM)"],
    mode: "text"
  },
  {
    format: "\xAE",
    match: ["(r)", "(R)"],
    mode: "text"
  },
  {
    format: "\xA9",
    match: ["(c)", "(C)"],
    mode: "text"
  }
];
var autoformatLegalHtml = [
  {
    format: "\u2122",
    match: "&trade;",
    mode: "text"
  },
  {
    format: "\xAE",
    match: "&reg;",
    mode: "text"
  },
  {
    format: "\xA9",
    match: "&copy;",
    mode: "text"
  },
  {
    format: "\xA7",
    match: "&sect;",
    mode: "text"
  }
];

// src/rules/autoformatPunctuation.ts
var autoformatPunctuation = [
  {
    format: "\u2014",
    match: "--",
    mode: "text"
  },
  {
    format: "\u2026",
    match: "...",
    mode: "text"
  },
  {
    format: "\xBB",
    match: ">>",
    mode: "text"
  },
  {
    format: "\xAB",
    match: "<<",
    mode: "text"
  }
];

// src/rules/autoformatSmartQuotes.ts
var autoformatSmartQuotes = [
  {
    format: ["\u201C", "\u201D"],
    match: '"',
    mode: "text"
  },
  {
    format: ["\u2018", "\u2019"],
    match: "'",
    mode: "text"
  }
];

// src/rules/math/autoformatComparison.ts
var autoformatComparison = [
  {
    format: "\u226F",
    match: "!>",
    mode: "text"
  },
  {
    format: "\u226E",
    match: "!<",
    mode: "text"
  },
  {
    format: "\u2265",
    match: ">=",
    mode: "text"
  },
  {
    format: "\u2264",
    match: "<=",
    mode: "text"
  },
  {
    format: "\u2271",
    match: "!>=",
    mode: "text"
  },
  {
    format: "\u2270",
    match: "!<=",
    mode: "text"
  }
];

// src/rules/math/autoformatEquality.ts
var autoformatEquality = [
  {
    format: "\u2260",
    match: "!=",
    mode: "text"
  },
  {
    format: "\u2261",
    match: "==",
    mode: "text"
  },
  {
    format: "\u2262",
    match: ["!==", "\u2260="],
    mode: "text"
  },
  {
    format: "\u2248",
    match: "~=",
    mode: "text"
  },
  {
    format: "\u2249",
    match: "!~=",
    mode: "text"
  }
];

// src/rules/math/autoformatFraction.ts
var autoformatFraction = [
  {
    format: "\xBD",
    match: "1/2",
    mode: "text"
  },
  {
    format: "\u2153",
    match: "1/3",
    mode: "text"
  },
  {
    format: "\xBC",
    match: "1/4",
    mode: "text"
  },
  {
    format: "\u2155",
    match: "1/5",
    mode: "text"
  },
  {
    format: "\u2159",
    match: "1/6",
    mode: "text"
  },
  {
    format: "\u2150",
    match: "1/7",
    mode: "text"
  },
  {
    format: "\u215B",
    match: "1/8",
    mode: "text"
  },
  {
    format: "\u2151",
    match: "1/9",
    mode: "text"
  },
  {
    format: "\u2152",
    match: "1/10",
    mode: "text"
  },
  {
    format: "\u2154",
    match: "2/3",
    mode: "text"
  },
  {
    format: "\u2156",
    match: "2/5",
    mode: "text"
  },
  {
    format: "\xBE",
    match: "3/4",
    mode: "text"
  },
  {
    format: "\u2157",
    match: "3/5",
    mode: "text"
  },
  {
    format: "\u215C",
    match: "3/8",
    mode: "text"
  },
  {
    format: "\u2158",
    match: "4/5",
    mode: "text"
  },
  {
    format: "\u215A",
    match: "5/6",
    mode: "text"
  },
  {
    format: "\u215D",
    match: "5/8",
    mode: "text"
  },
  {
    format: "\u215E",
    match: "7/8",
    mode: "text"
  }
];

// src/rules/math/autoformatOperation.ts
var autoformatDivision = [
  {
    format: "\xF7",
    match: "//",
    mode: "text"
  }
];
var autoformatOperation = [
  {
    format: "\xB1",
    match: "+-",
    mode: "text"
  },
  {
    format: "\u2030",
    match: "%%",
    mode: "text"
  },
  {
    format: "\u2031",
    match: ["%%%", "\u2030%"],
    mode: "text"
  },
  ...autoformatDivision
];

// src/rules/math/autoformatSubscript.ts
var autoformatSubscriptNumbers = [
  {
    format: "\u2080",
    match: "~0",
    mode: "text"
  },
  {
    format: "\u2081",
    match: "~1",
    mode: "text"
  },
  {
    format: "\u2082",
    match: "~2",
    mode: "text"
  },
  {
    format: "\u2083",
    match: "~3",
    mode: "text"
  },
  {
    format: "\u2084",
    match: "~4",
    mode: "text"
  },
  {
    format: "\u2085",
    match: "~5",
    mode: "text"
  },
  {
    format: "\u2086",
    match: "~6",
    mode: "text"
  },
  {
    format: "\u2087",
    match: "~7",
    mode: "text"
  },
  {
    format: "\u2088",
    match: "~8",
    mode: "text"
  },
  {
    format: "\u2089",
    match: "~9",
    mode: "text"
  }
];
var autoformatSubscriptSymbols = [
  {
    format: "\u208A",
    match: "~+",
    mode: "text"
  },
  {
    format: "\u208B",
    match: "~-",
    mode: "text"
  }
];

// src/rules/math/autoformatSuperscript.ts
var autoformatSuperscriptNumbers = [
  {
    format: "\u2070",
    match: "^0",
    mode: "text"
  },
  {
    format: "\xB9",
    match: "^1",
    mode: "text"
  },
  {
    format: "\xB2",
    match: "^2",
    mode: "text"
  },
  {
    format: "\xB3",
    match: "^3",
    mode: "text"
  },
  {
    format: "\u2074",
    match: "^4",
    mode: "text"
  },
  {
    format: "\u2075",
    match: "^5",
    mode: "text"
  },
  {
    format: "\u2076",
    match: "^6",
    mode: "text"
  },
  {
    format: "\u2077",
    match: "^7",
    mode: "text"
  },
  {
    format: "\u2078",
    match: "^8",
    mode: "text"
  },
  {
    format: "\u2079",
    match: "^9",
    mode: "text"
  }
];
var autoformatSuperscriptSymbols = [
  {
    format: "\xB0",
    match: "^o",
    mode: "text"
  },
  {
    format: "\u207A",
    match: "^+",
    mode: "text"
  },
  {
    format: "\u207B",
    match: "^-",
    mode: "text"
  }
];

// src/rules/math/autoformatMath.ts
var autoformatMath = [
  ...autoformatComparison,
  ...autoformatEquality,
  ...autoformatOperation,
  ...autoformatFraction,
  ...autoformatSuperscriptSymbols,
  ...autoformatSubscriptSymbols,
  ...autoformatSuperscriptNumbers,
  ...autoformatSubscriptNumbers
];
export {
  KEY_AUTOFORMAT,
  autoformatArrow,
  autoformatBlock,
  autoformatComparison,
  autoformatDivision,
  autoformatEquality,
  autoformatFraction,
  autoformatLegal,
  autoformatLegalHtml,
  autoformatMark,
  autoformatMath,
  autoformatOperation,
  autoformatPunctuation,
  autoformatSmartQuotes,
  autoformatSubscriptNumbers,
  autoformatSubscriptSymbols,
  autoformatSuperscriptNumbers,
  autoformatSuperscriptSymbols,
  autoformatText,
  createAutoformatPlugin,
  getMatchPoints,
  getMatchRange,
  isPreviousCharacterEmpty,
  onKeyDownAutoformat,
  withAutoformat
};
//# sourceMappingURL=index.mjs.map