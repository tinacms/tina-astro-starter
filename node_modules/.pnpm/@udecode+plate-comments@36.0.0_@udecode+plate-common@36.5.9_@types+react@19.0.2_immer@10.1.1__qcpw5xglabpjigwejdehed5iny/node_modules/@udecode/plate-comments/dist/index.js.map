{"version":3,"sources":["../src/index.ts","../src/constants.ts","../src/createCommentsPlugin.ts","../src/useHooksComments.ts","../src/stores/comment/CommentProvider.tsx","../src/stores/comments/CommentsProvider.tsx","../src/stores/comments/useActiveCommentNode.ts","../src/queries/findCommentNode.ts","../src/queries/findCommentNodeById.ts","../src/utils/getCommentKey.ts","../src/queries/getCommentNodeEntries.ts","../src/utils/isCommentKey.ts","../src/utils/getCommentCount.ts","../src/utils/getCommentKeyId.ts","../src/utils/getCommentKeys.ts","../src/utils/getCommentUrl.ts","../src/utils/getElementAbsolutePosition.tsx","../src/utils/isCommentNodeById.ts","../src/utils/isCommentText.ts","../src/utils/unsetCommentNodesById.ts","../src/queries/getCommentNodesById.ts","../src/queries/getCommentPosition.ts","../src/stores/comments/useAddCommentMark.ts","../src/stores/comments/useCommentsResolved.ts","../src/withComments.ts","../src/transforms/removeCommentMark.ts","../src/components/CommentDeleteButton.tsx","../src/components/CommentEditCancelButton.tsx","../src/components/CommentEditSaveButton.tsx","../src/components/CommentEditActions.tsx","../src/components/CommentEditButton.tsx","../src/components/CommentEditTextarea.tsx","../src/components/CommentNewSubmitButton.tsx","../src/components/CommentNewTextarea.tsx","../src/components/CommentResolveButton.tsx","../src/components/CommentUserName.tsx","../src/components/CommentsPositioner.tsx","../src/components/useCommentAddButton.ts","../src/components/useCommentItemContent.ts","../src/components/useCommentLeaf.ts","../src/components/useCommentsShowResolvedButton.ts","../src/components/useFloatingCommentsContentState.ts","../src/components/useFloatingCommentsState.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './constants';\nexport * from './createCommentsPlugin';\nexport * from './types';\nexport * from './useHooksComments';\nexport * from './withComments';\nexport * from './components/index';\nexport * from './queries/index';\nexport * from './stores/index';\nexport * from './transforms/index';\nexport * from './utils/index';\n","export const MARK_COMMENT = 'comment';\n","import { createPluginFactory } from '@udecode/plate-common/server';\n\nimport type { CommentsPlugin } from './types';\n\nimport { MARK_COMMENT } from './constants';\nimport { useHooksComments } from './useHooksComments';\nimport { withComments } from './withComments';\n\nexport const createCommentsPlugin = createPluginFactory<CommentsPlugin>({\n  isLeaf: true,\n  key: MARK_COMMENT,\n  options: {\n    hotkey: ['meta+shift+m', 'ctrl+shift+m'],\n  },\n  useHooks: useHooksComments,\n  withOverrides: withComments,\n});\n","import { useHotkeys } from '@udecode/plate-common';\nimport {\n  type PlateEditor,\n  type Value,\n  type WithPlatePlugin,\n  isExpanded,\n} from '@udecode/plate-common/server';\n\nimport type { CommentsPlugin } from './types';\n\nimport { useAddCommentMark, useCommentsActions } from './stores';\n\nexport const useHooksComments = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  { options }: WithPlatePlugin<CommentsPlugin>\n) => {\n  const { hotkey } = options;\n\n  const addCommentMark = useAddCommentMark();\n  const setFocusTextarea = useCommentsActions().focusTextarea();\n\n  useHotkeys(\n    hotkey!,\n    (e) => {\n      if (!editor.selection) return;\n\n      e.preventDefault();\n\n      // block comments\n\n      if (!isExpanded(editor.selection)) return;\n\n      addCommentMark();\n      setFocusTextarea(true);\n    },\n    {\n      enableOnContentEditable: true,\n    }\n  );\n};\n","import { createAtomStore } from '@udecode/plate-common';\nimport { type Value, getNodeString } from '@udecode/plate-common/server';\n\nimport type { CommentUser, TComment } from '../../types';\n\nimport {\n  useCommentById,\n  useCommentsSelectors,\n} from '../comments/CommentsProvider';\n\nexport const SCOPE_ACTIVE_COMMENT = 'activeComment';\n\nexport interface CommentStoreState {\n  editingValue: Value | null;\n  id: string;\n  isMenuOpen: boolean;\n}\n\nexport const { CommentProvider, commentStore, useCommentStore } =\n  createAtomStore(\n    {\n      editingValue: null,\n      id: '',\n      isMenuOpen: false,\n    } as CommentStoreState,\n    {\n      name: 'comment',\n    }\n  );\n\nexport const useCommentStates = () => useCommentStore().use;\n\nexport const useCommentSelectors = () => useCommentStore().get;\n\nexport const useCommentActions = () => useCommentStore().set;\n\nexport const useCommentUser = (scope?: string): CommentUser | null => {\n  const commentId = useCommentSelectors().id(scope);\n  const users = useCommentsSelectors().users();\n  const comment = useCommentById(commentId);\n\n  if (!comment) return null;\n\n  return users[comment.userId];\n};\n\nexport const useCommentReplies = (scope?: string) => {\n  const commentId = useCommentSelectors().id(scope);\n  const comments = useCommentsSelectors().comments();\n\n  const replies: Record<string, TComment> = {};\n\n  Object.keys(comments).forEach((id) => {\n    const comment = comments[id];\n\n    if (!comment) return null;\n    if (comment.parentId === commentId) {\n      replies[id] = comment;\n    }\n  });\n\n  return replies;\n};\n\nexport const useComment = (scope?: string) => {\n  const commentId = useCommentSelectors().id(scope);\n\n  return useCommentById(commentId);\n};\n\nexport const useCommentText = (scope?: string) => {\n  const comment = useComment(scope);\n\n  if (!comment) return null;\n\n  return getNodeString(comment.value?.[0]);\n};\n\nexport const useEditingCommentText = () => {\n  const editingValue = useCommentSelectors().editingValue();\n\n  if (!editingValue) return null;\n\n  return getNodeString(editingValue?.[0]);\n};\n","import { createAtomStore } from '@udecode/plate-common';\nimport {\n  type Value,\n  type WithPartial,\n  getNodeString,\n  nanoid,\n} from '@udecode/plate-common/server';\n\nimport type { CommentUser, TComment } from '../../types';\n\nexport interface CommentsStoreState {\n  /** Id of the active comment. If null, no comment is active. */\n  activeCommentId: null | string;\n\n  addingCommentId: null | string;\n\n  /** Comments data. */\n  comments: Record<string, TComment>;\n\n  focusTextarea: boolean;\n\n  /** Id of the current user. */\n  myUserId: null | string;\n\n  newValue: Value;\n\n  onCommentAdd: ((value: WithPartial<TComment, 'userId'>) => void) | null;\n\n  onCommentDelete: ((id: string) => void) | null;\n  onCommentUpdate:\n    | ((value: Partial<Omit<TComment, 'id'>> & Pick<TComment, 'id'>) => void)\n    | null;\n  /** Users data. */\n  users: Record<string, CommentUser>;\n}\n\nexport const { CommentsProvider, commentsStore, useCommentsStore } =\n  createAtomStore(\n    {\n      activeCommentId: null,\n      addingCommentId: null,\n      comments: {},\n      focusTextarea: false,\n      myUserId: null,\n      newValue: [{ children: [{ text: '' }], type: 'p' }],\n      onCommentAdd: null,\n      onCommentDelete: null,\n      onCommentUpdate: null,\n      users: {},\n    } as CommentsStoreState,\n    {\n      name: 'comments',\n    }\n  );\n\nexport const useCommentsStates = () => useCommentsStore().use;\n\nexport const useCommentsSelectors = () => useCommentsStore().get;\n\nexport const useCommentsActions = () => useCommentsStore().set;\n\nexport const useCommentById = (id?: null | string): TComment | null => {\n  const comments = useCommentsSelectors().comments();\n\n  if (!id) return null;\n\n  return comments[id];\n};\n\nexport const useUserById = (id: null | string): CommentUser | null => {\n  const users = useCommentsSelectors().users();\n\n  if (!id) return null;\n\n  return users[id];\n};\n\nexport const useMyUser = (): CommentUser | null => {\n  const users = useCommentsSelectors().users();\n  const myUserId = useCommentsSelectors().myUserId();\n\n  if (!myUserId) return null;\n\n  return users[myUserId];\n};\n\nexport const useNewCommentText = () => {\n  const editingValue = useCommentsSelectors().newValue();\n\n  return getNodeString(editingValue?.[0]);\n};\n\nexport const useResetNewCommentValue = () => {\n  const setNewValue = useCommentsActions().newValue();\n\n  return () => {\n    setNewValue([{ children: [{ text: '' }], type: 'p' }]);\n  };\n};\n\nexport const useUpdateComment = (id?: null | string) => {\n  const comment = useCommentById(id);\n\n  const [comments, setComments] = useCommentsStates().comments();\n\n  return (value: Partial<TComment>) => {\n    if (!id) return;\n\n    setComments({\n      ...comments,\n      [id]: { ...comment, ...value } as any,\n    });\n  };\n};\n\nexport const useAddRawComment = () => {\n  const [comments, setComments] = useCommentsStates().comments();\n  const myUserId = useCommentsSelectors().myUserId();\n\n  return (id: string) => {\n    if (!myUserId) return;\n\n    setComments({\n      ...comments,\n      [id]: {\n        id,\n        userId: myUserId,\n      },\n    } as any);\n  };\n};\n\nexport const useAddComment = () => {\n  const [comments, setComments] = useCommentsStates().comments();\n  const myUserId = useCommentsSelectors().myUserId();\n\n  return (value: WithPartial<TComment, 'createdAt' | 'id' | 'userId'>) => {\n    const id = value.id ?? nanoid();\n\n    const newComment: WithPartial<TComment, 'userId'> = {\n      createdAt: Date.now(),\n      id,\n      userId: myUserId ?? undefined,\n      ...value,\n    };\n\n    if (newComment.userId) {\n      setComments({\n        ...comments,\n        [id]: newComment as TComment,\n      });\n    }\n\n    return newComment;\n  };\n};\n\nexport const useRemoveComment = () => {\n  const [comments, setComments] = useCommentsStates().comments();\n\n  return (id: null | string) => {\n    if (!id) return;\n\n    delete comments[id];\n\n    setComments({\n      ...comments,\n    });\n  };\n};\n","import { useEditorRef } from '@udecode/plate-common';\n\nimport { findCommentNodeById } from '../../queries/index';\nimport { useCommentsSelectors } from './CommentsProvider';\n\nexport const useActiveCommentNode = () => {\n  const editor = useEditorRef();\n\n  const id = useCommentsSelectors().activeCommentId();\n\n  if (!id) return null;\n\n  return findCommentNodeById(editor, id);\n};\n","import {\n  type FindNodeOptions,\n  type PlateEditor,\n  type Value,\n  findNode,\n} from '@udecode/plate-common/server';\n\nimport type { TCommentText } from '../types';\n\nimport { MARK_COMMENT } from '../constants';\n\nexport const findCommentNode = <V extends Value>(\n  editor: PlateEditor<V>,\n  options?: FindNodeOptions\n) => {\n  return findNode<TCommentText>(editor, {\n    match: (n) => n[MARK_COMMENT],\n    ...options,\n  });\n};\n","import {\n  type PlateEditor,\n  type Value,\n  findNode,\n} from '@udecode/plate-common/server';\n\nimport type { TCommentText } from '../types';\n\nimport { getCommentKey } from '../utils/getCommentKey';\n\nexport const findCommentNodeById = <V extends Value>(\n  editor: PlateEditor<V>,\n  id: string\n) => {\n  return findNode<TCommentText>(editor, {\n    at: [],\n    match: (n) => n[getCommentKey(id)],\n  });\n};\n","import { MARK_COMMENT } from '../constants';\n\nexport const getCommentKey = (id: string) => `${MARK_COMMENT}_${id}`;\n","import {\n  type PlateEditor,\n  type Value,\n  getNodeEntries,\n} from '@udecode/plate-common/server';\n\nimport type { TCommentText } from '../types';\n\nimport { isCommentText } from '../utils/index';\n\nexport const getCommentNodeEntries = <V extends Value>(\n  editor: PlateEditor<V>\n) => {\n  return [\n    ...getNodeEntries<TCommentText>(editor, {\n      at: [],\n      match: (n) => isCommentText(n),\n    }),\n  ];\n};\n","import { MARK_COMMENT } from '../constants';\n\nexport const isCommentKey = (key: string) => key.startsWith(`${MARK_COMMENT}_`);\n","import type { TCommentText } from '../types';\n\nimport { isCommentKey } from './isCommentKey';\n\nexport const getCommentCount = (node: TCommentText) => {\n  let commentCount = 0;\n  Object.keys(node).forEach((key) => {\n    if (isCommentKey(key)) commentCount++;\n  });\n\n  return commentCount;\n};\n","import { MARK_COMMENT } from '../constants';\n\nexport const getCommentKeyId = (key: string) =>\n  key.replace(`${MARK_COMMENT}_`, '');\n","import type { TCommentText } from '../types';\n\nimport { isCommentKey } from './isCommentKey';\n\nexport const getCommentKeys = (node: TCommentText) => {\n  const keys: string[] = [];\n\n  Object.keys(node).forEach((key) => {\n    if (isCommentKey(key)) keys.push(key);\n  });\n\n  return keys;\n};\n","export const getCommentUrl = (commentId: string) => {\n  const url = new URL(window.location.href);\n  url.searchParams.set('comment', commentId);\n\n  return url.toString();\n};\n","export const getElementAbsolutePosition = (element: HTMLElement) => {\n  let left = 0;\n  let top = 0;\n  let currentElement: HTMLElement | null = element;\n\n  do {\n    left += (currentElement.offsetLeft || 0) - currentElement.scrollLeft;\n    top += (currentElement.offsetTop || 0) - currentElement.scrollTop;\n    currentElement = currentElement.offsetParent as HTMLElement;\n  } while (currentElement);\n\n  return {\n    left,\n    top,\n  };\n};\n","import type { TNode } from '@udecode/plate-common/server';\n\nimport { getCommentKey } from './getCommentKey';\n\n/** Whether the node has a comment id. */\nexport const isCommentNodeById = (node: TNode, id: string) =>\n  !!node[getCommentKey(id)];\n","import type { TNode } from '@udecode/plate-common/server';\n\nimport type { TCommentText } from '../types';\n\nimport { MARK_COMMENT } from '../constants';\n\nexport const isCommentText = (node: TNode): node is TCommentText => {\n  return !!node[MARK_COMMENT];\n};\n","import {\n  type PlateEditor,\n  type Value,\n  unsetNodes,\n} from '@udecode/plate-common/server';\n\nimport type { TCommentText } from '../types';\n\nimport { getCommentKey } from './getCommentKey';\nimport { isCommentNodeById } from './isCommentNodeById';\n\nexport const unsetCommentNodesById = <V extends Value>(\n  editor: PlateEditor<V>,\n  { id }: { id: string }\n) => {\n  unsetNodes<TCommentText>(editor, getCommentKey(id), {\n    at: [],\n    match: (n) => isCommentNodeById(n, id),\n  });\n};\n","import {\n  type PlateEditor,\n  type Value,\n  getNodeEntries,\n} from '@udecode/plate-common/server';\n\nimport { isCommentNodeById } from '../utils/isCommentNodeById';\n\nexport const getCommentNodesById = <V extends Value>(\n  editor: PlateEditor<V>,\n  id: string\n) => {\n  return Array.from(\n    getNodeEntries(editor, {\n      at: [],\n      match: (n) => isCommentNodeById(n, id),\n    })\n  );\n};\n","import type { PlateEditor, Value } from '@udecode/plate-common/server';\n\nimport { toDOMNode } from '@udecode/plate-common';\nimport clamp from 'lodash/clamp.js';\n\nimport type { TCommentText } from '../types';\n\nimport { getElementAbsolutePosition } from '../utils/getElementAbsolutePosition';\n\nexport const getCommentPosition = <V extends Value>(\n  editor: PlateEditor<V>,\n  node: TCommentText\n) => {\n  const DOMNode = toDOMNode(editor, node);\n\n  if (!DOMNode) return;\n\n  const DOMNodePosition = getElementAbsolutePosition(DOMNode);\n\n  const editorDOMNode = toDOMNode(editor, editor);\n\n  if (!editorDOMNode) return;\n\n  const { width: editorWidth, x: editorX } =\n    editorDOMNode.getBoundingClientRect();\n\n  const sidebarWidth = 418;\n  const padding = 16;\n\n  return {\n    left: clamp(\n      editorX + editorWidth + 16,\n      window.innerWidth - (sidebarWidth + padding)\n    ),\n    top: DOMNodePosition.top,\n  };\n};\n","import { deselectEditor, useEditorRef } from '@udecode/plate-common';\nimport {\n  isExpanded,\n  isText,\n  nanoid,\n  setNodes,\n} from '@udecode/plate-common/server';\n\nimport { MARK_COMMENT } from '../../constants';\nimport { getCommentKey } from '../../utils/index';\nimport { useCommentsActions } from './CommentsProvider';\n\nexport const useAddCommentMark = () => {\n  const editor = useEditorRef();\n  const setActiveCommentId = useCommentsActions().activeCommentId();\n\n  return () => {\n    const { selection } = editor;\n\n    if (!isExpanded(selection)) return;\n\n    const id = nanoid();\n\n    // add comment prop to inline elements\n    // const entries = getNodes(editor, {\n    //   // TODO\n    // });\n    //\n    // Array.from(entries).forEach(([, path]) => {\n    //   setNodes(\n    //     editor,\n    //     {\n    //       [key]: comment,\n    //     },\n    //     { at: path }\n    //   );\n    // });\n\n    setNodes(\n      editor,\n      { [MARK_COMMENT]: true, [getCommentKey(id)]: true },\n      { match: isText, split: true }\n    );\n\n    try {\n      deselectEditor(editor);\n    } catch {}\n\n    setTimeout(() => {\n      setActiveCommentId(id);\n    }, 0);\n  };\n};\n","import type { TComment } from '../../types';\n\nimport { useCommentsSelectors } from './CommentsProvider';\n\nexport const useCommentsResolved = () => {\n  const comments = useCommentsSelectors().comments();\n\n  const res: TComment[] = [];\n\n  Object.keys(comments).forEach((key) => {\n    const comment = comments[key];\n\n    if (comment?.isResolved) {\n      res.push(comment);\n    }\n  });\n\n  return res;\n};\n","import {\n  type PlateEditor,\n  type Value,\n  type WithPlatePlugin,\n  unsetNodes,\n} from '@udecode/plate-common/server';\n\nimport type { CommentsPlugin } from './types';\n\nimport { MARK_COMMENT } from './constants';\nimport { removeCommentMark } from './transforms/removeCommentMark';\nimport { getCommentCount } from './utils/getCommentCount';\n\nexport const withComments = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  _plugin: WithPlatePlugin<CommentsPlugin, V, E>\n) => {\n  const { insertBreak, normalizeNode } = editor;\n\n  editor.insertBreak = () => {\n    removeCommentMark(editor);\n\n    insertBreak();\n  };\n\n  editor.normalizeNode = (entry) => {\n    const [node, path] = entry;\n\n    // Unset MARK_COMMENT prop when there is no comments\n    if (node[MARK_COMMENT] && getCommentCount(node as any) < 1) {\n      unsetNodes(editor, MARK_COMMENT, { at: path });\n\n      return;\n    }\n\n    normalizeNode(entry);\n  };\n\n  return editor;\n};\n","import {\n  type PlateEditor,\n  type Value,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\n\nimport { MARK_COMMENT } from '../constants';\nimport { findCommentNode } from '../queries/index';\nimport { getCommentKeys } from '../utils/index';\n\nexport const removeCommentMark = <V extends Value>(editor: PlateEditor<V>) => {\n  const nodeEntry = findCommentNode(editor);\n\n  if (!nodeEntry) return;\n\n  const keys = getCommentKeys(nodeEntry[0]);\n\n  withoutNormalizing(editor, () => {\n    keys.forEach((key) => {\n      editor.removeMark(key);\n    });\n\n    editor.removeMark(MARK_COMMENT);\n  });\n};\n","import { createPrimitiveComponent, useEditorRef } from '@udecode/plate-common';\n\nimport { useCommentSelectors } from '../stores/comment/CommentProvider';\nimport {\n  useCommentsActions,\n  useCommentsSelectors,\n  useRemoveComment,\n} from '../stores/comments/CommentsProvider';\nimport { unsetCommentNodesById } from '../utils/index';\n\nexport const useCommentDeleteButtonState = () => {\n  const activeCommentId = useCommentsSelectors().activeCommentId();\n  const onCommentDelete = useCommentsSelectors().onCommentDelete();\n  const id = useCommentSelectors().id();\n  const setActiveCommentId = useCommentsActions().activeCommentId();\n  const removeComment = useRemoveComment();\n  const editor = useEditorRef();\n\n  return {\n    activeCommentId,\n    editor,\n    id,\n    onCommentDelete,\n    removeComment,\n    setActiveCommentId,\n  };\n};\n\nexport const useCommentDeleteButton = ({\n  activeCommentId,\n  editor,\n  id,\n  onCommentDelete,\n  removeComment,\n  setActiveCommentId,\n}: ReturnType<typeof useCommentDeleteButtonState>) => {\n  return {\n    props: {\n      onClick: () => {\n        if (activeCommentId === id) {\n          unsetCommentNodesById(editor, { id });\n          setActiveCommentId(null);\n        } else {\n          removeComment(id);\n        }\n\n        onCommentDelete?.(id);\n      },\n    },\n  };\n};\n\nexport const CommentDeleteButton = createPrimitiveComponent('button')({\n  propsHook: useCommentDeleteButton,\n  stateHook: useCommentDeleteButtonState,\n});\n","import { createPrimitiveComponent } from '@udecode/plate-common';\n\nimport { useCommentActions } from '../stores/comment/CommentProvider';\n\nexport const useCommentEditCancelButton = () => {\n  const setEditingValue = useCommentActions().editingValue();\n\n  return {\n    props: {\n      onClick: () => {\n        setEditingValue(null);\n      },\n    },\n  };\n};\n\nexport const CommentEditCancelButton = createPrimitiveComponent('button')({\n  propsHook: useCommentEditCancelButton,\n});\n","import React from 'react';\n\nimport { createPrimitiveComponent } from '@udecode/plate-common';\n\nimport {\n  useCommentActions,\n  useCommentSelectors,\n  useCommentText,\n} from '../stores/comment/CommentProvider';\nimport {\n  useCommentsSelectors,\n  useUpdateComment,\n} from '../stores/comments/CommentsProvider';\n\nexport const useCommentEditSaveButtonState = () => {\n  const onCommentUpdate = useCommentsSelectors().onCommentUpdate();\n  const editingValue = useCommentSelectors().editingValue();\n  const setEditingValue = useCommentActions().editingValue();\n  const id = useCommentSelectors().id();\n  const updateComment = useUpdateComment(id);\n  const value = useCommentText();\n\n  return {\n    editingValue,\n    id,\n    onCommentUpdate,\n    setEditingValue,\n    updateComment,\n    value,\n  };\n};\n\nexport const useCommentEditSaveButton = ({\n  editingValue,\n  id,\n  onCommentUpdate,\n  setEditingValue,\n  updateComment,\n  value,\n}: ReturnType<typeof useCommentEditSaveButtonState>) => {\n  return {\n    props: {\n      disabled: value?.trim().length === 0,\n      onClick: React.useCallback(() => {\n        if (!editingValue) return;\n\n        updateComment({\n          value: editingValue,\n        });\n\n        setEditingValue(null);\n\n        onCommentUpdate?.({ id, value: editingValue });\n      }, [editingValue, id, onCommentUpdate, setEditingValue, updateComment]),\n    },\n  };\n};\n\nexport const CommentEditSaveButton = createPrimitiveComponent('button')({\n  propsHook: useCommentEditSaveButton,\n  stateHook: useCommentEditSaveButtonState,\n});\n","import { CommentEditCancelButton } from './CommentEditCancelButton';\nimport { CommentEditSaveButton } from './CommentEditSaveButton';\n\nexport const CommentEditActions = {\n  CancelButton: CommentEditCancelButton,\n  SaveButton: CommentEditSaveButton,\n};\n","import { createPrimitiveComponent } from '@udecode/plate-common';\n\nimport {\n  useComment,\n  useCommentActions,\n} from '../stores/comment/CommentProvider';\n\nexport const useCommentEditButtonState = () => {\n  const setIsMenuOpen = useCommentActions().isMenuOpen();\n  const comment = useComment()!;\n  const editingValue = useCommentActions().editingValue();\n\n  return {\n    comment,\n    editingValue,\n    setIsMenuOpen,\n  };\n};\n\nexport const useCommentEditButton = ({\n  comment,\n  editingValue,\n  setIsMenuOpen,\n}: ReturnType<typeof useCommentEditButtonState>) => {\n  return {\n    props: {\n      onClick: () => {\n        setIsMenuOpen(false);\n        editingValue(comment.value);\n      },\n    },\n  };\n};\n\nexport const CommentEditButton = createPrimitiveComponent('button')({\n  propsHook: useCommentEditButton,\n  stateHook: useCommentEditButtonState,\n});\n","import React from 'react';\n\nimport { createPrimitiveComponent } from '@udecode/plate-common';\n\nimport {\n  useCommentActions,\n  useEditingCommentText,\n} from '../stores/comment/CommentProvider';\n\nexport const useCommentEditTextareaState = () => {\n  const setEditingValue = useCommentActions().editingValue();\n  const value = useEditingCommentText();\n\n  const textareaRef = React.useRef<HTMLTextAreaElement | null>(null);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      const textarea = textareaRef.current;\n\n      if (textarea) {\n        textarea.focus();\n      }\n    }, 0);\n  }, [textareaRef]);\n\n  return {\n    setEditingValue,\n    textareaRef,\n    value,\n  };\n};\n\nexport const useCommentEditTextarea = ({\n  setEditingValue,\n  textareaRef,\n  value,\n}: ReturnType<typeof useCommentEditTextareaState>) => {\n  return {\n    props: {\n      onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setEditingValue([\n          { children: [{ text: event.target.value }], type: 'p' },\n        ]);\n      },\n      placeholder: 'Add a comment...',\n      ref: textareaRef,\n      rows: 1,\n      value: value ?? undefined,\n    },\n  };\n};\n\nexport const CommentEditTextarea = createPrimitiveComponent('textarea')({\n  propsHook: useCommentEditTextarea,\n  stateHook: useCommentEditTextareaState,\n});\n","import { createPrimitiveComponent, nanoid } from '@udecode/plate-common';\n\nimport {\n  SCOPE_ACTIVE_COMMENT,\n  useComment,\n} from '../stores/comment/CommentProvider';\nimport {\n  useAddComment,\n  useCommentsSelectors,\n  useNewCommentText,\n  useResetNewCommentValue,\n} from '../stores/comments/CommentsProvider';\n\nexport const useCommentNewSubmitButtonState = () => {\n  const onCommentAdd = useCommentsSelectors().onCommentAdd();\n  const activeCommentId = useCommentsSelectors().activeCommentId()!;\n  const comment = useComment(SCOPE_ACTIVE_COMMENT)!;\n  const newValue = useCommentsSelectors().newValue();\n\n  const editingCommentText = useNewCommentText();\n  const resetNewCommentValue = useResetNewCommentValue();\n  const addComment = useAddComment();\n\n  const isReplyComment = !!comment;\n\n  const submitButtonText = isReplyComment ? 'Reply' : 'Comment';\n\n  return {\n    activeCommentId,\n    addComment,\n    comment,\n    editingCommentText,\n    isReplyComment,\n    newValue,\n    onCommentAdd,\n    resetNewCommentValue,\n    submitButtonText,\n  };\n};\n\nexport const useCommentNewSubmitButton = ({\n  activeCommentId,\n  addComment,\n  comment,\n  editingCommentText,\n  isReplyComment,\n  newValue,\n  onCommentAdd,\n  resetNewCommentValue,\n  submitButtonText,\n}: ReturnType<typeof useCommentNewSubmitButtonState>) => {\n  return {\n    props: {\n      children: submitButtonText,\n      disabled: !editingCommentText?.trim().length,\n      onClick: () => {\n        const newComment = addComment(\n          isReplyComment\n            ? {\n                id: nanoid(),\n                parentId: comment.id,\n                value: newValue,\n              }\n            : {\n                id: activeCommentId,\n                value: newValue,\n              }\n        );\n\n        onCommentAdd?.(newComment);\n\n        resetNewCommentValue();\n      },\n      type: 'submit',\n    },\n  };\n};\n\nexport const CommentNewSubmitButton = createPrimitiveComponent('button')({\n  propsHook: useCommentNewSubmitButton,\n  stateHook: useCommentNewSubmitButtonState,\n});\n","import React from 'react';\n\nimport { createPrimitiveComponent } from '@udecode/plate-common';\n\nimport {\n  useCommentById,\n  useCommentsActions,\n  useCommentsSelectors,\n  useNewCommentText,\n} from '../stores/comments/CommentsProvider';\n\nexport const useCommentNewTextareaState = () => {\n  const setNewValue = useCommentsActions().newValue();\n  const activeComment = useCommentById(\n    useCommentsSelectors().activeCommentId()\n  );\n  const value = useNewCommentText();\n  const focusTextarea = useCommentsSelectors().focusTextarea();\n  const setFocusTextarea = useCommentsActions().focusTextarea();\n\n  const textareaRef = React.useRef<HTMLTextAreaElement | null>(null);\n\n  React.useEffect(() => {\n    if (focusTextarea) {\n      textareaRef.current?.focus();\n      setFocusTextarea(false);\n    }\n  }, [focusTextarea, setFocusTextarea, textareaRef]);\n\n  const placeholder = `${activeComment ? 'Reply...' : 'Add a comment...'}`;\n\n  return {\n    placeholder,\n    setNewValue,\n    textareaRef,\n    value,\n  };\n};\n\nexport const useCommentNewTextarea = ({\n  placeholder,\n  setNewValue,\n  textareaRef,\n  value,\n}: ReturnType<typeof useCommentNewTextareaState>) => {\n  return {\n    props: {\n      onChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setNewValue([{ children: [{ text: event.target.value }], type: 'p' }]);\n      },\n      placeholder,\n      ref: textareaRef,\n      rows: 1,\n      value: value ?? undefined,\n    },\n  };\n};\n\nexport const CommentNewTextarea = createPrimitiveComponent('textarea')({\n  propsHook: useCommentNewTextarea,\n  stateHook: useCommentNewTextareaState,\n});\n","import { createPrimitiveComponent } from '@udecode/plate-common';\n\nimport { useComment } from '../stores/comment/CommentProvider';\nimport {\n  useCommentsActions,\n  useCommentsSelectors,\n  useUpdateComment,\n} from '../stores/comments/CommentsProvider';\n\nexport const useCommentResolveButton = () => {\n  const onCommentUpdate = useCommentsSelectors().onCommentUpdate();\n  const activeCommentId = useCommentsSelectors().activeCommentId();\n  const setActiveCommentId = useCommentsActions().activeCommentId();\n  const updateComment = useUpdateComment(activeCommentId);\n\n  const comment = useComment()!;\n\n  return {\n    props: {\n      onClick: () => {\n        const isResolved = !comment.isResolved;\n\n        const value = {\n          isResolved,\n        };\n\n        updateComment(value);\n\n        onCommentUpdate?.({\n          id: activeCommentId!,\n          ...value,\n        });\n\n        if (isResolved) {\n          setActiveCommentId(null);\n        }\n      },\n    },\n  };\n};\n\nexport const CommentResolveButton = createPrimitiveComponent('button')({\n  propsHook: useCommentResolveButton,\n});\n","import { createPrimitiveComponent } from '@udecode/plate-common';\n\nimport { useCommentUser } from '../stores/comment/CommentProvider';\n\nexport const useCommentUserName = () => {\n  const user = useCommentUser();\n\n  return {\n    props: {\n      children: user?.name ?? 'Anonymous',\n    },\n  };\n};\n\nexport const CommentUserName = createPrimitiveComponent('div')({\n  propsHook: useCommentUserName,\n});\n","import React from 'react';\n\nimport {\n  createPrimitiveComponent,\n  toDOMNode,\n  useEditorRef,\n} from '@udecode/plate-common';\n\nimport { getCommentPosition } from '../queries/index';\nimport { useCommentsSelectors } from '../stores/comments/CommentsProvider';\nimport { useActiveCommentNode } from '../stores/comments/useActiveCommentNode';\n\nexport const useCommentsPositionerState = () => {\n  const editor = useEditorRef();\n  let activeCommentId = useCommentsSelectors().activeCommentId();\n\n  const [position, setPosition] = React.useState<{ left: number; top: number }>(\n    {\n      left: 0,\n      top: 0,\n    }\n  );\n\n  if (position.left === 0 && position.top === 0) {\n    activeCommentId = null;\n  }\n\n  const [node] = useActiveCommentNode() ?? [];\n\n  React.useEffect(() => {\n    if (!node) return;\n\n    const domNode = toDOMNode(editor, node);\n\n    if (!domNode) return;\n\n    const newPosition = getCommentPosition(editor, node);\n\n    if (!newPosition) return;\n\n    setPosition(newPosition);\n  }, [editor, node]);\n\n  return {\n    activeCommentId,\n    position,\n  };\n};\n\nexport const useCommentsPositioner = ({\n  activeCommentId,\n  position,\n}: ReturnType<typeof useCommentsPositionerState>) => {\n  return {\n    hidden: !activeCommentId,\n    props: {\n      style: {\n        ...position,\n      },\n    },\n  };\n};\n\nexport const CommentsPositioner = createPrimitiveComponent('div')({\n  propsHook: useCommentsPositioner,\n  stateHook: useCommentsPositionerState,\n});\n","import React from 'react';\n\nimport {\n  useAddCommentMark,\n  useCommentsActions,\n  useCommentsSelectors,\n} from '../stores/index';\n\nexport const useCommentAddButton = () => {\n  const addCommentMark = useAddCommentMark();\n  const setFocusTextarea = useCommentsActions().focusTextarea();\n  const myUserId = useCommentsSelectors().myUserId();\n\n  const onClick = React.useCallback<React.MouseEventHandler<HTMLSpanElement>>(\n    (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      addCommentMark();\n      setFocusTextarea(true);\n    },\n    [addCommentMark, setFocusTextarea]\n  );\n\n  return {\n    hidden: !myUserId,\n    props: { onClick },\n  };\n};\n","import {\n  useComment,\n  useCommentSelectors,\n  useCommentText,\n  useCommentUser,\n  useCommentsSelectors,\n} from '..';\n\nexport const useCommentItemContentState = () => {\n  const comment = useComment()!;\n  const isReplyComment = !!comment.parentId;\n  const commentText = useCommentText();\n  const user = useCommentUser();\n  const myUserId = useCommentsSelectors().myUserId();\n  const editingValue = useCommentSelectors().editingValue();\n\n  const isMyComment = myUserId === comment.userId;\n\n  return {\n    comment,\n    commentText,\n    editingValue,\n    isMyComment,\n    isReplyComment,\n    myUserId,\n    user,\n  };\n};\n","import React from 'react';\n\nimport { useEditorRef } from '@udecode/plate-common';\n\nimport {\n  type TCommentText,\n  getCommentKeyId,\n  isCommentKey,\n  unsetCommentNodesById,\n  useCommentsActions,\n  useCommentsSelectors,\n} from '..';\n\nexport const useCommentLeafState = ({ leaf }: { leaf: TCommentText }) => {\n  const editor = useEditorRef();\n  const [commentIds, setCommentIds] = React.useState<string[]>([]);\n  const activeCommentId = useCommentsSelectors().activeCommentId();\n  const setActiveCommentId = useCommentsActions().activeCommentId();\n  const comments = useCommentsSelectors().comments();\n  const [commentCount, setCommentCount] = React.useState(1);\n  const [isActive, setIsActive] = React.useState(false);\n\n  React.useEffect(() => {\n    const ids: string[] = [];\n    let count = 0;\n\n    let _isActive = false;\n\n    Object.keys(leaf).forEach((key) => {\n      if (!isCommentKey(key)) return;\n\n      const id = getCommentKeyId(key);\n\n      if (comments[id]?.isResolved) return;\n      if (id === activeCommentId) {\n        _isActive = true;\n        setIsActive(true);\n      }\n\n      ids.push(getCommentKeyId(key));\n      count++;\n    });\n\n    if (!_isActive && isActive) {\n      setIsActive(false);\n\n      // Remove comment nodes for unsubmitted comments\n      ids.forEach((id) => {\n        if (!comments[id]) {\n          unsetCommentNodesById(editor, { id });\n        }\n      });\n    }\n\n    setCommentCount(count);\n    setCommentIds(ids);\n  }, [editor, activeCommentId, comments, isActive, leaf]);\n\n  const lastCommentId = commentIds.at(-1)!;\n\n  return {\n    commentCount,\n    isActive,\n    lastCommentId,\n    setActiveCommentId,\n  };\n};\n\nexport const useCommentLeaf = ({\n  lastCommentId,\n  setActiveCommentId,\n}: ReturnType<typeof useCommentLeafState>) => {\n  return {\n    props: {\n      onClick: React.useCallback(\n        (e: MouseEvent) => {\n          e.stopPropagation();\n          setActiveCommentId(lastCommentId);\n        },\n        [lastCommentId, setActiveCommentId]\n      ),\n    },\n  };\n};\n","import React from 'react';\n\nexport const useCommentsShowResolvedButton = () => {\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(\n    null\n  );\n  const isActive = Boolean(anchorEl);\n\n  return {\n    props: {\n      onClick: (e: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(e.currentTarget);\n      },\n      onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n      },\n      pressed: isActive,\n    },\n  };\n};\n","import React from 'react';\n\nimport { useCommentById, useCommentsSelectors } from '../stores/index';\n\nexport const useFloatingCommentsContentState = () => {\n  const activeCommentId = useCommentsSelectors().activeCommentId()!;\n  const activeComment = useCommentById(activeCommentId);\n  const myUserId = useCommentsSelectors().myUserId();\n\n  const ref = React.useRef(null);\n\n  return {\n    activeCommentId,\n    hasNoComment: !activeComment,\n    myUserId,\n    ref,\n  };\n};\n","import React from 'react';\n\nimport { useEditorRef, useEditorVersion } from '@udecode/plate-common';\nimport { someNode } from '@udecode/plate-common/server';\n\nimport { MARK_COMMENT } from '../constants';\nimport {\n  useCommentsActions,\n  useCommentsSelectors,\n  useResetNewCommentValue,\n} from '../stores/index';\n\nexport const useFloatingCommentsState = () => {\n  const activeCommentId = useCommentsSelectors().activeCommentId();\n  const resetNewCommentValue = useResetNewCommentValue();\n  const setActiveCommentId = useCommentsActions().activeCommentId()!;\n  const editor = useEditorRef();\n  const version = useEditorVersion();\n\n  const [loaded, setLoaded] = React.useState(false);\n\n  const [active, setActive] = React.useState(false);\n\n  React.useEffect(() => {\n    // there is a delay between activeCommentId and someNode, so we sync in `active`\n    if (\n      activeCommentId &&\n      someNode(editor, {\n        match: (n) => n[MARK_COMMENT],\n      })\n    ) {\n      setActive(true);\n    }\n    if (!someNode(editor, { match: (n) => n[MARK_COMMENT] })) {\n      setActiveCommentId(null);\n      setActive(false);\n    }\n  }, [active, activeCommentId, editor, version, setActiveCommentId]);\n\n  React.useEffect(() => {\n    setLoaded(true);\n  }, []);\n\n  // reset comment editing value when active comment id changes\n  React.useEffect(() => {\n    if (activeCommentId) {\n      resetNewCommentValue();\n    }\n  }, [activeCommentId, resetNewCommentValue]);\n\n  return {\n    activeCommentId,\n    loaded,\n  };\n};\n"],"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","names":["import_server","import_plate_common","import_server","import_plate_common","import_server","import_plate_common","import_server","import_server","import_server","import_server","import_server","import_plate_common","clamp","import_plate_common","import_server","import_server","import_server","import_plate_common","import_plate_common","import_plate_common","React","import_plate_common","import_react","import_plate_common","React","import_plate_common","import_react","import_plate_common","React","import_plate_common","import_plate_common","import_react","import_plate_common","React","import_react","React","import_react","import_plate_common","React","import_react","React","import_react","React","import_react","import_plate_common","import_server","React"]}