import React from 'react';
export declare const Components: () => {
    slash_input: React.ForwardRefExoticComponent<Omit<Omit<{
        elementToAttributes?: (element: import("@udecode/plate-common").TElement) => any;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & {
        element: import("@udecode/plate-common").TElement;
    } & Omit<import("slate-react").RenderElementProps, "element"> & React.RefAttributes<HTMLDivElement>, "ref">, never> & React.RefAttributes<any>>;
    h1: ({ attributes, editor, element, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        className: any;
    }) => React.JSX.Element;
    h2: ({ attributes, editor, element, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        className: any;
    }) => React.JSX.Element;
    h3: ({ attributes, editor, element, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        className: any;
    }) => React.JSX.Element;
    h4: ({ attributes, editor, element, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        className: any;
    }) => React.JSX.Element;
    /** Tailwind prose doesn't style h5 and h6 elements */
    h5: ({ attributes, editor, element, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        className: any;
    }) => React.JSX.Element;
    h6: ({ attributes, editor, element, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        className: any;
    }) => React.JSX.Element;
    p: ({ attributes, className, editor, element, ...props }: {
        [x: string]: any;
        attributes: any;
        className: any;
        editor: any;
        element: any;
    }) => React.JSX.Element;
    mermaid: React.ForwardRefExoticComponent<Omit<Omit<{
        elementToAttributes?: (element: import("@udecode/plate-common").TElement) => any;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & {
        element: import("@udecode/plate-common").TElement;
    } & Omit<import("slate-react").RenderElementProps, "element"> & React.RefAttributes<HTMLDivElement>, "ref">, never> & React.RefAttributes<any>>;
    blockquote: React.ForwardRefExoticComponent<Omit<Omit<{
        elementToAttributes?: (element: import("@udecode/plate-common").TElement) => any;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & {
        element: import("@udecode/plate-common").TElement;
    } & Omit<import("slate-react").RenderElementProps, "element"> & React.RefAttributes<HTMLDivElement>, "ref">, never> & React.RefAttributes<any>>;
    code_block: React.ForwardRefExoticComponent<Omit<Omit<{
        elementToAttributes?: (element: import("@udecode/plate-common").TElement) => any;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & {
        element: import("@udecode/plate-common").TElement;
    } & Omit<import("slate-react").RenderElementProps, "element"> & React.RefAttributes<HTMLDivElement>, "ref">, never> & React.RefAttributes<any>>;
    code_line: React.ForwardRefExoticComponent<Omit<Omit<{
        elementToAttributes?: (element: import("@udecode/plate-common").TElement) => any;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & {
        element: import("@udecode/plate-common").TElement;
    } & Omit<import("slate-react").RenderElementProps, "element"> & React.RefAttributes<HTMLDivElement>, "ref">, never> & React.RefAttributes<any>>;
    code_syntax: React.ForwardRefExoticComponent<Omit<Omit<{
        leafToAttributes?: (leaf: import("@udecode/plate-common").TText) => any;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & Omit<import("slate-react").RenderLeafProps, "text" | "leaf"> & {
        leaf: import("@udecode/plate-common").TText;
        text: import("@udecode/plate-common").TText;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & React.RefAttributes<HTMLSpanElement>, "ref">, never> & React.RefAttributes<any>>;
    html: ({ attributes, editor, element, children, className }: {
        attributes: any;
        editor: any;
        element: any;
        children: any;
        className: any;
    }) => React.JSX.Element;
    html_inline: ({ attributes, editor, element, children, className }: {
        attributes: any;
        editor: any;
        element: any;
        children: any;
        className: any;
    }) => React.JSX.Element;
    ul: React.ForwardRefExoticComponent<Omit<Omit<Omit<Omit<{
        elementToAttributes?: (element: import("@udecode/plate-common").TElement) => any;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & {
        element: import("@udecode/plate-common").TElement;
    } & Omit<import("slate-react").RenderElementProps, "element"> & React.RefAttributes<HTMLDivElement>, "ref"> & import("class-variance-authority").VariantProps<(props?: {
        variant?: "ol" | "ul";
    } & import("class-variance-authority/dist/types").ClassProp) => string> & React.RefAttributes<any>, "ref">, never> & React.RefAttributes<any>, "ref"> & React.RefAttributes<any>>;
    ol: React.ForwardRefExoticComponent<Omit<Omit<Omit<Omit<{
        elementToAttributes?: (element: import("@udecode/plate-common").TElement) => any;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & {
        element: import("@udecode/plate-common").TElement;
    } & Omit<import("slate-react").RenderElementProps, "element"> & React.RefAttributes<HTMLDivElement>, "ref"> & import("class-variance-authority").VariantProps<(props?: {
        variant?: "ol" | "ul";
    } & import("class-variance-authority/dist/types").ClassProp) => string> & React.RefAttributes<any>, "ref">, never> & React.RefAttributes<any>, "ref"> & React.RefAttributes<any>>;
    li: React.ForwardRefExoticComponent<Omit<{
        elementToAttributes?: (element: import("@udecode/plate-common").TElement) => any;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & {
        element: import("@udecode/plate-common").TElement;
    } & Omit<import("slate-react").RenderElementProps, "element"> & React.RefAttributes<HTMLDivElement>, "ref"> & React.RefAttributes<any>>;
    a: ({ attributes, editor, element, nodeProps, className, ...props }: {
        [x: string]: any;
        attributes: any;
        editor: any;
        element: any;
        nodeProps: any;
        className: any;
    }) => React.JSX.Element;
    code: React.ForwardRefExoticComponent<Omit<Omit<{
        leafToAttributes?: (leaf: import("@udecode/plate-common").TText) => any;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & Omit<import("slate-react").RenderLeafProps, "text" | "leaf"> & {
        leaf: import("@udecode/plate-common").TText;
        text: import("@udecode/plate-common").TText;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & React.RefAttributes<HTMLSpanElement>, "ref">, never> & React.RefAttributes<any>>;
    underline: React.ForwardRefExoticComponent<Omit<{
        leafToAttributes?: (leaf: import("@udecode/plate-common").TText) => any;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & Omit<import("slate-react").RenderLeafProps, "text" | "leaf"> & {
        leaf: import("@udecode/plate-common").TText;
        text: import("@udecode/plate-common").TText;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & React.RefAttributes<HTMLSpanElement>, "ref"> & React.RefAttributes<any>>;
    strikethrough: React.ForwardRefExoticComponent<Omit<{
        leafToAttributes?: (leaf: import("@udecode/plate-common").TText) => any;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & Omit<import("slate-react").RenderLeafProps, "text" | "leaf"> & {
        leaf: import("@udecode/plate-common").TText;
        text: import("@udecode/plate-common").TText;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & React.RefAttributes<HTMLSpanElement>, "ref"> & React.RefAttributes<any>>;
    italic: React.ForwardRefExoticComponent<Omit<{
        leafToAttributes?: (leaf: import("@udecode/plate-common").TText) => any;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & Omit<import("slate-react").RenderLeafProps, "text" | "leaf"> & {
        leaf: import("@udecode/plate-common").TText;
        text: import("@udecode/plate-common").TText;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & React.RefAttributes<HTMLSpanElement>, "ref"> & React.RefAttributes<any>>;
    bold: ({ editor, leaf, text, ...props }: {
        [x: string]: any;
        editor: any;
        leaf: any;
        text: any;
    }) => React.JSX.Element;
    hr: ({ attributes, className, editor, element, children, ...props }: {
        [x: string]: any;
        attributes: any;
        className: any;
        editor: any;
        element: any;
        children: any;
    }) => React.JSX.Element;
    table: React.ForwardRefExoticComponent<Omit<Omit<Omit<{
        elementToAttributes?: (element: import("@udecode/plate-common").TElement) => any;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & {
        element: import("@udecode/plate-common").TElement;
    } & Omit<import("slate-react").RenderElementProps, "element"> & React.RefAttributes<HTMLDivElement>, "ref">, never> & React.RefAttributes<any>, "ref"> & React.RefAttributes<unknown>>;
    tr: React.ForwardRefExoticComponent<{
        hideBorder?: boolean;
    } & Omit<Omit<{
        elementToAttributes?: (element: import("@udecode/plate-common").TElement) => any;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & {
        element: import("@udecode/plate-common").TElement;
    } & Omit<import("slate-react").RenderElementProps, "element"> & React.RefAttributes<HTMLDivElement>, "ref">, "hideBorder"> & React.RefAttributes<any>>;
    td: React.ForwardRefExoticComponent<{
        hideBorder?: boolean;
        isHeader?: boolean;
    } & Omit<Omit<{
        elementToAttributes?: (element: import("@udecode/plate-common").TElement) => any;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & {
        element: import("@udecode/plate-common").TElement;
    } & Omit<import("slate-react").RenderElementProps, "element"> & React.RefAttributes<HTMLDivElement>, "ref">, "hideBorder" | "isHeader"> & React.RefAttributes<any>>;
    th: React.ForwardRefExoticComponent<Omit<{
        hideBorder?: boolean;
        isHeader?: boolean;
    } & Omit<Omit<{
        elementToAttributes?: (element: import("@udecode/plate-common").TElement) => any;
    } & Omit<{
        as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
        asChild?: boolean | undefined;
    } & Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & React.RefAttributes<any>, "ref"> & {
        ref?: React.Ref<any>;
    } & import("@udecode/plate-common").PlateRenderNodeProps<import("@udecode/plate-common").Value, import("@udecode/plate-common").PlateEditor<import("@udecode/plate-common").Value>> & {
        element: import("@udecode/plate-common").TElement;
    } & Omit<import("slate-react").RenderElementProps, "element"> & React.RefAttributes<HTMLDivElement>, "ref">, "hideBorder" | "isHeader"> & React.RefAttributes<any>, "ref"> & React.RefAttributes<any>>;
};
