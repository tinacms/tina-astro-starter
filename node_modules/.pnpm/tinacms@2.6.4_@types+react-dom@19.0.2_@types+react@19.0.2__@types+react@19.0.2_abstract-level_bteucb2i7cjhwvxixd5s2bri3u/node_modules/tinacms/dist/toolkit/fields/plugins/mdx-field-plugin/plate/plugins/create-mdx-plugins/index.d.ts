import type { MdxTemplate } from '../../types';
import { type PlateEditor } from '@udecode/plate-common';
export declare const ELEMENT_MDX_INLINE = "mdxJsxTextElement";
export declare const ELEMENT_MDX_BLOCK = "mdxJsxFlowElement";
export declare const createMdxInlinePlugin: <OP = {
    templates: MdxTemplate[];
}, OV extends import("@udecode/plate-common").Value = import("@udecode/plate-common").Value, OE extends PlateEditor<OV> = PlateEditor<OV>>(override?: Partial<import("@udecode/plate-common").PlatePlugin<import("@udecode/plate-common").NoInfer<OP>, OV, OE>>, overrideByKey?: import("@udecode/plate-common").OverrideByKey<OV, OE>) => import("@udecode/plate-common").PlatePlugin<import("@udecode/plate-common").NoInfer<OP>, OV, OE>;
export declare const createMdxBlockPlugin: <OP = import("@udecode/plate-common").AnyObject, OV extends import("@udecode/plate-common").Value = import("@udecode/plate-common").Value, OE extends PlateEditor<OV> = PlateEditor<OV>>(override?: Partial<import("@udecode/plate-common").PlatePlugin<import("@udecode/plate-common").NoInfer<OP>, OV, OE>>, overrideByKey?: import("@udecode/plate-common").OverrideByKey<OV, OE>) => import("@udecode/plate-common").PlatePlugin<import("@udecode/plate-common").NoInfer<OP>, OV, OE>;
export declare const insertMDX: (editor: PlateEditor, value: MdxTemplate) => void;
