"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ELEMENT_BLOCKQUOTE: () => ELEMENT_BLOCKQUOTE,
  createBlockquotePlugin: () => createBlockquotePlugin,
  withBlockquote: () => withBlockquote
});
module.exports = __toCommonJS(src_exports);

// src/createBlockquotePlugin.ts
var import_server = require("@udecode/plate-common/server");

// src/withBlockquote.ts
var withBlockquote = (editor) => {
  const { shouldMergeNodesRemovePrevNode } = editor;
  if (shouldMergeNodesRemovePrevNode) {
    editor.shouldMergeNodesRemovePrevNode = (prevNodeEntry, curNodeEntry) => {
      const prevNode = prevNodeEntry[0];
      if (prevNode.type === ELEMENT_BLOCKQUOTE)
        return false;
      return shouldMergeNodesRemovePrevNode(prevNodeEntry, curNodeEntry);
    };
  }
  return editor;
};

// src/createBlockquotePlugin.ts
var ELEMENT_BLOCKQUOTE = "blockquote";
var createBlockquotePlugin = (0, import_server.createPluginFactory)({
  deserializeHtml: {
    rules: [
      {
        validNodeName: "BLOCKQUOTE"
      }
    ]
  },
  handlers: {
    onKeyDown: import_server.onKeyDownToggleElement
  },
  isElement: true,
  key: ELEMENT_BLOCKQUOTE,
  options: {
    hotkey: "mod+shift+."
  },
  withOverrides: withBlockquote
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ELEMENT_BLOCKQUOTE,
  createBlockquotePlugin,
  withBlockquote
});
//# sourceMappingURL=index.js.map