var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/createLineHeightPlugin.ts
import {
  ELEMENT_DEFAULT,
  createPluginFactory,
  getPluginType,
  mapInjectPropsToPlugin
} from "@udecode/plate-common/server";
var KEY_LINE_HEIGHT = "lineHeight";
var createLineHeightPlugin = createPluginFactory({
  inject: {
    props: {
      defaultNodeValue: 1.5,
      nodeKey: KEY_LINE_HEIGHT
    }
  },
  key: KEY_LINE_HEIGHT,
  then: (editor) => ({
    inject: {
      props: {
        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)]
      }
    },
    then: (_, plugin) => mapInjectPropsToPlugin(editor, plugin, {
      deserializeHtml: {
        getNode: (el, node) => {
          if (el.style.lineHeight) {
            node[plugin.key] = el.style.lineHeight;
          }
        }
      }
    })
  })
});

// src/hooks/useLineHeightDropdownMenu.ts
import {
  focusEditor,
  useEditorRef,
  useEditorSelector
} from "@udecode/plate-common";
import {
  getBlockAbove,
  getPluginInjectProps,
  isCollapsed
} from "@udecode/plate-common/server";
var useLineHeightDropdownMenuState = () => {
  const editor = useEditorRef();
  const { defaultNodeValue, validNodeValues: values = [] } = getPluginInjectProps(editor, KEY_LINE_HEIGHT);
  const value = useEditorSelector((editor2) => {
    var _a;
    if (isCollapsed(editor2.selection)) {
      const entry = getBlockAbove(editor2);
      if (entry) {
        return (_a = values.find((item) => item === entry[0][KEY_LINE_HEIGHT])) != null ? _a : defaultNodeValue;
      }
    }
  }, []);
  return {
    value,
    values
  };
};
var useLineHeightDropdownMenu = ({
  value
}) => {
  const editor = useEditorRef();
  return {
    radioGroupProps: {
      onValueChange: (newValue) => {
        setLineHeight(editor, {
          value: Number(newValue)
        });
        focusEditor(editor);
      },
      value
    }
  };
};

// src/transforms/setLineHeight.ts
import {
  getPluginInjectProps as getPluginInjectProps2,
  isBlock,
  setElements,
  unsetNodes
} from "@udecode/plate-common/server";
var setLineHeight = (editor, {
  setNodesOptions,
  value
}) => {
  const { defaultNodeValue, nodeKey, validTypes } = getPluginInjectProps2(
    editor,
    KEY_LINE_HEIGHT
  );
  const match = (n) => isBlock(editor, n) && !!validTypes && validTypes.includes(n.type);
  if (value === defaultNodeValue) {
    unsetNodes(editor, nodeKey, __spreadValues({
      match
    }, setNodesOptions));
  } else {
    setElements(
      editor,
      { [nodeKey]: value },
      __spreadValues({
        match
      }, setNodesOptions)
    );
  }
};
export {
  KEY_LINE_HEIGHT,
  createLineHeightPlugin,
  setLineHeight,
  useLineHeightDropdownMenu,
  useLineHeightDropdownMenuState
};
//# sourceMappingURL=index.mjs.map