{"version":3,"sources":["../src/createLineHeightPlugin.ts","../src/hooks/useLineHeightDropdownMenu.ts","../src/transforms/setLineHeight.ts"],"sourcesContent":["import {\n  ELEMENT_DEFAULT,\n  createPluginFactory,\n  getPluginType,\n  mapInjectPropsToPlugin,\n} from '@udecode/plate-common/server';\n\nexport const KEY_LINE_HEIGHT = 'lineHeight';\n\n/**\n * Enables support for text alignment, useful to align your content to left,\n * right and center it.\n */\nexport const createLineHeightPlugin = createPluginFactory({\n  inject: {\n    props: {\n      defaultNodeValue: 1.5,\n      nodeKey: KEY_LINE_HEIGHT,\n    },\n  },\n  key: KEY_LINE_HEIGHT,\n  then: (editor) => ({\n    inject: {\n      props: {\n        validTypes: [getPluginType(editor, ELEMENT_DEFAULT)],\n      },\n    },\n    then: (_, plugin) =>\n      mapInjectPropsToPlugin(editor, plugin, {\n        deserializeHtml: {\n          getNode: (el, node) => {\n            if (el.style.lineHeight) {\n              node[plugin.key] = el.style.lineHeight;\n            }\n          },\n        },\n      }),\n  }),\n});\n","import {\n  focusEditor,\n  useEditorRef,\n  useEditorSelector,\n} from '@udecode/plate-common';\nimport {\n  type TElement,\n  getBlockAbove,\n  getPluginInjectProps,\n  isCollapsed,\n} from '@udecode/plate-common/server';\n\nimport { KEY_LINE_HEIGHT, setLineHeight } from '../index';\n\nexport const useLineHeightDropdownMenuState = () => {\n  const editor = useEditorRef();\n  const { defaultNodeValue, validNodeValues: values = [] } =\n    getPluginInjectProps(editor, KEY_LINE_HEIGHT);\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  const value: string | undefined = useEditorSelector((editor) => {\n    if (isCollapsed(editor.selection)) {\n      const entry = getBlockAbove<TElement>(editor);\n\n      if (entry) {\n        return (\n          values.find((item) => item === entry[0][KEY_LINE_HEIGHT]) ??\n          defaultNodeValue\n        );\n      }\n    }\n  }, []);\n\n  return {\n    value,\n    values,\n  };\n};\n\nexport const useLineHeightDropdownMenu = ({\n  value,\n}: ReturnType<typeof useLineHeightDropdownMenuState>) => {\n  const editor = useEditorRef();\n\n  return {\n    radioGroupProps: {\n      onValueChange: (newValue: string) => {\n        setLineHeight(editor, {\n          value: Number(newValue),\n        });\n        focusEditor(editor);\n      },\n      value,\n    },\n  };\n};\n","import {\n  type PlateEditor,\n  type SetNodesOptions,\n  type TNodeMatch,\n  type Value,\n  getPluginInjectProps,\n  isBlock,\n  setElements,\n  unsetNodes,\n} from '@udecode/plate-common/server';\n\nimport { KEY_LINE_HEIGHT } from '../createLineHeightPlugin';\n\nexport const setLineHeight = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    setNodesOptions,\n    value,\n  }: { setNodesOptions?: SetNodesOptions<V>; value: number }\n): void => {\n  const { defaultNodeValue, nodeKey, validTypes } = getPluginInjectProps(\n    editor,\n    KEY_LINE_HEIGHT\n  );\n\n  const match: TNodeMatch = (n) =>\n    isBlock(editor, n) && !!validTypes && validTypes.includes(n.type as string);\n\n  if (value === defaultNodeValue) {\n    unsetNodes(editor, nodeKey!, {\n      match,\n      ...setNodesOptions,\n    });\n  } else {\n    setElements(\n      editor,\n      { [nodeKey!]: value },\n      {\n        match: match as any,\n        ...setNodesOptions,\n      }\n    );\n  }\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEA,IAAM,kBAAkB;AAMxB,IAAM,yBAAyB,oBAAoB;AAAA,EACxD,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,kBAAkB;AAAA,MAClB,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACA,KAAK;AAAA,EACL,MAAM,CAAC,YAAY;AAAA,IACjB,QAAQ;AAAA,MACN,OAAO;AAAA,QACL,YAAY,CAAC,cAAc,QAAQ,eAAe,CAAC;AAAA,MACrD;AAAA,IACF;AAAA,IACA,MAAM,CAAC,GAAG,WACR,uBAAuB,QAAQ,QAAQ;AAAA,MACrC,iBAAiB;AAAA,QACf,SAAS,CAAC,IAAI,SAAS;AACrB,cAAI,GAAG,MAAM,YAAY;AACvB,iBAAK,OAAO,GAAG,IAAI,GAAG,MAAM;AAAA,UAC9B;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACL;AACF,CAAC;;;ACtCD;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP;AAAA,EAEE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAIA,IAAM,iCAAiC,MAAM;AAClD,QAAM,SAAS,aAAa;AAC5B,QAAM,EAAE,kBAAkB,iBAAiB,SAAS,CAAC,EAAE,IACrD,qBAAqB,QAAQ,eAAe;AAG9C,QAAM,QAA4B,kBAAkB,CAACA,YAAW;AApBlE;AAqBI,QAAI,YAAYA,QAAO,SAAS,GAAG;AACjC,YAAM,QAAQ,cAAwBA,OAAM;AAE5C,UAAI,OAAO;AACT,gBACE,YAAO,KAAK,CAAC,SAAS,SAAS,MAAM,CAAC,EAAE,eAAe,CAAC,MAAxD,YACA;AAAA,MAEJ;AAAA,IACF;AAAA,EACF,GAAG,CAAC,CAAC;AAEL,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAEO,IAAM,4BAA4B,CAAC;AAAA,EACxC;AACF,MAAyD;AACvD,QAAM,SAAS,aAAa;AAE5B,SAAO;AAAA,IACL,iBAAiB;AAAA,MACf,eAAe,CAAC,aAAqB;AACnC,sBAAc,QAAQ;AAAA,UACpB,OAAO,OAAO,QAAQ;AAAA,QACxB,CAAC;AACD,oBAAY,MAAM;AAAA,MACpB;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;ACvDA;AAAA,EAKE,wBAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAIA,IAAM,gBAAgB,CAC3B,QACA;AAAA,EACE;AAAA,EACA;AACF,MACS;AACT,QAAM,EAAE,kBAAkB,SAAS,WAAW,IAAIC;AAAA,IAChD;AAAA,IACA;AAAA,EACF;AAEA,QAAM,QAAoB,CAAC,MACzB,QAAQ,QAAQ,CAAC,KAAK,CAAC,CAAC,cAAc,WAAW,SAAS,EAAE,IAAc;AAE5E,MAAI,UAAU,kBAAkB;AAC9B,eAAW,QAAQ,SAAU;AAAA,MAC3B;AAAA,OACG,gBACJ;AAAA,EACH,OAAO;AACL;AAAA,MACE;AAAA,MACA,EAAE,CAAC,OAAQ,GAAG,MAAM;AAAA,MACpB;AAAA,QACE;AAAA,SACG;AAAA,IAEP;AAAA,EACF;AACF;","names":["editor","getPluginInjectProps","getPluginInjectProps"]}