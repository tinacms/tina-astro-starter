"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  KEY_LINE_HEIGHT: () => KEY_LINE_HEIGHT,
  createLineHeightPlugin: () => createLineHeightPlugin,
  setLineHeight: () => setLineHeight,
  useLineHeightDropdownMenu: () => useLineHeightDropdownMenu,
  useLineHeightDropdownMenuState: () => useLineHeightDropdownMenuState
});
module.exports = __toCommonJS(src_exports);

// src/createLineHeightPlugin.ts
var import_server = require("@udecode/plate-common/server");
var KEY_LINE_HEIGHT = "lineHeight";
var createLineHeightPlugin = (0, import_server.createPluginFactory)({
  inject: {
    props: {
      defaultNodeValue: 1.5,
      nodeKey: KEY_LINE_HEIGHT
    }
  },
  key: KEY_LINE_HEIGHT,
  then: (editor) => ({
    inject: {
      props: {
        validTypes: [(0, import_server.getPluginType)(editor, import_server.ELEMENT_DEFAULT)]
      }
    },
    then: (_, plugin) => (0, import_server.mapInjectPropsToPlugin)(editor, plugin, {
      deserializeHtml: {
        getNode: (el, node) => {
          if (el.style.lineHeight) {
            node[plugin.key] = el.style.lineHeight;
          }
        }
      }
    })
  })
});

// src/hooks/useLineHeightDropdownMenu.ts
var import_plate_common = require("@udecode/plate-common");
var import_server2 = require("@udecode/plate-common/server");
var useLineHeightDropdownMenuState = () => {
  const editor = (0, import_plate_common.useEditorRef)();
  const { defaultNodeValue, validNodeValues: values = [] } = (0, import_server2.getPluginInjectProps)(editor, KEY_LINE_HEIGHT);
  const value = (0, import_plate_common.useEditorSelector)((editor2) => {
    var _a;
    if ((0, import_server2.isCollapsed)(editor2.selection)) {
      const entry = (0, import_server2.getBlockAbove)(editor2);
      if (entry) {
        return (_a = values.find((item) => item === entry[0][KEY_LINE_HEIGHT])) != null ? _a : defaultNodeValue;
      }
    }
  }, []);
  return {
    value,
    values
  };
};
var useLineHeightDropdownMenu = ({
  value
}) => {
  const editor = (0, import_plate_common.useEditorRef)();
  return {
    radioGroupProps: {
      onValueChange: (newValue) => {
        setLineHeight(editor, {
          value: Number(newValue)
        });
        (0, import_plate_common.focusEditor)(editor);
      },
      value
    }
  };
};

// src/transforms/setLineHeight.ts
var import_server3 = require("@udecode/plate-common/server");
var setLineHeight = (editor, {
  setNodesOptions,
  value
}) => {
  const { defaultNodeValue, nodeKey, validTypes } = (0, import_server3.getPluginInjectProps)(
    editor,
    KEY_LINE_HEIGHT
  );
  const match = (n) => (0, import_server3.isBlock)(editor, n) && !!validTypes && validTypes.includes(n.type);
  if (value === defaultNodeValue) {
    (0, import_server3.unsetNodes)(editor, nodeKey, __spreadValues({
      match
    }, setNodesOptions));
  } else {
    (0, import_server3.setElements)(
      editor,
      { [nodeKey]: value },
      __spreadValues({
        match
      }, setNodesOptions)
    );
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  KEY_LINE_HEIGHT,
  createLineHeightPlugin,
  setLineHeight,
  useLineHeightDropdownMenu,
  useLineHeightDropdownMenuState
});
//# sourceMappingURL=index.js.map