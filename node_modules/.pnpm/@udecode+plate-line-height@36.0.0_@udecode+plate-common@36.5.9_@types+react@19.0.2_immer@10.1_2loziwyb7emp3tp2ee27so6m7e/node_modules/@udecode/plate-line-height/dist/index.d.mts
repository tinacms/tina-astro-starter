import * as _udecode_plate_common_server from '@udecode/plate-common/server';
import { Value, PlateEditor, SetNodesOptions } from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';
import * as _udecode_utils from '@udecode/utils';

declare const KEY_LINE_HEIGHT = "lineHeight";
/**
 * Enables support for text alignment, useful to align your content to left,
 * right and center it.
 */
declare const createLineHeightPlugin: <OP = _udecode_utils.AnyObject, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

declare const useLineHeightDropdownMenuState: () => {
    value: string | undefined;
    values: any[];
};
declare const useLineHeightDropdownMenu: ({ value, }: ReturnType<typeof useLineHeightDropdownMenuState>) => {
    radioGroupProps: {
        onValueChange: (newValue: string) => void;
        value: string | undefined;
    };
};

declare const setLineHeight: <V extends Value>(editor: PlateEditor<V>, { setNodesOptions, value, }: {
    setNodesOptions?: SetNodesOptions<V> | undefined;
    value: number;
}) => void;

export { KEY_LINE_HEIGHT, createLineHeightPlugin, setLineHeight, useLineHeightDropdownMenu, useLineHeightDropdownMenuState };
