import * as _udecode_plate_common_server from '@udecode/plate-common/server';
import { Value, PlateEditor, TDescendant } from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';
import { ParseConfig } from 'papaparse';

type DeserializeCsvParseOptions = ParseConfig;
interface DeserializeCsvPlugin {
    /**
     * Percentage in decimal form, from 0 to a very large number, 0 for no errors
     * allowed, Percentage based on number of errors compared to number of rows
     *
     * @default 0.25
     */
    errorTolerance?: number;
    /**
     * Options to pass to papaparse
     *
     * @default { header: true }
     * @see https://www.papaparse.com/docs#config
     */
    parseOptions?: DeserializeCsvParseOptions;
}

declare const KEY_DESERIALIZE_CSV = "deserializeCsv";
/** Enables support for deserializing content from CSV format to Slate format. */
declare const createDeserializeCsvPlugin: <OP = DeserializeCsvPlugin, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

declare const deserializeCsv: <V extends Value>(editor: PlateEditor<V>, { data, ...parseOptions }: {
    data: string;
} & DeserializeCsvParseOptions) => TDescendant[] | undefined;

export { type DeserializeCsvParseOptions, type DeserializeCsvPlugin, KEY_DESERIALIZE_CSV, createDeserializeCsvPlugin, deserializeCsv };
