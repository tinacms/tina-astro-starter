var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/deserializer/createDeserializeCsvPlugin.ts
import { createPluginFactory } from "@udecode/plate-common/server";

// src/deserializer/utils/deserializeCsv.ts
import {
  ELEMENT_DEFAULT,
  getPlugin,
  getPluginType
} from "@udecode/plate-common/server";
import papaparse from "papaparse";
var { parse } = papaparse;
var isValidCsv = (data, errors, errorTolerance) => {
  if (errorTolerance < 0)
    errorTolerance = 0;
  return !(!data || data.length < 2 || data[0].length < 2 || data[1].length < 2 || errors.length > 0 && errors.length > errorTolerance * data.length);
};
var deserializeCsv = (editor, _a) => {
  var _b = _a, {
    data
  } = _b, parseOptions = __objRest(_b, [
    "data"
  ]);
  const {
    options: { errorTolerance, parseOptions: pluginParseOptions }
  } = getPlugin(
    editor,
    KEY_DESERIALIZE_CSV
  );
  const testCsv = parse(data, { preview: 2 });
  if (testCsv.errors.length === 0) {
    const csv = parse(data, __spreadValues(__spreadValues({}, pluginParseOptions), parseOptions));
    if (!isValidCsv(
      csv.data,
      csv.errors,
      errorTolerance
    ))
      return;
    const paragraph = getPluginType(editor, ELEMENT_DEFAULT);
    const table = getPluginType(editor, "table");
    const th = getPluginType(editor, "th");
    const tr = getPluginType(editor, "tr");
    const td = getPluginType(editor, "td");
    const ast = {
      children: [],
      type: table
    };
    if (csv.meta.fields) {
      ast.children.push({
        children: csv.meta.fields.map((field) => ({
          children: [{ children: [{ text: field }], type: paragraph }],
          type: th
        })),
        type: tr
      });
      for (const row of csv.data) {
        ast.children.push({
          children: csv.meta.fields.map((field) => ({
            children: [
              { children: [{ text: row[field] || "" }], type: paragraph }
            ],
            type: td
          })),
          type: tr
        });
      }
    } else {
      for (const row of csv.data) {
        ast.children.push({
          children: [],
          type: tr
        });
        for (const cell of row) {
          ast.children.at(-1).children.push({
            children: [{ children: [{ text: cell }], type: paragraph }],
            type: td
          });
        }
      }
    }
    return [
      {
        children: [{ text: "" }],
        type: paragraph
      },
      ast,
      {
        children: [{ text: "" }],
        type: paragraph
      }
    ];
  }
};

// src/deserializer/createDeserializeCsvPlugin.ts
var KEY_DESERIALIZE_CSV = "deserializeCsv";
var createDeserializeCsvPlugin = createPluginFactory({
  key: KEY_DESERIALIZE_CSV,
  options: {
    errorTolerance: 0.25,
    parseOptions: {
      header: true
    }
  },
  then: (editor) => ({
    editor: {
      insertData: {
        format: "text/plain",
        getFragment: ({ data }) => deserializeCsv(editor, { data })
      }
    }
  })
});
export {
  KEY_DESERIALIZE_CSV,
  createDeserializeCsvPlugin,
  deserializeCsv
};
//# sourceMappingURL=index.mjs.map