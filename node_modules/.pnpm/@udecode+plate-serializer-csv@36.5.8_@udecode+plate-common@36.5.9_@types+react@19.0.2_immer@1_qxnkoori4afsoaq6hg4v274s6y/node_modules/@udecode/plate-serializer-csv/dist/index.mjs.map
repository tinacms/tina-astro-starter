{"version":3,"sources":["../src/deserializer/createDeserializeCsvPlugin.ts","../src/deserializer/utils/deserializeCsv.ts"],"sourcesContent":["import { createPluginFactory } from '@udecode/plate-common/server';\n\nimport type { DeserializeCsvPlugin } from './types';\n\nimport { deserializeCsv } from './utils/index';\n\nexport const KEY_DESERIALIZE_CSV = 'deserializeCsv';\n\n/** Enables support for deserializing content from CSV format to Slate format. */\nexport const createDeserializeCsvPlugin =\n  createPluginFactory<DeserializeCsvPlugin>({\n    key: KEY_DESERIALIZE_CSV,\n    options: {\n      errorTolerance: 0.25,\n      parseOptions: {\n        header: true,\n      },\n    },\n    then: (editor) => ({\n      editor: {\n        insertData: {\n          format: 'text/plain',\n          getFragment: ({ data }) => deserializeCsv(editor, { data }),\n        },\n      },\n    }),\n  });\n","import {\n  ELEMENT_DEFAULT,\n  type PlateEditor,\n  type TDescendant,\n  type TElement,\n  type TNode,\n  type Value,\n  getPlugin,\n  getPluginType,\n} from '@udecode/plate-common/server';\nimport papaparse from 'papaparse';\n\nimport type {\n  DeserializeCsvParseOptions,\n  DeserializeCsvPlugin,\n} from '../types';\n\nimport { KEY_DESERIALIZE_CSV } from '../createDeserializeCsvPlugin';\n\nconst { parse } = papaparse;\n\nconst isValidCsv = (\n  data: Record<string, string>[][],\n  errors: Record<string, string>[][],\n  errorTolerance: number\n) => {\n  if (errorTolerance < 0) errorTolerance = 0;\n\n  return !(\n    !data ||\n    data.length < 2 ||\n    data[0].length < 2 ||\n    data[1].length < 2 ||\n    (errors.length > 0 && errors.length > errorTolerance * data.length)\n  );\n};\n\nexport const deserializeCsv = <V extends Value>(\n  editor: PlateEditor<V>,\n  {\n    data,\n    ...parseOptions\n  }: {\n    data: string;\n  } & DeserializeCsvParseOptions\n): TDescendant[] | undefined => {\n  const {\n    options: { errorTolerance, parseOptions: pluginParseOptions },\n  } = getPlugin<DeserializeCsvPlugin, V, PlateEditor<V>>(\n    editor,\n    KEY_DESERIALIZE_CSV\n  );\n\n  // Verify it's a csv string\n  const testCsv = parse(data, { preview: 2 });\n\n  if (testCsv.errors.length === 0) {\n    const csv = parse(data, {\n      ...pluginParseOptions,\n      ...parseOptions,\n    });\n\n    if (\n      !isValidCsv(\n        csv.data as Record<string, string>[][],\n        csv.errors as unknown as Record<string, string>[][],\n        errorTolerance!\n      )\n    )\n      return;\n\n    const paragraph = getPluginType(editor, ELEMENT_DEFAULT);\n    const table = getPluginType(editor, 'table');\n    const th = getPluginType(editor, 'th');\n    const tr = getPluginType(editor, 'tr');\n    const td = getPluginType(editor, 'td');\n\n    const ast: TNode = {\n      children: [],\n      type: table,\n    };\n\n    if (csv.meta.fields) {\n      // csv file has headers, data structure is an array of objects keyed on the heading title\n      ast.children.push({\n        children: csv.meta.fields.map((field: string) => ({\n          children: [{ children: [{ text: field }], type: paragraph }],\n          type: th,\n        })),\n        type: tr,\n      });\n\n      for (const row of csv.data as Record<string, string>[]) {\n        ast.children.push({\n          children: csv.meta.fields.map((field: string) => ({\n            children: [\n              { children: [{ text: row[field] || '' }], type: paragraph },\n            ],\n            type: td,\n          })),\n          type: tr,\n        });\n      }\n    } else {\n      // csv is an array of arrays\n      for (const row of csv.data as [string[]]) {\n        ast.children.push({\n          children: [],\n          type: tr,\n        });\n\n        for (const cell of row) {\n          (ast.children.at(-1) as TElement).children.push({\n            children: [{ children: [{ text: cell }], type: paragraph }],\n            type: td,\n          });\n        }\n      }\n    }\n\n    return [\n      {\n        children: [{ text: '' }],\n        type: paragraph,\n      },\n      ast,\n      {\n        children: [{ text: '' }],\n        type: paragraph,\n      },\n    ];\n  }\n};\n"],"mappings":"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","names":[]}