{"version":3,"sources":["../src/index.ts","../src/createIndentListPlugin.ts","../src/injectIndentListComponent.tsx","../src/types.ts","../src/onKeyDownIndentList.ts","../src/transforms/indentList.ts","../src/transforms/outdentList.ts","../src/transforms/setIndentListNode.ts","../src/transforms/setIndentListNodes.ts","../src/transforms/setIndentListSiblingNodes.ts","../src/queries/getNextIndentList.ts","../src/queries/getSiblingIndentList.ts","../src/queries/getPreviousIndentList.ts","../src/queries/getIndentListSiblings.ts","../src/transforms/toggleIndentList.ts","../src/queries/areEqListStyleType.ts","../src/transforms/toggleIndentListSet.ts","../src/transforms/toggleIndentListUnset.ts","../src/transforms/toggleIndentListByPath.ts","../src/withIndentList.ts","../src/normalizeIndentList.ts","../src/normalizers/normalizeIndentListNotIndented.ts","../src/normalizers/normalizeIndentListStart.ts","../src/normalizers/normalizeFirstIndentListStart.ts","../src/normalizers/deleteBackwardIndentList.ts","../src/normalizers/insertBreakIndentList.ts","../src/normalizers/shouldMergeNodesRemovePrevNodeIndentList.ts","../src/hooks/someIndentList.ts","../src/hooks/someIndentTodo.ts","../src/hooks/useIndentListToolbarButton.ts","../src/hooks/useIndentTodoListElement.ts","../src/hooks/useIndentTodoToolbarButton.ts","../src/queries/getSiblingListStyleType.ts"],"sourcesContent":["/**\n * @file Automatically generated by barrelsby.\n */\n\nexport * from './createIndentListPlugin';\nexport * from './injectIndentListComponent';\nexport * from './normalizeIndentList';\nexport * from './onKeyDownIndentList';\nexport * from './types';\nexport * from './withIndentList';\nexport * from './hooks/index';\nexport * from './normalizers/index';\nexport * from './queries/index';\nexport * from './transforms/index';\n","import {\n  ELEMENT_DEFAULT,\n  KEY_DESERIALIZE_HTML,\n  type PlateRenderElementProps,\n  type TElement,\n  createPluginFactory,\n  getPluginType,\n  isHtmlBlockElement,\n  postCleanHtml,\n  traverseHtmlElements,\n} from '@udecode/plate-common/server';\n\nimport type { GetSiblingIndentListOptions } from './queries/getSiblingIndentList';\nimport type { ListStyleType } from './types';\n\nimport { injectIndentListComponent } from './injectIndentListComponent';\nimport { onKeyDownIndentList } from './onKeyDownIndentList';\nimport { withIndentList } from './withIndentList';\n\nexport const KEY_LIST_STYLE_TYPE = 'listStyleType';\n\nexport const KEY_LIST_START = 'listStart';\n\nexport const KEY_LIST_RESTART = 'listRestart';\n\nexport const KEY_LIST_CHECKED = 'checked';\n\nexport const KEY_TODO_STYLE_TYPE = 'todo';\n\nexport type MarkerFC = React.FC<Omit<PlateRenderElementProps, 'children'>>;\n\nexport type LiFC = React.FC<PlateRenderElementProps>;\n\nexport interface IndentListPlugin {\n  /** X Map html element to list style type. */\n  getListStyleType?: (element: HTMLElement) => ListStyleType;\n\n  getSiblingIndentListOptions?: GetSiblingIndentListOptions<TElement>;\n\n  listStyleTypes?: Record<\n    string,\n    {\n      isOrdered?: boolean;\n      liComponent?: LiFC;\n      markerComponent?: MarkerFC;\n      type: string;\n    }\n  >;\n}\n\nexport const createIndentListPlugin = createPluginFactory<IndentListPlugin>({\n  handlers: {\n    onKeyDown: onKeyDownIndentList,\n  },\n  inject: {\n    belowComponent: injectIndentListComponent,\n  },\n  key: KEY_LIST_STYLE_TYPE,\n  options: {\n    getListStyleType: (element) => element.style.listStyleType as ListStyleType,\n  },\n  then: (editor, { options }) => ({\n    deserializeHtml: {\n      getNode: (element) => ({\n        // gdoc uses aria-level attribute\n        indent: Number(element.getAttribute('aria-level')),\n        listStyleType: options.getListStyleType?.(element),\n        type: getPluginType(editor, ELEMENT_DEFAULT),\n      }),\n      isElement: true,\n      rules: [\n        {\n          validNodeName: 'LI',\n        },\n      ],\n    },\n    inject: {\n      pluginsByKey: {\n        [KEY_DESERIALIZE_HTML]: {\n          editor: {\n            insertData: {\n              transformData: (data) => {\n                const document = new DOMParser().parseFromString(\n                  data,\n                  'text/html'\n                );\n                const { body } = document;\n\n                traverseHtmlElements(body, (element) => {\n                  if (element.tagName === 'LI') {\n                    const { childNodes } = element;\n\n                    // replace li block children (e.g. p) by their children\n                    const liChildren: Node[] = [];\n                    childNodes.forEach((child) => {\n                      if (isHtmlBlockElement(child as Element)) {\n                        liChildren.push(...child.childNodes);\n                      } else {\n                        liChildren.push(child);\n                      }\n                    });\n\n                    element.replaceChildren(...liChildren);\n\n                    // TODO: recursive check on ul parents for indent\n\n                    return false;\n                  }\n\n                  return true;\n                });\n\n                return postCleanHtml(body.innerHTML);\n              },\n            },\n          },\n        },\n      },\n    },\n  }),\n  withOverrides: withIndentList,\n});\n","import React from 'react';\n\nimport {\n  type InjectComponentProps,\n  type InjectComponentReturnType,\n  getPluginOptions,\n} from '@udecode/plate-common/server';\nimport { clsx } from 'clsx';\n\nimport {\n  type IndentListPlugin,\n  KEY_LIST_START,\n  KEY_LIST_STYLE_TYPE,\n} from './createIndentListPlugin';\nimport { ULIST_STYLE_TYPES } from './types';\n\nexport const injectIndentListComponent = (\n  injectProps: InjectComponentProps\n): InjectComponentReturnType => {\n  const { element } = injectProps;\n\n  const listStyleType = element[KEY_LIST_STYLE_TYPE] as string;\n  const listStart = element[KEY_LIST_START] as number;\n\n  if (listStyleType) {\n    let className = clsx(`slate-${KEY_LIST_STYLE_TYPE}-${listStyleType}`);\n    const style: React.CSSProperties = {\n      listStyleType,\n      margin: 0,\n      padding: 0,\n      position: 'relative',\n    };\n\n    return function Component({ children, ...props }) {\n      const { editor } = props;\n\n      const { listStyleTypes = {} } = getPluginOptions<IndentListPlugin>(\n        editor,\n        KEY_LIST_STYLE_TYPE\n      );\n\n      let listOptions = listStyleTypes[listStyleType];\n\n      let isOrdered = true;\n\n      if (listOptions) {\n        isOrdered = !!listOptions.isOrdered;\n      } else {\n        if (ULIST_STYLE_TYPES.includes(listStyleType as any)) {\n          isOrdered = false;\n        }\n\n        listOptions = {} as any;\n      }\n\n      className = isOrdered\n        ? clsx(className, 'slate-ol')\n        : clsx(className, 'slate-ul');\n\n      const List = isOrdered ? 'ol' : 'ul';\n\n      const {\n        liComponent: Li = (liProps) => <li>{liProps.children}</li>,\n        markerComponent: Marker = () => null,\n      } = listOptions;\n\n      return (\n        <List className={className} start={listStart} style={style}>\n          <Marker {...props} />\n\n          <Li {...props}>{children}</Li>\n        </List>\n      );\n    };\n  }\n};\n","export enum ListStyleType {\n  ArabicIndic = 'arabic-indic',\n  Armenian = 'armenian',\n  Bengali = 'bengali',\n  Cambodian = 'cambodian',\n  Circle = 'circle',\n  CjkDecimal = 'cjk-decimal',\n  CjkEarthlyBranch = 'cjk-earthly-branch',\n  CjkHeavenlyStem = 'cjk-heavenly-stem',\n  Decimal = 'decimal',\n  DecimalLeadingZero = 'decimal-leading-zero',\n  Devanagari = 'devanagari',\n  Disc = 'disc',\n  DisclosureClosed = 'disclosure-closed',\n  DisclosureOpen = 'disclosure-open',\n  EthiopicNumeric = 'ethiopic-numeric',\n  Georgian = 'georgian',\n  Gujarati = 'gujarati',\n  Gurmukhi = 'gurmukhi',\n  Hebrew = 'hebrew',\n  Hiragana = 'hiragana',\n  HiraganaIroha = 'hiragana-iroha',\n  Inherit = 'inherit',\n  Initial = 'initial',\n  JapaneseFormal = 'japanese-formal',\n  JapaneseInformal = 'japanese-informal',\n  Kannada = 'kannada',\n  Katakana = 'katakana',\n  KatakanaIroha = 'katakana-iroha',\n  Khmer = 'khmer',\n  KoreanHangulFormal = 'korean-hangul-formal',\n  KoreanHanjaFormal = 'korean-hanja-formal',\n  KoreanHanjaInformal = 'korean-hanja-informal',\n  Lao = 'lao',\n  LowerAlpha = 'lower-alpha',\n  LowerArmenian = 'lower-armenian',\n  LowerGreek = 'lower-greek',\n  LowerLatin = 'lower-latin',\n  LowerRoman = 'lower-roman',\n  Malayalam = 'malayalam',\n  Mongolian = 'mongolian',\n  Myanmar = 'myanmar',\n  None = 'none',\n  Oriya = 'oriya',\n  Persian = 'persian',\n  SimpChineseFormal = 'simp-chinese-formal',\n  SimpChineseInformal = 'simp-chinese-informal',\n  Square = 'square',\n  Tamil = 'tamil',\n  Telugu = 'telugu',\n  Thai = 'thai',\n  Tibetan = 'tibetan',\n  TradChineseFormal = 'trad-chinese-formal',\n  TradChineseInformal = 'trad-chinese-informal',\n  UpperAlpha = 'upper-alpha',\n  UpperArmenian = 'upper-armenian',\n  UpperLatin = 'upper-latin',\n  UpperRoman = 'upper-roman',\n}\n\nexport const ULIST_STYLE_TYPES = [\n  ListStyleType.Disc,\n  ListStyleType.Circle,\n  ListStyleType.Square,\n  ListStyleType.DisclosureOpen,\n  ListStyleType.DisclosureClosed,\n] as const;\n","import {\n  type KeyboardHandlerReturnType,\n  type PlateEditor,\n  type TElement,\n  type Value,\n  type WithPlatePlugin,\n  getBlockAbove,\n  isBlockAboveEmpty,\n  isHotkey,\n} from '@udecode/plate-common/server';\n\nimport {\n  type IndentListPlugin,\n  KEY_LIST_STYLE_TYPE,\n} from './createIndentListPlugin';\nimport { outdentList } from './transforms/index';\n\nexport const onKeyDownIndentList =\n  <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(\n    editor: E,\n    _plugin: WithPlatePlugin<IndentListPlugin, V, E>\n  ): KeyboardHandlerReturnType =>\n  (e) => {\n    if (e.defaultPrevented) return;\n    if (!editor.selection) return;\n\n    const entry = getBlockAbove(editor);\n\n    if (!entry) return;\n\n    const node = entry[0] as TElement;\n\n    const listStyleType = node[KEY_LIST_STYLE_TYPE] as string | undefined;\n\n    if (!listStyleType) return;\n    if (isHotkey('Enter', e) && isBlockAboveEmpty(editor) && node.indent) {\n      outdentList(editor);\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  };\n","import type { PlateEditor, Value } from '@udecode/plate-common/server';\nimport type { Location } from 'slate';\n\nimport { type SetIndentOptions, setIndent } from '@udecode/plate-indent';\n\nimport {\n  KEY_LIST_CHECKED,\n  KEY_LIST_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\n\nexport interface IndentListOptions<V extends Value = Value>\n  extends SetIndentOptions<V> {\n  at?: Location;\n  listStyleType?: ListStyleType | string;\n}\n\n/** Increase the indentation of the selected blocks. */\nexport const indentList = <V extends Value>(\n  editor: PlateEditor<V>,\n  { listStyleType = ListStyleType.Disc, ...options }: IndentListOptions<V> = {}\n) => {\n  setIndent(editor, {\n    offset: 1,\n    setNodesProps: () => ({\n      [KEY_LIST_STYLE_TYPE]: listStyleType,\n    }),\n    ...options,\n  });\n};\n\nexport const indentTodo = <V extends Value>(\n  editor: PlateEditor<V>,\n  { listStyleType = ListStyleType.Disc, ...options }: IndentListOptions<V> = {}\n) => {\n  setIndent(editor, {\n    offset: 1,\n    setNodesProps: () => ({\n      [KEY_LIST_CHECKED]: false,\n      [KEY_LIST_STYLE_TYPE]: listStyleType,\n    }),\n    ...options,\n  });\n};\n","import type { PlateEditor, Value } from '@udecode/plate-common/server';\n\nimport { setIndent } from '@udecode/plate-indent';\n\nimport type { IndentListOptions } from './indentList';\n\nimport {\n  KEY_LIST_CHECKED,\n  KEY_LIST_STYLE_TYPE,\n} from '../createIndentListPlugin';\n\n/** Decrease the indentation of the selected blocks. */\nexport const outdentList = <V extends Value>(\n  editor: PlateEditor<V>,\n  options: IndentListOptions<V> = {}\n) => {\n  setIndent(editor, {\n    offset: -1,\n    unsetNodesProps: [KEY_LIST_STYLE_TYPE, KEY_LIST_CHECKED],\n    ...options,\n  });\n};\n","import type { Path } from 'slate';\n\nimport {\n  type TEditor,\n  type Value,\n  setElements,\n} from '@udecode/plate-common/server';\nimport { KEY_INDENT } from '@udecode/plate-indent';\n\nimport {\n  KEY_LIST_CHECKED,\n  KEY_LIST_STYLE_TYPE,\n  KEY_TODO_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\n\nexport const setIndentListNode = <V extends Value>(\n  editor: TEditor<V>,\n  {\n    at,\n    indent = 0,\n    listStyleType = ListStyleType.Disc,\n  }: {\n    at: Path;\n    indent?: number;\n    listStyleType?: string;\n  }\n) => {\n  const newIndent = indent || indent + 1;\n\n  setElements(\n    editor,\n    { [KEY_INDENT]: newIndent, [KEY_LIST_STYLE_TYPE]: listStyleType },\n    { at }\n  );\n};\n\nexport const setIndentTodoNode = <V extends Value>(\n  editor: TEditor<V>,\n  {\n    at,\n    indent = 0,\n    listStyleType = KEY_TODO_STYLE_TYPE,\n  }: {\n    at: Path;\n    indent?: number;\n    listStyleType?: string;\n  }\n) => {\n  const newIndent = indent || indent + 1;\n\n  setElements(\n    editor,\n    {\n      [KEY_INDENT]: newIndent,\n      [KEY_LIST_CHECKED]: false,\n      [KEY_LIST_STYLE_TYPE]: listStyleType,\n    },\n    { at }\n  );\n};\n","import {\n  type TEditor,\n  type TNodeEntry,\n  type Value,\n  unsetNodes,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\nimport { KEY_INDENT } from '@udecode/plate-indent';\n\nimport {\n  KEY_LIST_CHECKED,\n  KEY_LIST_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\nimport { setIndentListNode, setIndentTodoNode } from './setIndentListNode';\n\n/**\n * Set indent list to the given entries. Add indent if listStyleType was not\n * defined.\n */\nexport const setIndentListNodes = <V extends Value>(\n  editor: TEditor<V>,\n  entries: TNodeEntry[],\n  {\n    listStyleType = ListStyleType.Disc,\n  }: {\n    listStyleType?: string;\n  }\n) => {\n  withoutNormalizing(editor, () => {\n    entries.forEach((entry) => {\n      const [node, path] = entry;\n\n      let indent = (node[KEY_INDENT] as number) ?? 0;\n      indent =\n        node[KEY_LIST_STYLE_TYPE] || node.hasOwnProperty(KEY_LIST_CHECKED)\n          ? indent\n          : indent + 1;\n\n      if (listStyleType === 'todo') {\n        unsetNodes(editor as any, KEY_LIST_STYLE_TYPE, { at: path });\n        setIndentTodoNode(editor, {\n          at: path,\n          indent,\n          listStyleType,\n        });\n\n        return;\n      }\n\n      unsetNodes(editor as any, KEY_LIST_CHECKED, { at: path });\n      setIndentListNode(editor, {\n        at: path,\n        indent,\n        listStyleType,\n      });\n    });\n  });\n};\n","import {\n  type EElement,\n  type EElementEntry,\n  type TEditor,\n  type Value,\n  unsetNodes,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\nimport { KEY_INDENT } from '@udecode/plate-indent';\n\nimport type { GetSiblingIndentListOptions } from '../queries/getSiblingIndentList';\n\nimport {\n  KEY_LIST_CHECKED,\n  KEY_LIST_STYLE_TYPE,\n  KEY_TODO_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { getIndentListSiblings } from '../queries/getIndentListSiblings';\nimport { ListStyleType } from '../types';\nimport { setIndentListNode, setIndentTodoNode } from './setIndentListNode';\n\n/** Set indent list to entry + siblings. */\nexport const setIndentListSiblingNodes = <\n  N extends EElement<V>,\n  V extends Value = Value,\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  {\n    getSiblingIndentListOptions,\n    listStyleType = ListStyleType.Disc,\n  }: {\n    getSiblingIndentListOptions?: GetSiblingIndentListOptions<N, V>;\n    listStyleType?: string;\n  }\n) => {\n  withoutNormalizing(editor, () => {\n    const siblings = getIndentListSiblings(\n      editor,\n      entry,\n      getSiblingIndentListOptions\n    );\n\n    siblings.forEach(([node, path]) => {\n      if (listStyleType === KEY_TODO_STYLE_TYPE) {\n        unsetNodes(editor as any, KEY_LIST_STYLE_TYPE, { at: path });\n        setIndentTodoNode(editor, {\n          at: path,\n          indent: node[KEY_INDENT] as number,\n          listStyleType,\n        });\n      } else {\n        unsetNodes(editor as any, KEY_LIST_CHECKED, { at: path });\n        setIndentListNode(editor, {\n          at: path,\n          indent: node[KEY_INDENT] as number,\n          listStyleType,\n        });\n      }\n    });\n  });\n};\n","import {\n  type EElement,\n  type EElementEntry,\n  type TEditor,\n  type TNodeEntry,\n  type Value,\n  getNode,\n} from '@udecode/plate-common/server';\nimport { Path } from 'slate';\n\nimport {\n  type GetSiblingIndentListOptions,\n  getSiblingIndentList,\n} from './getSiblingIndentList';\n\n/** Get the next indent list. */\nexport const getNextIndentList = <\n  N extends EElement<V>,\n  V extends Value = Value,\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  options?: Partial<GetSiblingIndentListOptions<N, V>>\n): TNodeEntry<N> | undefined => {\n  return getSiblingIndentList(editor, entry, {\n    getNextEntry: ([, currPath]) => {\n      const nextPath = Path.next(currPath);\n      const nextNode = getNode<N>(editor, nextPath);\n\n      if (!nextNode) return;\n\n      return [nextNode, nextPath];\n    },\n    ...options,\n    getPreviousEntry: undefined,\n  });\n};\n","import {\n  type EElement,\n  type EElementEntry,\n  type EElementOrText,\n  type TEditor,\n  type TNode,\n  type TNodeEntry,\n  type Value,\n  isDefined,\n} from '@udecode/plate-common/server';\nimport { KEY_INDENT } from '@udecode/plate-indent';\n\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\n\nexport interface GetSiblingIndentListOptions<\n  N extends EElement<V>,\n  V extends Value = Value,\n> {\n  breakOnEqIndentNeqListStyleType?: boolean;\n  breakOnLowerIndent?: boolean;\n  breakQuery?: (siblingNode: TNode) => boolean | undefined;\n  /** Query to break lookup */\n  eqIndent?: boolean;\n  getNextEntry?: (\n    entry: TNodeEntry<EElementOrText<V>>\n  ) => TNodeEntry<N> | undefined;\n  getPreviousEntry?: (\n    entry: TNodeEntry<EElementOrText<V>>\n  ) => TNodeEntry<N> | undefined;\n  /** Query to validate lookup. If false, check the next sibling. */\n  query?: (siblingNode: TNode) => boolean | undefined;\n}\n\n/**\n * Get the next sibling indent list node. Default query: the sibling node should\n * have the same listStyleType.\n */\nexport const getSiblingIndentList = <\n  N extends EElement<V>,\n  V extends Value = Value,\n>(\n  editor: TEditor<V>,\n  [node, path]: EElementEntry<V>,\n  {\n    breakOnEqIndentNeqListStyleType = true,\n    breakOnLowerIndent = true,\n    breakQuery,\n    eqIndent = true,\n    getNextEntry,\n    getPreviousEntry,\n    query,\n  }: GetSiblingIndentListOptions<N, V>\n): TNodeEntry<N> | undefined => {\n  if (!getPreviousEntry && !getNextEntry) return;\n\n  const getSiblingEntry = getNextEntry ?? getPreviousEntry!;\n\n  let nextEntry = getSiblingEntry([node, path]);\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (!nextEntry) return;\n\n    const [nextNode, nextPath] = nextEntry;\n\n    const indent = (node as any)[KEY_INDENT] as number;\n    const nextIndent = (nextNode as any)[KEY_INDENT] as number;\n\n    if (!isDefined(nextIndent)) return;\n    if (breakQuery?.(nextNode)) return;\n    if (breakOnLowerIndent && nextIndent < indent) return;\n    if (\n      breakOnEqIndentNeqListStyleType &&\n      nextIndent === indent &&\n      (nextNode as any)[KEY_LIST_STYLE_TYPE] !==\n        (node as any)[KEY_LIST_STYLE_TYPE]\n    )\n      return;\n\n    let valid = !query || query(nextNode as TNode);\n\n    if (valid) {\n      valid = !eqIndent || nextIndent === indent;\n\n      if (valid) return [nextNode, nextPath];\n    }\n\n    nextEntry = getSiblingEntry(nextEntry);\n  }\n};\n","import {\n  type EElement,\n  type EElementEntry,\n  type TEditor,\n  type TNodeEntry,\n  type Value,\n  getNode,\n  getPreviousPath,\n} from '@udecode/plate-common/server';\n\nimport {\n  type GetSiblingIndentListOptions,\n  getSiblingIndentList,\n} from './getSiblingIndentList';\n\n/** Get the previous indent list node. */\nexport const getPreviousIndentList = <\n  N extends EElement<V>,\n  V extends Value = Value,\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  options?: Partial<GetSiblingIndentListOptions<N, V>>\n): TNodeEntry<N> | undefined => {\n  return getSiblingIndentList(editor, entry, {\n    getPreviousEntry: ([, currPath]) => {\n      const prevPath = getPreviousPath(currPath);\n\n      if (!prevPath) return;\n\n      const prevNode = getNode<N>(editor, prevPath);\n\n      if (!prevNode) return;\n\n      return [prevNode, prevPath];\n    },\n    ...options,\n    getNextEntry: undefined,\n  });\n};\n","import type {\n  EElement,\n  EElementEntry,\n  TEditor,\n  TElement,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-common/server';\n\nimport type { GetSiblingIndentListOptions } from './getSiblingIndentList';\n\nimport {\n  KEY_LIST_CHECKED,\n  KEY_LIST_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { getNextIndentList } from './getNextIndentList';\nimport { getPreviousIndentList } from './getPreviousIndentList';\n\nexport interface GetIndentListSiblingsOptions<\n  N extends EElement<V>,\n  V extends Value = Value,\n> extends Partial<GetSiblingIndentListOptions<N, V>> {\n  current?: boolean;\n  next?: boolean;\n  previous?: boolean;\n}\n\nexport const getIndentListSiblings = <\n  N extends EElement<V>,\n  V extends Value = Value,\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  {\n    current = true,\n    next = true,\n    previous = true,\n    ...options\n  }: GetIndentListSiblingsOptions<N, V> = {}\n) => {\n  const siblings: TNodeEntry[] = [];\n\n  const node = entry[0] as TElement;\n\n  // if (!(node as any)[KEY_LIST_STYLE_TYPE]) return siblings;\n  if (!node[KEY_LIST_STYLE_TYPE] && !node.hasOwnProperty(KEY_LIST_CHECKED)) {\n    return siblings;\n  }\n\n  let iterEntry = entry;\n\n  if (previous) {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const prevEntry = getPreviousIndentList<N, V>(editor, iterEntry, options);\n\n      if (!prevEntry) break;\n\n      siblings.push(prevEntry);\n\n      iterEntry = prevEntry;\n    }\n  }\n  if (current) {\n    siblings.push(entry);\n  }\n  if (next) {\n    iterEntry = entry;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const nextEntry = getNextIndentList(editor, iterEntry, options);\n\n      if (!nextEntry) break;\n\n      siblings.push(nextEntry);\n\n      iterEntry = nextEntry;\n    }\n  }\n\n  return siblings;\n};\n","import {\n  type PlateEditor,\n  type TElement,\n  type Value,\n  getBlockAbove,\n  getNodeEntries,\n  getPluginOptions,\n  isCollapsed,\n  isExpanded,\n  setElements,\n  unsetNodes,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\nimport { KEY_INDENT } from '@udecode/plate-indent';\n\nimport type { IndentListOptions } from './indentList';\n\nimport {\n  type IndentListPlugin,\n  KEY_LIST_CHECKED,\n  KEY_LIST_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { areEqListStyleType } from '../queries/areEqListStyleType';\nimport { setIndentListNodes } from './setIndentListNodes';\nimport { setIndentListSiblingNodes } from './setIndentListSiblingNodes';\nimport { toggleIndentListSet } from './toggleIndentListSet';\nimport { toggleIndentListUnset } from './toggleIndentListUnset';\n\n/** Toggle indent list. */\nexport const toggleIndentList = <V extends Value>(\n  editor: PlateEditor<V>,\n  options: IndentListOptions<V>\n) => {\n  const { listStyleType } = options;\n\n  const { getSiblingIndentListOptions } = getPluginOptions<IndentListPlugin, V>(\n    editor,\n    KEY_LIST_STYLE_TYPE\n  );\n\n  if (isCollapsed(editor.selection)) {\n    const entry = getBlockAbove<TElement>(editor);\n\n    if (!entry) return;\n    if (toggleIndentListSet(editor, entry, { listStyleType })) {\n      return;\n    }\n    if (toggleIndentListUnset(editor, entry, { listStyleType })) {\n      return;\n    }\n\n    setIndentListSiblingNodes(editor, entry, {\n      getSiblingIndentListOptions,\n      listStyleType,\n    });\n\n    return;\n  }\n  if (isExpanded(editor.selection)) {\n    const _entries = getNodeEntries<TElement>(editor, { block: true });\n    const entries = [..._entries];\n\n    const eqListStyleType = areEqListStyleType(editor, entries, {\n      listStyleType,\n    });\n\n    if (eqListStyleType) {\n      withoutNormalizing(editor, () => {\n        entries.forEach((entry) => {\n          const [node, path] = entry;\n\n          const indent = node[KEY_INDENT] as number;\n\n          unsetNodes(editor, KEY_LIST_STYLE_TYPE, { at: path });\n\n          if (indent > 1) {\n            setElements(editor, { [KEY_INDENT]: indent - 1 }, { at: path });\n          } else {\n            unsetNodes(editor, [KEY_INDENT, KEY_LIST_CHECKED], { at: path });\n          }\n          // setIndentListNode(editor, {\n          //   listStyleType,\n          //   indent: node[KEY_INDENT],\n          //   at: path,\n          // });\n        });\n      });\n\n      return;\n    }\n\n    setIndentListNodes(editor, entries, { listStyleType });\n  }\n};\n","import type { TEditor, TNodeEntry, Value } from '@udecode/plate-common/server';\n\nimport {\n  KEY_LIST_CHECKED,\n  KEY_LIST_STYLE_TYPE,\n  KEY_TODO_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\n\nexport const areEqListStyleType = <V extends Value>(\n  editor: TEditor<V>,\n  entries: TNodeEntry[],\n  {\n    listStyleType = ListStyleType.Disc,\n  }: {\n    listStyleType?: string;\n  }\n) => {\n  let eqListStyleType = true;\n\n  for (const entry of entries) {\n    const [block] = entry;\n\n    if (listStyleType === KEY_TODO_STYLE_TYPE) {\n      if (!block.hasOwnProperty(KEY_LIST_CHECKED)) {\n        eqListStyleType = false;\n\n        break;\n      }\n\n      continue;\n    }\n    if (\n      !block[KEY_LIST_STYLE_TYPE] ||\n      block[KEY_LIST_STYLE_TYPE] !== listStyleType\n    ) {\n      eqListStyleType = false;\n\n      break;\n    }\n  }\n\n  return eqListStyleType;\n};\n","import type { TEditor, TNodeEntry, Value } from '@udecode/plate-common/server';\n\nimport {\n  KEY_LIST_CHECKED,\n  KEY_LIST_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\nimport { type IndentListOptions, indentList, indentTodo } from './indentList';\n\n/** Set indent list if not set. */\nexport const toggleIndentListSet = <V extends Value>(\n  editor: TEditor<V>,\n  [node, _path]: TNodeEntry,\n  { listStyleType = ListStyleType.Disc, ...options }: IndentListOptions<V>\n) => {\n  if (node.hasOwnProperty(KEY_LIST_CHECKED) || node[KEY_LIST_STYLE_TYPE])\n    return;\n  if (listStyleType === 'todo') {\n    indentTodo(editor as any, {\n      listStyleType,\n      ...options,\n    });\n  } else {\n    indentList(editor as any, {\n      listStyleType,\n      ...options,\n    });\n  }\n\n  return true;\n};\n","import {\n  type TEditor,\n  type TNodeEntry,\n  type Value,\n  unsetNodes,\n} from '@udecode/plate-common/server';\n\nimport {\n  KEY_LIST_CHECKED,\n  KEY_LIST_STYLE_TYPE,\n  KEY_TODO_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { ListStyleType } from '../types';\nimport { outdentList } from './outdentList';\n\n/** Unset list style type if already set. */\nexport const toggleIndentListUnset = <V extends Value>(\n  editor: TEditor<V>,\n  [node, path]: TNodeEntry,\n  {\n    listStyleType = ListStyleType.Disc,\n  }: {\n    listStyleType?: string;\n  }\n) => {\n  if (\n    listStyleType === KEY_TODO_STYLE_TYPE &&\n    node.hasOwnProperty(KEY_LIST_CHECKED)\n  ) {\n    unsetNodes(editor as any, KEY_LIST_CHECKED, { at: path });\n    outdentList(editor as any, { listStyleType });\n\n    return true;\n  }\n  if (listStyleType === node[KEY_LIST_STYLE_TYPE]) {\n    unsetNodes(editor as any, [KEY_LIST_STYLE_TYPE], {\n      at: path,\n    });\n\n    outdentList(editor as any, { listStyleType });\n\n    return true;\n  }\n};\n","import {\n  ELEMENT_DEFAULT,\n  type PlateEditor,\n  type TNodeEntry,\n  type Value,\n  setNodes,\n  unsetNodes,\n} from '@udecode/plate-common';\nimport { KEY_INDENT } from '@udecode/plate-indent';\n\nimport {\n  KEY_LIST_CHECKED,\n  KEY_LIST_STYLE_TYPE,\n} from '../createIndentListPlugin';\n\nexport const toggleIndentListByPath = (\n  editor: PlateEditor<Value>,\n  [node, path]: TNodeEntry,\n  listStyleType: string\n) => {\n  setNodes(\n    editor,\n    {\n      [KEY_INDENT]: node.indent ?? 1,\n      // TODO: normalized if not todo remove this property.\n      [KEY_LIST_CHECKED]: false,\n      [KEY_LIST_STYLE_TYPE]: listStyleType,\n      type: ELEMENT_DEFAULT,\n    },\n    {\n      at: path,\n    }\n  );\n};\n\nexport const toggleIndentListByPathUnSet = (\n  editor: PlateEditor<Value>,\n  [, path]: TNodeEntry\n) =>\n  unsetNodes(editor, [KEY_LIST_STYLE_TYPE, KEY_INDENT, KEY_LIST_CHECKED], {\n    at: path,\n  });\n","import type { PathRef } from 'slate';\n\nimport {\n  type PlateEditor,\n  type TElement,\n  type Value,\n  type WithPlatePlugin,\n  createPathRef,\n  getNode,\n} from '@udecode/plate-common/server';\nimport { KEY_INDENT } from '@udecode/plate-indent';\n\nimport {\n  type IndentListPlugin,\n  KEY_LIST_STYLE_TYPE,\n} from './createIndentListPlugin';\nimport { normalizeIndentList } from './normalizeIndentList';\nimport {\n  deleteBackwardIndentList,\n  shouldMergeNodesRemovePrevNodeIndentList,\n} from './normalizers';\nimport { insertBreakIndentList } from './normalizers/insertBreakIndentList';\nimport { normalizeIndentListStart } from './normalizers/normalizeIndentListStart';\nimport { getNextIndentList } from './queries/getNextIndentList';\nimport { getPreviousIndentList } from './queries/getPreviousIndentList';\nimport { ListStyleType } from './types';\n\nexport const withIndentList = <\n  V extends Value = Value,\n  E extends PlateEditor<V> = PlateEditor<V>,\n>(\n  editor: E,\n  { options }: WithPlatePlugin<IndentListPlugin, V, E>\n) => {\n  const { apply } = editor;\n\n  const { getSiblingIndentListOptions } = options;\n\n  editor.normalizeNode = normalizeIndentList<Value>(editor, options);\n\n  editor.deleteBackward = deleteBackwardIndentList(editor);\n\n  editor.insertBreak = insertBreakIndentList(editor);\n\n  /**\n   * To prevent users without upgraded Slate version from experiencing\n   * anomalies.\n   */\n  if (editor.shouldMergeNodesRemovePrevNode) {\n    editor.shouldMergeNodesRemovePrevNode =\n      shouldMergeNodesRemovePrevNodeIndentList(editor);\n  }\n\n  editor.apply = (operation) => {\n    const { path } = operation as any;\n\n    let nodeBefore: TElement | null = null;\n\n    if (operation.type === 'set_node') {\n      nodeBefore = getNode<TElement>(editor, path);\n    }\n    // If there is a previous indent list, the inserted indent list style type should be the same.\n    // Only for lower-roman and upper-roman as it overlaps with lower-alpha and upper-alpha.\n    if (operation.type === 'insert_node') {\n      const listStyleType = operation.node[KEY_LIST_STYLE_TYPE];\n\n      if (\n        listStyleType &&\n        ['lower-roman', 'upper-roman'].includes(listStyleType as ListStyleType)\n      ) {\n        const prevNodeEntry = getPreviousIndentList<TElement>(\n          editor,\n          [operation.node as TElement, path],\n          {\n            breakOnEqIndentNeqListStyleType: false,\n            eqIndent: false,\n            ...getSiblingIndentListOptions,\n          }\n        );\n\n        if (prevNodeEntry) {\n          const prevListStyleType = prevNodeEntry[0][KEY_LIST_STYLE_TYPE];\n\n          if (\n            prevListStyleType === ListStyleType.LowerAlpha &&\n            listStyleType === ListStyleType.LowerRoman\n          ) {\n            operation.node[KEY_LIST_STYLE_TYPE] = ListStyleType.LowerAlpha;\n          } else if (\n            prevListStyleType === ListStyleType.UpperAlpha &&\n            listStyleType === ListStyleType.UpperRoman\n          ) {\n            operation.node[KEY_LIST_STYLE_TYPE] = ListStyleType.UpperAlpha;\n          }\n        }\n      }\n    }\n\n    // FIXME: delete first list\n    let nextIndentListPathRef: PathRef | null = null;\n\n    if (\n      operation.type === 'merge_node' &&\n      (operation.properties as any)[KEY_LIST_STYLE_TYPE]\n    ) {\n      const node = getNode<TElement>(editor, path);\n\n      if (node) {\n        const nextNodeEntryBefore = getNextIndentList<TElement>(\n          editor,\n          [node, path],\n          getSiblingIndentListOptions\n        );\n\n        if (nextNodeEntryBefore) {\n          nextIndentListPathRef = createPathRef(editor, nextNodeEntryBefore[1]);\n        }\n      }\n    }\n\n    apply(operation);\n\n    if (operation.type === 'merge_node') {\n      const { properties } = operation;\n\n      if ((properties as any)[KEY_LIST_STYLE_TYPE]) {\n        const node = getNode<TElement>(editor, path);\n\n        if (!node) return;\n\n        // const prevNodeEntry = getPreviousIndentList(\n        //   editor,\n        //   [node, path],\n        //   getSiblingIndentListOptions\n        // );\n        // if (!prevNodeEntry) {\n        // normalizeIndentListStart(\n        //   editor,\n        //   [node as any, path],\n        //   getSiblingIndentListOptions\n        // );\n        //   return;\n        // }\n        // normalizeIndentListStart(\n        //   editor,\n        //   prevNodeEntry,\n        //   getSiblingIndentListOptions\n        // );\n\n        normalizeIndentListStart<TElement>(\n          editor,\n          [node, path],\n          getSiblingIndentListOptions\n        );\n\n        if (nextIndentListPathRef) {\n          const nextPath = nextIndentListPathRef.unref();\n\n          if (nextPath) {\n            const nextNode = getNode<TElement>(editor, nextPath);\n\n            if (nextNode) {\n              normalizeIndentListStart<TElement>(\n                editor,\n                [nextNode, nextPath],\n                getSiblingIndentListOptions\n              );\n            }\n          }\n        }\n      }\n    }\n    if (nodeBefore && operation.type === 'set_node') {\n      const prevListStyleType = (operation.properties as any)[\n        KEY_LIST_STYLE_TYPE\n      ];\n      const listStyleType = (operation.newProperties as any)[\n        KEY_LIST_STYLE_TYPE\n      ];\n\n      // Remove list style type\n      if (prevListStyleType && !listStyleType) {\n        const node = getNode(editor, path);\n\n        if (!node) return;\n\n        const nextNodeEntry = getNextIndentList<TElement>(\n          editor,\n          [nodeBefore, path],\n          getSiblingIndentListOptions\n        );\n\n        if (!nextNodeEntry) return;\n\n        normalizeIndentListStart<TElement>(\n          editor,\n          nextNodeEntry,\n          getSiblingIndentListOptions\n        );\n      }\n      // Update list style type\n      if (\n        (prevListStyleType || listStyleType) &&\n        prevListStyleType !== listStyleType\n      ) {\n        const node = getNode<TElement>(editor, path);\n\n        if (!node) return;\n\n        /**\n         * Case:\n         *\n         * - 1-<o>-1 <- toggle ol\n         * - <1>-1-2 <- normalize\n         * - 1-2-3\n         */\n        // const prevNodeEntry = getPreviousIndentList(\n        //   editor,\n        //   [node, path],\n        //   getSiblingIndentListOptions\n        // );\n        // if (prevNodeEntry) {\n        //   normalizeIndentListStart(\n        //     editor,\n        //     prevNodeEntry,\n        //     getSiblingIndentListOptions\n        //   );\n        // }\n\n        /**\n         * Case:\n         *\n         * - 1-<2>-3 <- toggle ul\n         * - 1-o-<3> <- normalize\n         * - 1-o-1\n         */\n        let nextNodeEntry = getNextIndentList<TElement>(\n          editor,\n          [nodeBefore, path],\n          getSiblingIndentListOptions\n        );\n\n        if (nextNodeEntry) {\n          normalizeIndentListStart<TElement>(\n            editor,\n            nextNodeEntry,\n            getSiblingIndentListOptions\n          );\n        }\n\n        nextNodeEntry = getNextIndentList<TElement>(\n          editor,\n          [node, path],\n          getSiblingIndentListOptions\n        );\n\n        if (nextNodeEntry) {\n          normalizeIndentListStart<TElement>(\n            editor,\n            nextNodeEntry,\n            getSiblingIndentListOptions\n          );\n        }\n      }\n\n      const prevIndent = (operation.properties as any)[KEY_INDENT];\n      const indent = (operation.newProperties as any)[KEY_INDENT];\n\n      // Update indent\n      if (prevIndent !== indent) {\n        const node = getNode<TElement>(editor, path);\n\n        if (!node) return;\n\n        /**\n         * Case:\n         *\n         * - 1-<o>-1 <- indent\n         * - <1>-1o-1 <- normalize node before\n         * - 1-1o-2\n         */\n        let prevNodeEntry = getPreviousIndentList<TElement>(\n          editor,\n          [nodeBefore, path],\n          {\n            breakOnEqIndentNeqListStyleType: false,\n            breakOnLowerIndent: false,\n            eqIndent: false,\n            ...getSiblingIndentListOptions,\n          }\n        );\n\n        if (prevNodeEntry) {\n          normalizeIndentListStart<TElement>(\n            editor,\n            prevNodeEntry,\n            getSiblingIndentListOptions\n          );\n        }\n\n        /**\n         * Case:\n         *\n         * - 11-<1>-11 <- indent\n         * - <11>-11-12 <- normalize prev node after\n         * - 11-12-13\n         */\n        prevNodeEntry = getPreviousIndentList<TElement>(editor, [node, path], {\n          breakOnEqIndentNeqListStyleType: false,\n          breakOnLowerIndent: false,\n          eqIndent: false,\n          ...getSiblingIndentListOptions,\n        });\n\n        if (prevNodeEntry) {\n          normalizeIndentListStart<TElement>(\n            editor,\n            prevNodeEntry,\n            getSiblingIndentListOptions\n          );\n        }\n\n        /**\n         * Case:\n         *\n         * - 11-<12>-13 <- outdent\n         * - 11-2-<13> <- normalize next node before\n         * - 11-2-11\n         */\n        let nextNodeEntry = getNextIndentList<TElement>(\n          editor,\n          [nodeBefore, path],\n          {\n            breakOnEqIndentNeqListStyleType: false,\n            breakOnLowerIndent: false,\n            eqIndent: false,\n            ...getSiblingIndentListOptions,\n          }\n        );\n\n        if (nextNodeEntry) {\n          normalizeIndentListStart<TElement>(\n            editor,\n            nextNodeEntry,\n            getSiblingIndentListOptions\n          );\n        }\n\n        /**\n         * Case:\n         *\n         * - 1-<1o>-2 <- outdent\n         * - 1-o-<2> <- normalize next node after\n         * - 1-o-1\n         */\n        nextNodeEntry = getNextIndentList<TElement>(editor, [node, path], {\n          breakOnEqIndentNeqListStyleType: false,\n          breakOnLowerIndent: false,\n          eqIndent: false,\n          ...getSiblingIndentListOptions,\n        });\n\n        if (nextNodeEntry) {\n          normalizeIndentListStart<TElement>(\n            editor,\n            nextNodeEntry,\n            getSiblingIndentListOptions\n          );\n        }\n      }\n    }\n  };\n\n  return editor;\n};\n","import {\n  type ENodeEntry,\n  type TEditor,\n  type TElement,\n  type Value,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\n\nimport type { IndentListPlugin } from './createIndentListPlugin';\n\nimport { normalizeIndentListNotIndented } from './normalizers/normalizeIndentListNotIndented';\nimport { normalizeIndentListStart } from './normalizers/normalizeIndentListStart';\n\nexport const normalizeIndentList = <V extends Value>(\n  editor: TEditor<V>,\n  { getSiblingIndentListOptions }: IndentListPlugin = {}\n) => {\n  const { normalizeNode } = editor;\n\n  return ([node, path]: ENodeEntry<V>) => {\n    const normalized = withoutNormalizing(editor, () => {\n      if (normalizeIndentListNotIndented(editor, [node, path])) return true;\n      if (\n        normalizeIndentListStart<TElement, Value>(\n          editor,\n          [node as TElement, path],\n          getSiblingIndentListOptions\n        )\n      )\n        return true;\n    });\n\n    if (normalized) return;\n\n    return normalizeNode([node, path]);\n  };\n};\n","import {\n  type TEditor,\n  type TNodeEntry,\n  type Value,\n  isDefined,\n  unsetNodes,\n} from '@udecode/plate-common/server';\nimport { KEY_INDENT } from '@udecode/plate-indent';\n\nimport { KEY_LIST_START, KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\n\n/** Unset KEY_LIST_STYLE_TYPE, KEY_LIST_START if KEY_INDENT is not defined. */\nexport const normalizeIndentListNotIndented = <V extends Value>(\n  editor: TEditor<V>,\n  [node, path]: TNodeEntry\n) => {\n  if (\n    !isDefined(node[KEY_INDENT]) &&\n    (node[KEY_LIST_STYLE_TYPE] || node[KEY_LIST_START])\n  ) {\n    unsetNodes(editor, [KEY_LIST_STYLE_TYPE, KEY_LIST_START], { at: path });\n\n    return true;\n  }\n};\n","import {\n  type EElement,\n  type EElementEntry,\n  type TEditor,\n  type TNodeEntry,\n  type Value,\n  getNode,\n  setElements,\n  withoutNormalizing,\n} from '@udecode/plate-common/server';\n\nimport type { GetSiblingIndentListOptions } from '../queries/getSiblingIndentList';\n\nimport {\n  KEY_LIST_RESTART,\n  KEY_LIST_START,\n  KEY_LIST_STYLE_TYPE,\n} from '../createIndentListPlugin';\nimport { getNextIndentList } from '../queries/getNextIndentList';\nimport { getPreviousIndentList } from '../queries/getPreviousIndentList';\nimport { normalizeFirstIndentListStart } from './normalizeFirstIndentListStart';\n\nexport const normalizeNextIndentListStart = <V extends Value>(\n  editor: TEditor<V>,\n  entry: TNodeEntry,\n  prevEntry?: TNodeEntry\n) => {\n  const [node, path] = entry;\n  const [prevNode] = prevEntry ?? [null];\n\n  const prevListStart = (prevNode?.[KEY_LIST_START] as number) ?? 1;\n  const currListStart = (node[KEY_LIST_START] as number) ?? 1;\n  const restart = node[KEY_LIST_RESTART];\n  const listStart = restart == null ? prevListStart + 1 : restart;\n\n  if (currListStart !== listStart) {\n    setElements(editor, { [KEY_LIST_START]: listStart }, { at: path });\n\n    return true;\n  }\n\n  return false;\n};\n\nexport const normalizeIndentListStart = <\n  N extends EElement<V>,\n  V extends Value = Value,\n>(\n  editor: TEditor<V>,\n  entry: EElementEntry<V>,\n  options?: Partial<GetSiblingIndentListOptions<N, V>>\n) => {\n  return withoutNormalizing(editor, () => {\n    const [node] = entry;\n    const listStyleType = (node as any)[KEY_LIST_STYLE_TYPE];\n\n    if (!listStyleType) return;\n\n    let normalized: boolean | undefined = false;\n\n    let prevEntry = getPreviousIndentList(editor, entry, options);\n\n    if (!prevEntry) {\n      normalized = normalizeFirstIndentListStart(editor, entry);\n\n      // if no prevEntry and not normalized, nothing happened: next should not be normalized\n      if (!normalized) return;\n    }\n\n    let normalizeNext = true;\n\n    let currEntry: EElementEntry<V> | undefined = entry;\n\n    // normalize next until current is not normalized\n    while (normalizeNext) {\n      normalizeNext =\n        normalizeNextIndentListStart(editor, currEntry, prevEntry) ||\n        normalized;\n\n      if (normalizeNext) normalized = true;\n\n      // get the node again after setNodes\n      prevEntry = [getNode<N>(editor, currEntry[1])!, currEntry[1]];\n      currEntry = getNextIndentList(editor, currEntry, options);\n\n      if (!currEntry) break;\n    }\n\n    return normalized;\n  });\n};\n","import {\n  type TEditor,\n  type TNodeEntry,\n  type Value,\n  isDefined,\n  unsetNodes,\n} from '@udecode/plate-common/server';\n\nimport { KEY_LIST_START } from '../createIndentListPlugin';\n\n/**\n * If there is no previous list item and node list start is defined, unset list\n * start (1).\n */\nexport const normalizeFirstIndentListStart = <V extends Value>(\n  editor: TEditor<V>,\n  [node, path]: TNodeEntry\n) => {\n  if (isDefined(node[KEY_LIST_START])) {\n    unsetNodes(editor, KEY_LIST_START, { at: path });\n\n    return true;\n  }\n};\n","import type { TextUnit } from 'slate';\n\nimport {\n  type PlateEditor,\n  type Value,\n  getAboveNode,\n  getNodeString,\n  isCollapsed,\n  isDefined,\n} from '@udecode/plate-common/server';\n\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport { outdentList } from '../transforms';\n\nexport const deleteBackwardIndentList = <V extends Value>(\n  editor: PlateEditor<V>\n) => {\n  const { deleteBackward } = editor;\n\n  return function (unit: TextUnit) {\n    const nodeEntry = getAboveNode(editor);\n\n    if (!nodeEntry) return deleteBackward(unit);\n\n    const listNode = nodeEntry[0];\n\n    if (isCollapsed(editor.selection) && getNodeString(listNode))\n      return deleteBackward(unit);\n    if (isDefined(listNode[KEY_LIST_STYLE_TYPE])) {\n      return outdentList(editor);\n    }\n\n    return deleteBackward(unit);\n  };\n};\n","import {\n  ELEMENT_DEFAULT,\n  type PlateEditor,\n  type TElement,\n  type Value,\n  getAboveNode,\n  insertNodes,\n  isDefined,\n  isEndPoint,\n  isExpanded,\n} from '@udecode/plate-common/server';\n\nimport {\n  KEY_LIST_STYLE_TYPE,\n  KEY_TODO_STYLE_TYPE,\n} from '../createIndentListPlugin';\n\nexport const insertBreakIndentList = <V extends Value>(\n  editor: PlateEditor<V>\n) => {\n  const { insertBreak } = editor;\n\n  return function () {\n    const nodeEntry = getAboveNode(editor);\n\n    if (!nodeEntry) return insertBreak();\n\n    const [node] = nodeEntry;\n\n    if (\n      !isDefined(node[KEY_LIST_STYLE_TYPE]) ||\n      node[KEY_LIST_STYLE_TYPE] !== KEY_TODO_STYLE_TYPE ||\n      // https://github.com/udecode/plate/issues/3340\n      isExpanded(editor.selection) ||\n      !isEndPoint(editor, editor.selection?.focus, nodeEntry[1])\n    )\n      return insertBreak();\n\n    insertNodes<TElement>(editor, {\n      [KEY_LIST_STYLE_TYPE]: KEY_TODO_STYLE_TYPE,\n      checked: false,\n      children: [{ text: '' }],\n      indent: node.indent,\n      type: ELEMENT_DEFAULT,\n    });\n  };\n};\n","import type { NodeEntry } from 'slate';\n\nimport {\n  type PlateEditor,\n  type TElement,\n  type Value,\n  isDefined,\n} from '@udecode/plate-common/server';\n\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\n\nexport const shouldMergeNodesRemovePrevNodeIndentList = <V extends Value>(\n  editor: PlateEditor<V>\n) => {\n  const { shouldMergeNodesRemovePrevNode } = editor;\n\n  return function (prevEntry: NodeEntry, curNodeEntry: NodeEntry): boolean {\n    const prevNode = prevEntry[0] as TElement;\n    const curNode = curNodeEntry[0] as TElement;\n\n    if (\n      isDefined(curNode[KEY_LIST_STYLE_TYPE]) ||\n      isDefined(prevNode[KEY_LIST_STYLE_TYPE])\n    ) {\n      return false;\n    }\n\n    return shouldMergeNodesRemovePrevNode(prevEntry, curNodeEntry);\n  };\n};\n","import {\n  type PlateEditor,\n  type Value,\n  someNode,\n} from '@udecode/plate-common/server';\n\nimport { KEY_LIST_CHECKED, KEY_LIST_STYLE_TYPE, ListStyleType } from '../index';\n\nexport const someIndentList = <V extends Value>(\n  editor: PlateEditor<V>,\n  type: string\n) => {\n  return (\n    !!editor.selection &&\n    someNode(editor, {\n      match: (n) => {\n        const list = n[KEY_LIST_STYLE_TYPE];\n\n        if ((type as any) === ListStyleType.Disc) {\n          return list === ListStyleType.Disc;\n        }\n\n        const isHasProperty = n.hasOwnProperty(KEY_LIST_CHECKED);\n\n        return !!list && list !== ListStyleType.Disc && !isHasProperty;\n      },\n    })\n  );\n};\n","import {\n  type PlateEditor,\n  type Value,\n  someNode,\n} from '@udecode/plate-common/server';\n\nimport {\n  KEY_LIST_CHECKED,\n  KEY_LIST_STYLE_TYPE,\n  KEY_TODO_STYLE_TYPE,\n} from '../index';\n\nexport const someIndentTodo = <V extends Value>(editor: PlateEditor<V>) => {\n  return someNode(editor, {\n    at: editor.selection!,\n    match: (n) => {\n      const list = n[KEY_LIST_STYLE_TYPE];\n      const isHasProperty = n.hasOwnProperty(KEY_LIST_CHECKED);\n\n      return n.type === 'p' && isHasProperty && list === KEY_TODO_STYLE_TYPE;\n    },\n  });\n};\n","import { useEditorRef, useEditorSelector } from '@udecode/plate-common';\n\nimport { ListStyleType, toggleIndentList } from '../index';\nimport { someIndentList } from './someIndentList';\n\nexport const useIndentListToolbarButtonState = ({\n  nodeType = ListStyleType.Disc,\n}: { nodeType?: string } = {}) => {\n  const pressed = useEditorSelector(\n    (editor) => someIndentList(editor, nodeType),\n    [nodeType]\n  );\n\n  return {\n    nodeType,\n    pressed,\n  };\n};\n\nexport const useIndentListToolbarButton = ({\n  nodeType,\n  pressed,\n}: ReturnType<typeof useIndentListToolbarButtonState>) => {\n  const editor = useEditorRef();\n\n  return {\n    props: {\n      onClick: () => {\n        toggleIndentList(editor, {\n          listStyleType: nodeType,\n        });\n      },\n      onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n      },\n      pressed,\n    },\n  };\n};\n","import { findNodePath, useEditorRef } from '@udecode/plate-common';\nimport { type TElement, setNodes } from '@udecode/plate-common/server';\nimport { useReadOnly } from 'slate-react';\n\nexport const useIndentTodoListElementState = ({\n  element,\n}: {\n  element: TElement;\n}) => {\n  const editor = useEditorRef();\n  const { checked } = element;\n  const readOnly = useReadOnly();\n\n  return {\n    checked,\n    editor,\n    element,\n    readOnly,\n  };\n};\n\nexport const useIndentTodoListElement = (\n  state: ReturnType<typeof useIndentTodoListElementState>\n) => {\n  const { checked, editor, element, readOnly } = state;\n\n  return {\n    checkboxProps: {\n      checked: !!checked,\n      onCheckedChange: (value: boolean) => {\n        if (readOnly) return;\n\n        const path = findNodePath(editor, element);\n\n        if (!path) return;\n\n        setNodes(editor, { checked: value }, { at: path });\n      },\n      onMouseDown: (e: any) => {\n        e.preventDefault();\n      },\n    },\n  };\n};\n","import { useEditorRef, useEditorSelector } from '@udecode/plate-common';\n\nimport { ListStyleType, toggleIndentList } from '../index';\nimport { someIndentTodo } from './someIndentTodo';\n\nexport const useIndentTodoToolBarButtonState = ({\n  nodeType = ListStyleType.Disc,\n}: { nodeType?: string } = {}) => {\n  const pressed = useEditorSelector(\n    (editor) => someIndentTodo(editor),\n    [nodeType]\n  );\n\n  return {\n    nodeType,\n    pressed,\n  };\n};\n\nexport const useIndentTodoToolBarButton = ({\n  nodeType,\n  pressed,\n}: ReturnType<typeof useIndentTodoToolBarButtonState>) => {\n  const editor = useEditorRef();\n\n  return {\n    props: {\n      onClick: () => {\n        toggleIndentList(editor, {\n          listStyleType: nodeType,\n        });\n      },\n      onMouseDown: (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n      },\n      pressed,\n    },\n  };\n};\n","import type {\n  EElement,\n  PlateEditor,\n  TElement,\n  TNodeEntry,\n  Value,\n} from '@udecode/plate-common/server';\n\nimport type { ListStyleType } from '../types';\n\nimport { KEY_LIST_STYLE_TYPE } from '../createIndentListPlugin';\nimport {\n  type GetIndentListSiblingsOptions,\n  getIndentListSiblings,\n} from './index';\n\n/**\n * Get the first sibling list style type at the given indent. If none, return\n * the entry list style type.\n */\nexport const getSiblingListStyleType = <V extends Value = Value>(\n  editor: PlateEditor<V>,\n  {\n    entry,\n    indent,\n    ...options\n  }: {\n    entry: TNodeEntry<TElement>;\n    indent: number;\n  } & GetIndentListSiblingsOptions<EElement<V>, V>\n) => {\n  const siblingEntry: TNodeEntry<TElement> = [\n    { ...entry[0], indent },\n    entry[1],\n  ];\n\n  const siblings = getIndentListSiblings(editor, siblingEntry as any, {\n    breakOnEqIndentNeqListStyleType: false,\n    current: false,\n    eqIndent: true,\n    ...options,\n  });\n\n  return (\n    siblings.length > 0\n      ? siblings[0][0][KEY_LIST_STYLE_TYPE]\n      : entry[0][KEY_LIST_STYLE_TYPE]\n  ) as ListStyleType;\n};\n"],"mappings":"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","names":["import_server","ListStyleType","React","import_server","import_plate_indent","import_server","import_plate_indent","import_server","import_plate_indent","import_server","import_plate_indent","import_server","import_server","import_plate_indent","import_server","import_server","import_plate_indent","import_server","import_plate_indent","import_server","import_plate_indent","import_server","import_server","import_plate_indent","import_server","import_server","import_server","import_server","import_server","import_server","import_server","import_plate_common","import_plate_common","import_server","import_plate_common"]}