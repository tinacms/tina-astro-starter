import * as _udecode_plate_common_server from '@udecode/plate-common/server';
import { HotkeyPlugin, PlatePlugin } from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';
import * as _udecode_plate_common from '@udecode/plate-common';
import { Value, PlateEditor, InsertNodesOptions, ENode } from '@udecode/plate-common';
import { Path } from 'slate';
import React$1 from 'react';

declare const ELEMENT_H1 = "h1";
declare const ELEMENT_H2 = "h2";
declare const ELEMENT_H3 = "h3";
declare const ELEMENT_H4 = "h4";
declare const ELEMENT_H5 = "h5";
declare const ELEMENT_H6 = "h6";
declare const KEYS_HEADING: string[];

interface HeadingPlugin extends HotkeyPlugin {
}
type HeadingLevel = 1 | 2 | 3 | 4 | 5 | 6;
interface HeadingsPlugin {
    /** Heading levels supported from 1 to `levels` */
    levels?: HeadingLevel | HeadingLevel[];
}

declare const KEY_HEADING = "heading";
/** Enables support for headings with configurable levels (from 1 to 6). */
declare const createHeadingPlugin: <OP = HeadingsPlugin, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

interface Heading {
    depth: number;
    id: string;
    path: Path;
    title: string;
    type: string;
}
interface TocSideBarProps {
    containerRef: React.RefObject<HTMLDivElement>;
    className?: string;
    onOpenChange?: (open: boolean) => void;
    open?: boolean;
    rootMargin?: string;
    showHeader?: boolean;
    style?: React.CSSProperties;
    topOffset?: number;
}
interface UseContentController {
    containerRef: React.RefObject<HTMLDivElement>;
    isObserve: boolean;
    rootMargin: string;
    topOffset: number;
}

declare const ELEMENT_TOC = "toc";
interface TocPlugin {
    queryHeading?: <V extends Value = Value>(editor: PlateEditor<V>) => Heading[];
}
declare const createTocPlugin: <OP = TocPlugin, OV extends Value = Value, OE extends PlateEditor<OV> = PlateEditor<OV>>(override?: Partial<_udecode_plate_common.PlatePlugin<_udecode_plate_common.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common.PlatePlugin<_udecode_plate_common.NoInfer<OP>, OV, OE>;

type useTocElementStateProps = {
    isScroll: boolean;
    scrollContainerSelector?: string;
    topOffset: number;
};
declare const useTocElementState: ({ isScroll, scrollContainerSelector, topOffset, }: useTocElementStateProps) => {
    editor: _udecode_plate_common.PlateEditor<_udecode_slate.Value>;
    headingList: Heading[];
    onContentScroll: (el: HTMLElement, id: string, behavior?: ScrollBehavior) => void;
};
declare const useTocElement: ({ editor, onContentScroll, }: ReturnType<typeof useTocElementState>) => {
    props: {
        onClick: (e: React$1.MouseEvent<HTMLElement, globalThis.MouseEvent>, item: Heading, behavior: ScrollBehavior) => void;
    };
};

declare const useContentController: ({ containerRef, isObserve, rootMargin, topOffset, }: UseContentController) => {
    activeContentId: string;
    onContentScroll: ({ behavior, el, id, }: {
        behavior?: ScrollBehavior | undefined;
        el: HTMLElement;
        id: string;
    }) => void;
};

interface UseTocController {
    activeId: string;
    isObserve: boolean;
    showHeader: boolean;
    tocRef: React$1.RefObject<HTMLElement>;
}
declare const useTocController: ({ activeId, isObserve, showHeader, tocRef, }: UseTocController) => void;

declare const useTocSideBarState: ({ containerRef, onOpenChange, open, rootMargin, showHeader, style, topOffset, }: TocSideBarProps) => {
    activeContentId: string;
    editor: _udecode_plate_common.PlateEditor<_udecode_slate.Value>;
    headingList: Heading[];
    mouseInToc: boolean;
    onContentScroll: ({ behavior, el, id, }: {
        behavior?: ScrollBehavior | undefined;
        el: HTMLElement;
        id: string;
    }) => void;
    onOpenChange: ((open: boolean) => void) | undefined;
    open: boolean;
    setIsObserve: React$1.Dispatch<React$1.SetStateAction<boolean>>;
    setMouseInToc: React$1.Dispatch<React$1.SetStateAction<boolean>>;
    showHeader: boolean;
    style: React$1.CSSProperties | undefined;
    tocRef: React$1.RefObject<HTMLElement>;
};
declare const useTocSideBar: ({ editor, mouseInToc, onContentScroll, open, setIsObserve, setMouseInToc, tocRef, }: ReturnType<typeof useTocSideBarState>) => {
    navProps: {
        onMouseEnter: () => void;
        onMouseLeave: (e: React$1.MouseEvent<HTMLElement, globalThis.MouseEvent>) => void;
        ref: React$1.RefObject<HTMLElement>;
    };
    onContentClick: (e: React$1.MouseEvent<HTMLElement, globalThis.MouseEvent>, item: Heading, behavior?: ScrollBehavior) => void;
};

declare const insertToc: <V extends Value>(editor: PlateEditor<V>, options?: InsertNodesOptions<V>) => void;

declare function checkIn(e: React.MouseEvent<HTMLElement, globalThis.MouseEvent>): boolean;

declare const heightToTop: (ele: HTMLElement, editorContentRef?: React$1.RefObject<HTMLDivElement>) => number;

declare const isHeading: (node: ENode<Value>) => unknown;

export { ELEMENT_H1, ELEMENT_H2, ELEMENT_H3, ELEMENT_H4, ELEMENT_H5, ELEMENT_H6, ELEMENT_TOC, type Heading, type HeadingLevel, type HeadingPlugin, type HeadingsPlugin, KEYS_HEADING, KEY_HEADING, type TocPlugin, type TocSideBarProps, type UseContentController, checkIn, createHeadingPlugin, createTocPlugin, heightToTop, insertToc, isHeading, useContentController, useTocController, useTocElement, useTocElementState, type useTocElementStateProps, useTocSideBar, useTocSideBarState };
