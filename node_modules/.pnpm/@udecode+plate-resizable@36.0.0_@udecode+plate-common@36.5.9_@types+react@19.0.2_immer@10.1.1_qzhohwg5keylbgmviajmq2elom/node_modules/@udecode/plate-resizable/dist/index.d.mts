import * as csstype from 'csstype';
import React from 'react';
import * as jotai_x from 'jotai-x';
import { TElement } from '@udecode/plate-common';

type ResizeDirection = 'bottom' | 'left' | 'right' | 'top';
type ResizeLengthStatic = number;
type ResizeLengthRelative = string;
type ResizeLength = ResizeLengthRelative | ResizeLengthStatic;
type ResizeEvent = {
    delta: ResizeLengthStatic;
    direction: ResizeDirection;
    finished: boolean;
    initialSize: ResizeLengthStatic;
};

interface ResizableOptions {
    /** Node alignment. */
    align?: 'center' | 'left' | 'right';
    maxWidth?: ResizeLength;
    minWidth?: ResizeLength;
    readOnly?: boolean;
}
declare const useResizableState: ({ align, maxWidth, minWidth, }?: ResizableOptions) => {
    align: "left" | "right" | "center";
    maxWidth: ResizeLength;
    minWidth: ResizeLength;
    setNodeWidth: (w: number) => void;
    setWidth: (args_0: csstype.Property.Width<string | number> | undefined) => void;
    width: csstype.Property.Width<string | number> | undefined;
};
declare const useResizable: ({ align, maxWidth, minWidth, setNodeWidth, setWidth, width, }: ReturnType<typeof useResizableState>) => {
    context: {
        onResize: ({ delta, direction, finished, initialSize }: ResizeEvent) => void;
    };
    props: {
        style: React.CSSProperties;
    };
    wrapperProps: {
        style: React.CSSProperties;
    };
    wrapperRef: React.RefObject<HTMLDivElement>;
};
declare const Resizable: React.ForwardRefExoticComponent<{
    options: ResizableOptions;
} & React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>;

type ResizeHandleStoreState = {
    onResize: (event: ResizeEvent) => void;
};
declare const ResizeHandleProvider: React.FC<jotai_x.ProviderProps<{
    onResize: (event: ResizeEvent) => void;
}>>;
declare const useResizeHandleStore: jotai_x.UseStoreApi<ResizeHandleStoreState, object>;
type ResizeHandleOptions = {
    direction?: ResizeDirection;
    initialSize?: number;
    onHover?: () => void;
    onHoverEnd?: () => void;
    onMouseDown?: React.MouseEventHandler;
    onResize?: (event: ResizeEvent) => void;
    onTouchStart?: React.TouchEventHandler;
};
declare const useResizeHandleState: ({ direction, initialSize: _initialSize, onHover, onHoverEnd, onMouseDown, onResize: onResizeProp, onTouchStart, }: ResizeHandleOptions) => {
    direction: ResizeDirection;
    initialPosition: number;
    initialSize: number;
    isHorizontal: boolean;
    isResizing: boolean;
    onHover: (() => void) | undefined;
    onHoverEnd: (() => void) | undefined;
    onMouseDown: React.MouseEventHandler<Element> | undefined;
    onResize: (event: ResizeEvent) => void;
    onTouchStart: React.TouchEventHandler<Element> | undefined;
    setInitialPosition: React.Dispatch<React.SetStateAction<number>>;
    setInitialSize: React.Dispatch<React.SetStateAction<number>>;
    setIsResizing: React.Dispatch<React.SetStateAction<boolean>>;
};
declare const useResizeHandle: ({ isHorizontal, isResizing, onHover, onHoverEnd, onMouseDown, onTouchStart, setInitialPosition, setInitialSize, setIsResizing, }: ReturnType<typeof useResizeHandleState>) => {
    props: {
        onMouseDown: React.MouseEventHandler<Element>;
        onMouseOut: () => void;
        onMouseOver: () => void;
        onTouchEnd: () => void;
        onTouchMove: () => void;
        onTouchStart: React.TouchEventHandler<Element>;
    };
};
declare const ResizeHandle: React.ForwardRefExoticComponent<{
    as?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;
    asChild?: boolean | undefined;
    className?: string | undefined;
    options?: ResizeHandleOptions | undefined;
    setProps?: ((hookProps: {
        onMouseDown: React.MouseEventHandler<Element>;
        onMouseOut: () => void;
        onMouseOver: () => void;
        onTouchEnd: () => void;
        onTouchMove: () => void;
        onTouchStart: React.TouchEventHandler<Element>;
    }) => Omit<React.HTMLAttributes<HTMLDivElement>, "onResize">) | undefined;
    state?: {
        direction: ResizeDirection;
        initialPosition: number;
        initialSize: number;
        isHorizontal: boolean;
        isResizing: boolean;
        onHover: (() => void) | undefined;
        onHoverEnd: (() => void) | undefined;
        onMouseDown: React.MouseEventHandler<Element> | undefined;
        onResize: (event: ResizeEvent) => void;
        onTouchStart: React.TouchEventHandler<Element> | undefined;
        setInitialPosition: React.Dispatch<React.SetStateAction<number>>;
        setInitialSize: React.Dispatch<React.SetStateAction<number>>;
        setIsResizing: React.Dispatch<React.SetStateAction<boolean>>;
    } | undefined;
    style?: React.CSSProperties | undefined;
} & Omit<React.HTMLAttributes<HTMLDivElement>, "onResize"> & React.RefAttributes<any>>;
type ResizeHandleProps = React.ComponentPropsWithRef<typeof ResizeHandle>;

interface TResizableElement extends TElement {
    align?: 'center' | 'left' | 'right';
    width?: number;
}

declare const ResizableProvider: React.FC<jotai_x.ProviderProps<{
    width: csstype.Property.Width<string | number> | undefined;
}>>;
declare const resizableStore: jotai_x.StoreApi<{
    width: csstype.Property.Width<string | number> | undefined;
}, object, "resizable">;
declare const useResizableStore: jotai_x.UseStoreApi<{
    width: csstype.Property.Width<string | number> | undefined;
}, object>;

declare const isTouchEvent: (event: MouseEvent | TouchEvent) => event is TouchEvent;

interface ResizeLengthClampOptions<T = ResizeLength> {
    max?: T;
    min?: T;
}
declare const resizeLengthClampStatic: (length: ResizeLengthStatic, { max, min }: ResizeLengthClampOptions<ResizeLengthStatic>) => ResizeLengthStatic;
declare const resizeLengthClamp: <T extends ResizeLength>(length: T, parentLength: number, { max, min }: ResizeLengthClampOptions<ResizeLength>) => T;

declare const resizeLengthToRelative: (length: ResizeLength, parentLength: number) => ResizeLengthRelative;

declare const resizeLengthToStatic: (length: ResizeLength, parentLength: number) => ResizeLengthStatic;

export { Resizable, type ResizableOptions, ResizableProvider, type ResizeDirection, type ResizeEvent, ResizeHandle, type ResizeHandleOptions, type ResizeHandleProps, ResizeHandleProvider, type ResizeHandleStoreState, type ResizeLength, type ResizeLengthClampOptions, type ResizeLengthRelative, type ResizeLengthStatic, type TResizableElement, isTouchEvent, resizableStore, resizeLengthClamp, resizeLengthClampStatic, resizeLengthToRelative, resizeLengthToStatic, useResizable, useResizableState, useResizableStore, useResizeHandle, useResizeHandleState, useResizeHandleStore };
