import * as _udecode_plate_common_server from '@udecode/plate-common/server';
import { QueryNodeOptions, Value, PlateEditor, WithPlatePlugin } from '@udecode/plate-common/server';
import * as _udecode_slate from '@udecode/slate';

interface TrailingBlockPlugin extends QueryNodeOptions {
    /** Level where the trailing node should be, the first level being 0. */
    level?: number;
    /** Type of the trailing block */
    type?: string;
}
declare const KEY_TRAILING_BLOCK = "trailingBlock";
/** @see {@link withTrailingBlock} */
declare const createTrailingBlockPlugin: <OP = TrailingBlockPlugin, OV extends _udecode_slate.Value = _udecode_slate.Value, OE extends _udecode_plate_common_server.PlateEditor<OV> = _udecode_plate_common_server.PlateEditor<OV>>(override?: Partial<_udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>> | undefined, overrideByKey?: _udecode_plate_common_server.OverrideByKey<OV, OE> | undefined) => _udecode_plate_common_server.PlatePlugin<_udecode_plate_common_server.NoInfer<OP>, OV, OE>;

/**
 * Add a trailing block when the last node type is not `type` and when the
 * editor has .
 */
declare const withTrailingBlock: <V extends Value = Value, E extends PlateEditor<V> = PlateEditor<V>>(editor: E, { options: { level, type, ...query }, }: WithPlatePlugin<TrailingBlockPlugin, V, E>) => E;

export { KEY_TRAILING_BLOCK, type TrailingBlockPlugin, createTrailingBlockPlugin, withTrailingBlock };
